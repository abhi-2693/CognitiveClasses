{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Speech to Text",
    "description": "The IBM&reg; Speech to Text service provides APIs that use IBM's speech-recognition capabilities to produce transcripts of spoken audio. The service can transcribe speech from various languages and audio formats. In addition to basic transcription, the service can produce detailed information about many different aspects of the audio. For most languages, the service supports two sampling rates, broadband and narrowband. It returns all JSON response content in the UTF-8 character set. \n\nFor speech recognition, the service supports synchronous and asynchronous HTTP Representational State Transfer (REST) interfaces. It also supports a WebSocket interface that provides a full-duplex, low-latency communication channel: Clients send requests and audio to the service and receive results over a single connection asynchronously. \n\nThe service also offers two customization interfaces. Use language model customization to expand the vocabulary of a base model with domain-specific terminology. Use acoustic model customization to adapt a base model for the acoustic characteristics of your audio. For language model customization, the service also supports grammars. A grammar is a formal language specification that lets you restrict the phrases that the service can recognize. \n\nLanguage model customization and acoustic model customization are generally available for production use with all language models that are generally available. Grammars are beta functionality for all language models that support language model customization.",
    "x-vcap-service-name": "speech_to_text",
    "x-watson-host": "stream.watsonplatform.net",
    "x-sdk-supported-languages": [
      "java",
      "node",
      "python",
      "ruby",
      "go",
      "swift",
      "dotnet-standard",
      "unity"
    ],
    "x-codegen-config": {
      "includeExternalConfig": true,
      "supportNodeCallbacks": true,
      "dotnet-standard": {
        "apiPackage": "IBM.Watson"
      },
      "go": {
        "apiPackage": "github.com/watson-developer-cloud/go-sdk"
      },
      "cli": {
        "apiPackage": "cli-watson-plugin",
        "cliPluginName": "watson"
      },
      "java": {
        "apiPackage": "com.ibm.watson"
      },
      "python": {
        "apiPackage": "ibm_watson"
      },
      "swift": {
        "resterror-alias": "WatsonError",
        "restresponse-alias": "WatsonResponse"
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    },
    {
      "IAM": []
    },
    {
      "ICP4D": []
    }
  ],
  "externalDocs": {
    "description": "For more information about this service, see the docs.",
    "url": "https://cloud.ibm.com/docs/speech-to-text/",
    "x-information-security": "https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-information-security",
    "x-release-notes": "https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-release-notes"
  },
  "x-doc-properties": [
    "hasCustomEndpoints",
    "hasCustomURLGermany",
    "hasDataLabels",
    "hasWebSocketsSTT"
  ],
  "tags": [
    {
      "name": "Models"
    },
    {
      "name": "Synchronous"
    },
    {
      "name": "Asynchronous"
    },
    {
      "name": "Custom language models"
    },
    {
      "name": "Custom corpora"
    },
    {
      "name": "Custom words"
    },
    {
      "name": "Custom grammars"
    },
    {
      "name": "Custom acoustic models"
    },
    {
      "name": "Custom audio resources"
    },
    {
      "name": "User data"
    }
  ],
  "paths": {
    "/v1/models": {
      "get": {
        "tags": [
          "Models"
        ],
        "operationId": "listModels",
        "summary": "List models",
        "description": "Lists all language models that are available for use with the service. The information includes the name of the model and its minimum sampling rate in Hertz, among other things. \n\n**See also:** [Languages and models](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-models#models).",
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpeechModels"
                },
                "examples": {
                  "response": {
                    "value": {
                      "models": [
                        {
                          "name": "pt-BR_NarrowbandModel",
                          "language": "pt-BR",
                          "url": "{url}/v1/models/pt-BR_NarrowbandModel",
                          "rate": 8000,
                          "supported_features": {
                            "custom_language_model": false,
                            "speaker_labels": false
                          },
                          "description": "Brazilian Portuguese narrowband model."
                        },
                        {
                          "name": "ko-KR_BroadbandModel",
                          "language": "ko-KR",
                          "url": "{url}/models/ko-KR_BroadbandModel",
                          "rate": 16000,
                          "supported_features": {
                            "custom_language_model": true,
                            "speaker_labels": false
                          },
                          "description": "Korean broadband model."
                        },
                        {
                          "name": "fr-FR_BroadbandModel",
                          "language": "fr-FR",
                          "url": "{url}/v1/models/fr-FR_BroadbandModel",
                          "rate": 16000,
                          "supported_features": {
                            "custom_language_model": true,
                            "speaker_labels": true
                          },
                          "description": "French broadband model."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "406": {
            "description": "**Not Acceptable**. The request specified an `Accept` header with an incompatible content type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "415": {
            "description": "**Unsupported Media Type**. The request specified an unacceptable media type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/models\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "SpeechModels speechModels = speechToText.listModels().execute().getResult();\n",
                      "System.out.println(speechModels);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "speechToText.listModels()\n",
                      "  .then(speechModels => {\n",
                      "    console.log(JSON.stringify(speechModels, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_models = speech_to_text.list_models().get_result()\n",
                      "print(json.dumps(speech_models, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_models = speech_to_text.list_models\n",
                      "puts JSON.pretty_generate(speech_models.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.ListModels(\n",
                      "    &speechtotextv1.ListModelsOptions{},\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.listModels() {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let models = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(models)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.ListModels();\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "SpeechModels listModelsResponse = null;\n",
                      "speechToText.ListModels(\n",
                      "    callback: (DetailedResponse<SpeechModels> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"ListModels result: {0}\", response.Response);\n",
                      "        listModelsResponse = response.Result;\n",
                      "    }\n",
                      ");\n",
                      "\n",
                      "while (listModelsResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/models/{model_id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "operationId": "getModel",
        "summary": "Get a model",
        "description": "Gets information for a single specified language model that is available for use with the service. The information includes the name of the model and its minimum sampling rate in Hertz, among other things. \n\n**See also:** [Languages and models](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-models#models).",
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpeechModel"
                },
                "examples": {
                  "response": {
                    "value": {
                      "rate": 16000,
                      "name": "en-US_BroadbandModel",
                      "language": "en-US",
                      "url": "{url}/v1/models/en-US_BroadbandModel",
                      "supported_features": {
                        "custom_language_model": true,
                        "speaker_labels": true
                      },
                      "description": "US English broadband model."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**Not Found**. The specified `model_id` was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "406": {
            "description": "**Not Acceptable**. The request specified an `Accept` header with an incompatible content type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "415": {
            "description": "**Unsupported Media Type**. The request specified an unacceptable media type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/models/en-US_BroadbandModel\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "GetModelOptions getModelOptions = new GetModelOptions.Builder()\n",
                      "  .modelId(\"en-US_BroadbandModel\")\n",
                      "  .build();\n",
                      "\n",
                      "SpeechModel speechModel = speechToText.getModel(getModelOptions).execute().getResult();\n",
                      "System.out.println(speechModel);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const getModelParams = {\n",
                      "  modelId: 'en-US_BroadbandModel',\n",
                      "};\n",
                      "\n",
                      "speechToText.getModel(getModelParams)\n",
                      "  .then(speechModel => {\n",
                      "    console.log(JSON.stringify(speechModel, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_model = speech_to_text.get_model('en-US_BroadbandModel').get_result()\n",
                      "print(json.dumps(speech_model, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_model = speech_to_text.get_model(\n",
                      "  model_id: \"en-US_BroadbandModel\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(speech_model.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.GetModel(\n",
                      "    &speechtotextv1.GetModelOptions{\n",
                      "      ModelID: core.StringPtr(\"en-US_BroadbandModel\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.getModel(modelID: \"en-US_BroadbandModel\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let model = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(model)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.GetModel(\n",
                      "    modelId: \"en-US_BroadbandModel\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.GetModel(\n",
                      "    callback: (DetailedResponse<SpeechModel> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"GetModel result: {0}\", response.Response);\n",
                      "        getModelResponse = response.Result;\n",
                      "    },\n",
                      "    modelId: \"en-US_BroadbandModel\"\n",
                      ");\n",
                      "\n",
                      "while (getModelResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/recognize": {
      "post": {
        "tags": [
          "Synchronous"
        ],
        "operationId": "recognize",
        "summary": "Recognize audio",
        "description": "Sends audio and returns transcription results for a recognition request. You can pass a maximum of 100 MB and a minimum of 100 bytes of audio with a request. The service automatically detects the endianness of the incoming audio and, for audio that includes multiple channels, downmixes the audio to one-channel mono during transcoding. The method returns only final results; to enable interim results, use the WebSocket API. (With the `curl` command, use the `--data-binary` option to upload the file for the request.) \n\n**See also:** [Making a basic HTTP request](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-http#HTTP-basic). \n\n### Streaming mode\n\n For requests to transcribe live audio as it becomes available, you must set the `Transfer-Encoding` header to `chunked` to use streaming mode. In streaming mode, the service closes the connection (status code 408) if it does not receive at least 15 seconds of audio (including silence) in any 30-second period. The service also closes the connection (status code 400) if it detects no speech for `inactivity_timeout` seconds of streaming audio; use the `inactivity_timeout` parameter to change the default of 30 seconds. \n\n**See also:**\n* [Audio transmission](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#transmission)\n* [Timeouts](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#timeouts) \n\n### Audio formats (content types)\n\n The service accepts audio in the following formats (MIME types).\n* For formats that are labeled **Required**, you must use the `Content-Type` header with the request to specify the format of the audio.\n* For all other formats, you can omit the `Content-Type` header or specify `application/octet-stream` with the header to have the service automatically detect the format of the audio. (With the `curl` command, you can specify either `\"Content-Type:\"` or `\"Content-Type: application/octet-stream\"`.) \n\nWhere indicated, the format that you specify must include the sampling rate and can optionally include the number of channels and the endianness of the audio.\n* `audio/alaw` (**Required.** Specify the sampling rate (`rate`) of the audio.)\n* `audio/basic` (**Required.** Use only with narrowband models.)\n* `audio/flac`\n* `audio/g729` (Use only with narrowband models.)\n* `audio/l16` (**Required.** Specify the sampling rate (`rate`) and optionally the number of channels (`channels`) and endianness (`endianness`) of the audio.)\n* `audio/mp3`\n* `audio/mpeg`\n* `audio/mulaw` (**Required.** Specify the sampling rate (`rate`) of the audio.)\n* `audio/ogg` (The service automatically detects the codec of the input audio.)\n* `audio/ogg;codecs=opus`\n* `audio/ogg;codecs=vorbis`\n* `audio/wav` (Provide audio with a maximum of nine channels.)\n* `audio/webm` (The service automatically detects the codec of the input audio.)\n* `audio/webm;codecs=opus`\n* `audio/webm;codecs=vorbis` \n\nThe sampling rate of the audio must match the sampling rate of the model for the recognition request: for broadband models, at least 16 kHz; for narrowband models, at least 8 kHz. If the sampling rate of the audio is higher than the minimum required rate, the service down-samples the audio to the appropriate rate. If the sampling rate of the audio is lower than the minimum required rate, the request fails.\n\n **See also:** [Audio formats](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-audio-formats#audio-formats). \n\n### Multipart speech recognition\n\n **Note:** The Watson SDKs do not support multipart speech recognition. \n\nThe HTTP `POST` method of the service also supports multipart speech recognition. With multipart requests, you pass all audio data as multipart form data. You specify some parameters as request headers and query parameters, but you pass JSON metadata as form data to control most aspects of the transcription. You can use multipart recognition to pass multiple audio files with a single request. \n\nUse the multipart approach with browsers for which JavaScript is disabled or when the parameters used with the request are greater than the 8 KB limit imposed by most HTTP servers and proxies. You can encounter this limit, for example, if you want to spot a very large number of keywords. \n\n**See also:** [Making a multipart HTTP request](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-http#HTTP-multi).",
        "x-content-type-description": "The format (MIME type) of the audio. For more information about specifying an audio format, see **Audio formats (content types)** in the method description.",
        "parameters": [
          {
            "$ref": "#/components/parameters/TransferEncodingParam"
          },
          {
            "$ref": "#/components/parameters/ModelParam"
          },
          {
            "$ref": "#/components/parameters/CustomLanguageIDRecognizeParam"
          },
          {
            "$ref": "#/components/parameters/CustomAcousticIDRecognizeParam"
          },
          {
            "$ref": "#/components/parameters/BaseModelVersionParam"
          },
          {
            "$ref": "#/components/parameters/CustomizationWeightRecognizeParam"
          },
          {
            "$ref": "#/components/parameters/InactivityTimeoutParam"
          },
          {
            "$ref": "#/components/parameters/KeywordsParam"
          },
          {
            "$ref": "#/components/parameters/KeywordsThresholdParam"
          },
          {
            "$ref": "#/components/parameters/MaxAlternativesParam"
          },
          {
            "$ref": "#/components/parameters/WordAlternativesThresholdParam"
          },
          {
            "$ref": "#/components/parameters/WordConfidenceParam"
          },
          {
            "$ref": "#/components/parameters/TimestampsParam"
          },
          {
            "$ref": "#/components/parameters/ProfanityFilterParam"
          },
          {
            "$ref": "#/components/parameters/SmartFormattingParam"
          },
          {
            "$ref": "#/components/parameters/SpeakerLabelsParam"
          },
          {
            "$ref": "#/components/parameters/CustomizationIDRecognizeParam"
          },
          {
            "$ref": "#/components/parameters/GrammarNameParam"
          },
          {
            "$ref": "#/components/parameters/RedactionParam"
          },
          {
            "$ref": "#/components/parameters/AudioMetricsParam"
          },
          {
            "$ref": "#/components/parameters/SilenceTimeParam"
          },
          {
            "$ref": "#/components/parameters/SplitTranscriptParam"
          },
          {
            "$ref": "#/components/parameters/SpeechDetectorSensitivityParam"
          },
          {
            "$ref": "#/components/parameters/BackgroundAudioSuppressionParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/recognizeAudio"
        },
        "x-codegen-request-body-name": "audio",
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpeechRecognitionResults"
                },
                "examples": {
                  "response": {
                    "value": {
                      "results": [
                        {
                          "word_alternatives": [
                            {
                              "start_time": 0.15,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "a"
                                }
                              ],
                              "end_time": 0.3
                            },
                            {
                              "start_time": 0.3,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "line"
                                }
                              ],
                              "end_time": 0.64
                            },
                            {
                              "start_time": 0.64,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "of"
                                }
                              ],
                              "end_time": 0.73
                            },
                            {
                              "start_time": 0.73,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "severe"
                                }
                              ],
                              "end_time": 1.08
                            },
                            {
                              "start_time": 1.08,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "thunderstorms"
                                }
                              ],
                              "end_time": 1.85
                            },
                            {
                              "start_time": 1.85,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "with"
                                }
                              ],
                              "end_time": 2
                            },
                            {
                              "start_time": 2,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "several"
                                }
                              ],
                              "end_time": 2.52
                            },
                            {
                              "start_time": 2.52,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "possible"
                                }
                              ],
                              "end_time": 3.03
                            },
                            {
                              "start_time": 3.03,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "tornadoes"
                                }
                              ],
                              "end_time": 3.85
                            },
                            {
                              "start_time": 3.95,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "is"
                                }
                              ],
                              "end_time": 4.13
                            },
                            {
                              "start_time": 4.13,
                              "alternatives": [
                                {
                                  "confidence": 1,
                                  "word": "approaching"
                                }
                              ],
                              "end_time": 4.58
                            },
                            {
                              "start_time": 4.58,
                              "alternatives": [
                                {
                                  "confidence": 0.96,
                                  "word": "Colorado"
                                }
                              ],
                              "end_time": 5.16
                            },
                            {
                              "start_time": 5.16,
                              "alternatives": [
                                {
                                  "confidence": 0.95,
                                  "word": "on"
                                }
                              ],
                              "end_time": 5.32
                            },
                            {
                              "start_time": 5.32,
                              "alternatives": [
                                {
                                  "confidence": 0.98,
                                  "word": "Sunday"
                                }
                              ],
                              "end_time": 6.04
                            }
                          ],
                          "keywords_result": {
                            "colorado": [
                              {
                                "normalized_text": "Colorado",
                                "start_time": 4.58,
                                "confidence": 0.96,
                                "end_time": 5.16
                              }
                            ],
                            "tornadoes": [
                              {
                                "normalized_text": "tornadoes",
                                "start_time": 3.03,
                                "confidence": 1,
                                "end_time": 3.85
                              }
                            ]
                          },
                          "alternatives": [
                            {
                              "confidence": 1,
                              "transcript": "a line of severe thunderstorms with several possible tornadoes is approaching Colorado on Sunday "
                            }
                          ],
                          "final": true
                        }
                      ],
                      "result_index": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The request failed because of a user input error. For example, the request passed audio that does not match the indicated format or failed to specify a required audio format; specified a custom language or custom acoustic model that is not in the `available` state; or experienced an inactivity timeout. Specific messages include\n* `Model {model} not found`\n* `Requested model is not available`\n* `This 8000hz audio input requires a narrow band model. See /v1/models for a list of available models.`\n* `speaker_labels is not a supported feature for model {model}`\n* `keywords_threshold value must be between zero and one (inclusive)`\n* `word_alternatives_threshold value must be between zero and one (inclusive)`\n* `You cannot specify both 'customization_id' and 'language_customization_id' parameter!`\n* `No speech detected for 30s`\n* `Unable to transcode data stream application/octet-stream -> audio/x-float-array`\n* `Stream was {number} bytes but needs to be at least 100 bytes.`\n* `keyword {keyword} length exceeds the maximum length 1024`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "406": {
            "description": "**Not Acceptable**. The request specified an `Accept` header with an incompatible content type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "408": {
            "description": "**Request Timeout**. The connection was closed due to inactivity (session timeout) for 30 seconds.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "413": {
            "description": "**Payload Too Large**. The request passed an audio file that exceeded the currently supported data limit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "415": {
            "description": "**Unsupported Media Type**. The request specified an unacceptable media type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. The service experienced an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "**Service Unavailable**. The service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "--header \"Content-Type: audio/flac\" ",
                      "--data-binary @audio-file2.flac ",
                      "\"{url}/v1/recognize?word_alternatives_threshold=0.9&keywords=%22colorado%22%2C%22tornado%22%2C%22tornadoes%22&keywords_threshold=0.5\""
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file2.flac\" download=\"audio-file2.flac\">audio-file2.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "try {\n",
                      "  RecognizeOptions recognizeOptions = new RecognizeOptions.Builder()\n",
                      "    .audio(new FileInputStream(\"audio-file2.flac\"))\n",
                      "    .contentType(\"audio/flac\")\n",
                      "    .wordAlternativesThreshold((float) 0.9)\n",
                      "    .keywords(Arrays.asList(\"colorado\", \"tornado\", \"tornadoes\"))\n",
                      "    .keywordsThreshold((float) 0.5)\n",
                      "    .build();\n",
                      "  \n",
                      "  SpeechRecognitionResults speechRecognitionResults =\n",
                      "    speechToText.recognize(recognizeOptions).execute().getResult();\n",
                      "  System.out.println(speechRecognitionResults);\n",
                      "  } catch (FileNotFoundException e) {\n",
                      "    e.printStackTrace();\n",
                      "  }\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file2.flac\" download=\"audio-file2.flac\">audio-file2.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const fs = require('fs');\n",
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const recognizeParams = {\n",
                      "  audio: fs.createReadStream('audio-file2.flac'),\n",
                      "  contentType: 'audio/flac',\n",
                      "  wordAlternativesThreshold: 0.9,\n",
                      "  keywords: ['colorado', 'tornado', 'tornadoes'],\n",
                      "  keywordsThreshold: 0.5,\n",
                      "};\n",
                      "\n",
                      "speechToText.recognize(recognizeParams)\n",
                      "  .then(speechRecognitionResults => {\n",
                      "    console.log(JSON.stringify(speechRecognitionResults, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file2.flac\" download=\"audio-file2.flac\">audio-file2.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from os.path import join, dirname\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "with open(join(dirname(__file__), './.', 'audio-file2.flac'),\n",
                      "               'rb') as audio_file:\n",
                      "    speech_recognition_results = speech_to_text.recognize(\n",
                      "        audio=audio_file,\n",
                      "        content_type='audio/flac',\n",
                      "        word_alternatives_threshold=0.9,\n",
                      "        keywords=['colorado', 'tornado', 'tornadoes'],\n",
                      "        keywords_threshold=0.5\n",
                      "    ).get_result()\n",
                      "print(json.dumps(speech_recognition_results, indent=2))"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file2.flac\" download=\"audio-file2.flac\">audio-file2.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "File.open(\"audio-file2.flac\") do |audio_file|\n",
                      "  speech_recognition_results = speech_to_text.recognize(\n",
                      "    audio: audio_file,\n",
                      "    content_type: \"audio/flac\",\n",
                      "    word_alternatives_threshold: 0.9,\n",
                      "    keywords: [\"colorado\", \"tornado\", \"tornadoes\"],\n",
                      "    keywords_threshold: 0.5\n",
                      "  )\n",
                      "  puts JSON.pretty_generate(speech_recognition_results.result)\n",
                      "end"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file2.flac\" download=\"audio-file2.flac\">audio-file2.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"io\"\n",
                      "  \"os\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  files := [2]string{\"audio-file1.flac\", \"audio-file2.flac\"}\n",
                      "  for _, file := range files {\n",
                      "    var audioFile io.ReadCloser\n",
                      "    var audioFileErr error\n",
                      "    audioFile, audioFileErr = os.Open(\"./.\" + file)\n",
                      "    if audioFileErr != nil {\n",
                      "      panic(audioFileErr)\n",
                      "    }\n",
                      "    result, response, responseErr := speechToText.Recognize(\n",
                      "      &speechtotextv1.RecognizeOptions{\n",
                      "        Audio:                     audioFile,\n",
                      "        ContentType:               core.StringPtr(\"audio/flac\"),\n",
                      "        Timestamps:                core.BoolPtr(true),\n",
                      "        WordAlternativesThreshold: core.Float32Ptr(0.9),\n",
                      "        Keywords:                  []string{\"colorado\", \"tornado\", \"tornadoes\"},\n",
                      "        KeywordsThreshold:         core.Float32Ptr(0.5),\n",
                      "      },\n",
                      "    )\n",
                      "    if responseErr != nil {\n",
                      "      panic(responseErr)\n",
                      "    }\n",
                      "    b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "    fmt.Println(string(b))\n",
                      "  }\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file2.flac\" download=\"audio-file2.flac\">audio-file2.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "let url = Bundle.main.url(forResource: \"audio-file2\", withExtension: \"flac\")\n",
                      "var audio = try! Data(contentsOf: url!)\n",
                      "\n",
                      "speechToText.recognize(\n",
                      "  audio: audio,\n",
                      "  keywords: [\"colorado\", \"tornado\", \"tornadoes\"],\n",
                      "  keywordsThreshold: 0.5,\n",
                      "  wordAlternativesThreshold: 0.90,\n",
                      "  contentType: \"audio/flac\")\n",
                      "{\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let results = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(results)\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file2.flac\" download=\"audio-file2.flac\">audio-file2.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.Recognize(\n",
                      "    audio: File.ReadAllBytes(\"audio-file2.flac\"),\n",
                      "    contentType: \"audio/flac\",\n",
                      "    wordAlternativesThreshold: 0.9f,\n",
                      "    keywords: new List<string>()\n",
                      "    {\n",
                      "        \"colorado\",\n",
                      "        \"tornado\",\n",
                      "        \"tornadoes\"\n",
                      "    },\n",
                      "    keywordsThreshold: 0.5f\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file2.flac\" download=\"audio-file2.flac\">audio-file2.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "SpeechRecognitionResults recognizeResponse = null;\n",
                      "speechToText.Recognize(\n",
                      "    callback: (DetailedResponse<SpeechRecognitionResults> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"Recognize result: {0}\", response.Response);\n",
                      "        recognizeResponse = response.Result;\n",
                      "    },\n",
                      "    audio: File.ReadAllBytes(\"audio-file2.flac\"),\n",
                      "    contentType: \"audio/flac\",\n",
                      "    wordAlternativesThreshold: 0.9f,\n",
                      "    keywords: new List<string>()\n",
                      "    {\n",
                      "        \"colorado\",\n",
                      "        \"tornado\",\n",
                      "        \"tornadoes\"\n",
                      "    },\n",
                      "    keywordsThreshold: 0.5f\n",
                      ");\n",
                      "\n",
                      "while (recognizeResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file2.flac\" download=\"audio-file2.flac\">audio-file2.flac</a>"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/register_callback": {
      "post": {
        "tags": [
          "Asynchronous"
        ],
        "operationId": "registerCallback",
        "summary": "Register a callback",
        "description": "Registers a callback URL with the service for use with subsequent asynchronous recognition requests. The service attempts to register, or white-list, the callback URL if it is not already registered by sending a `GET` request to the callback URL. The service passes a random alphanumeric challenge string via the `challenge_string` parameter of the request. The request includes an `Accept` header that specifies `text/plain` as the required response type. \n\nTo be registered successfully, the callback URL must respond to the `GET` request from the service. The response must send status code 200 and must include the challenge string in its body. Set the `Content-Type` response header to `text/plain`. Upon receiving this response, the service responds to the original registration request with response code 201. \n\nThe service sends only a single `GET` request to the callback URL. If the service does not receive a reply with a response code of 200 and a body that echoes the challenge string sent by the service within five seconds, it does not white-list the URL; it instead sends status code 400 in response to the **Register a callback** request. If the requested callback URL is already white-listed, the service responds to the initial registration request with response code 200. \n\nIf you specify a user secret with the request, the service uses it as a key to calculate an HMAC-SHA1 signature of the challenge string in its response to the `POST` request. It sends this signature in the `X-Callback-Signature` header of its `GET` request to the URL during registration. It also uses the secret to calculate a signature over the payload of every callback notification that uses the URL. The signature provides authentication and data integrity for HTTP communications. \n\nAfter you successfully register a callback URL, you can use it with an indefinite number of recognition requests. You can register a maximum of 20 callback URLS in a one-hour span of time. \n\n**See also:** [Registering a callback URL](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-async#register).",
        "parameters": [
          {
            "name": "callback_url",
            "in": "query",
            "description": "An HTTP or HTTPS URL to which callback notifications are to be sent. To be white-listed, the URL must successfully echo the challenge string during URL verification. During verification, the client can also check the signature that the service sends in the `X-Callback-Signature` header to verify the origin of the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_secret",
            "in": "query",
            "description": "A user-specified string that the service uses to generate the HMAC-SHA1 signature that it sends via the `X-Callback-Signature` header. The service includes the header during URL verification and with every notification sent to the callback URL. It calculates the signature over the payload of the notification. If you omit the parameter, the service does not send the header.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The callback was already registered (white-listed). The status included in the response is `already created`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterStatus"
                },
                "examples": {
                  "response": {
                    "value": {
                      "status": "already created",
                      "url": "http://{user_callback_path}/job_results"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "**Created**. The callback was successfully registered (white-listed). The status included in the response is `created`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterStatus"
                },
                "examples": {
                  "response": {
                    "value": {
                      "status": "created",
                      "url": "http://{user_callback_path}/job_results"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The callback registration failed. The request was missing a required parameter or specified an invalid argument; the client sent an invalid response to the service's `GET` request during the registration process; or the client failed to respond to the server's request before the five-second timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "**Service Unavailable**. The service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/register_callback?callback_url=http://{user_callback_path}/job_results&user_secret=ThisIsMySecret\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "RegisterCallbackOptions registerCallbackOptions = new RegisterCallbackOptions.Builder()\n",
                      "  .callbackUrl(\"http://{user_callback_path}/job_results\")\n",
                      "  .userSecret(\"ThisIsMySecret\")\n",
                      "  .build();\n",
                      "\n",
                      "RegisterStatus registerStatus =\n",
                      "  speechToText.registerCallback(registerCallbackOptions).execute().getResult();\n",
                      "System.out.println(registerStatus);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const registerCallbackParams = {\n",
                      "  callbackUrl: 'http://{user_callback_path}/job_results',\n",
                      "  userSecret: 'ThisIsMySecret',\n",
                      "};\n",
                      "\n",
                      "speechToText.registerCallback(registerCallbackParams)\n",
                      "  .then(registerStatus => {\n",
                      "    console.log(JSON.stringify(registerStatus, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "register_status = speech_to_text.register_callback(\n",
                      "    'http://{user_callback_path}/job_results',\n",
                      "    user_secret='ThisIsMySecret'\n",
                      ").get_result()\n",
                      "print(json.dumps(register_status, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "register_status = speech_to_text.register_callback(\n",
                      "  callback_url: \"http://{user_callback_path}/job_results\",\n",
                      "  user_secret: \"ThisIsMySecret\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(register_status.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.RegisterCallback(\n",
                      "  &speechtotextv1.RegisterCallbackOptions{\n",
                      "    CallbackURL: core.StringPtr(\"http://{user_callback_path}/job_results\"),\n",
                      "    UserSecret:  core.StringPtr(\"ThisIsMySecret\"),\n",
                      "  },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.registerCallback(\n",
                      "  callbackURL: \"http://{user_callback_path}/job_results\",\n",
                      "  userSecret: \"ThisIsMySecret\")\n",
                      "{\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let registerStatus = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(registerStatus)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.RegisterCallback(\n",
                      "    callbackUrl: \"http://{user_callback_path}/job_results\",\n",
                      "    userSecret: \"ThisIsMySecret\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "RegisterStatus registerCallbackResponse = null;\n",
                      "speechToText.RegisterCallback(\n",
                      "    callback: (DetailedResponse<RegisterStatus> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"RegisterCallback result: {0}\", response.Response);\n",
                      "        registerCallbackResponse = response.Result;\n",
                      "    },\n",
                      "    callbackUrl: \"http://{user_callback_path}/job_results\",\n",
                      "    userSecret: \"ThisIsMySecret\"\n",
                      ");\n",
                      "\n",
                      "while (registerCallbackResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/unregister_callback": {
      "post": {
        "tags": [
          "Asynchronous"
        ],
        "operationId": "unregisterCallback",
        "summary": "Unregister a callback",
        "description": "Unregisters a callback URL that was previously white-listed with a **Register a callback** request for use with the asynchronous interface. Once unregistered, the URL can no longer be used with asynchronous recognition requests. \n\n**See also:** [Unregistering a callback URL](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-async#unregister).",
        "parameters": [
          {
            "name": "callback_url",
            "in": "query",
            "description": "The callback URL that is to be unregistered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The callback URL was successfully unregistered."
          },
          "400": {
            "description": "**Bad Request**. The request failed because of a user input error (for example, because it failed to pass a callback URL).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "**Not Found**. The specified callback URL was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "**Service Unavailable**. The service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/unregister_callback?callback_url=http://{user_callback_path}/job_results\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "UnregisterCallbackOptions unregisterCallbackOptions = new UnregisterCallbackOptions.Builder()\n",
                      "  .callbackUrl(\"http://{user_callback_path}/job_results\")\n",
                      "  .build();\n",
                      "\n",
                      "speechToText.unregisterCallback(unregisterCallbackOptions).execute();\n"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const unregisterCallbackParams = {\n",
                      "  callbackUrl: 'http://{user_callback_path}/job_results',\n",
                      "};\n",
                      "\n",
                      "speechToText.unregisterCallback(unregisterCallbackParams)\n",
                      "  .then(result => {\n",
                      "    // Response is empty.\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.unregister_callback('http://{user_callback_path}/job_results')"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.unregister_callback(\n",
                      "  callback_url: \"http://{user_callback_path}/job_results\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  response, responseErr := speechToText.UnregisterCallback(\n",
                      "    &speechtotextv1.UnregisterCallbackOptions{\n",
                      "      CallbackURL: core.StringPtr(\"http://{user_callback_path}/job_results\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "let url = \"http://{user_callback_path}/job_results\"\n",
                      "\n",
                      "speechToText.unregisterCallback(callbackURL: url) {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.UnregisterCallback(\n",
                      "    callbackUrl: \"http://{user_callback_path}/job_results\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.StatusCode);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.UnregisterCallback(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"UnregisterCallback result: {0}\", response.Response);\n",
                      "    },\n",
                      "    callbackUrl: \"http://{user_callback_path}/job_results\"\n",
                      ");\n",
                      "\n",
                      "while (unregisterCallbackResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/recognitions": {
      "post": {
        "tags": [
          "Asynchronous"
        ],
        "operationId": "createJob",
        "summary": "Create a job",
        "description": "Creates a job for a new asynchronous recognition request. The job is owned by the instance of the service whose credentials are used to create it. How you learn the status and results of a job depends on the parameters you include with the job creation request:\n* By callback notification: Include the `callback_url` parameter to specify a URL to which the service is to send callback notifications when the status of the job changes. Optionally, you can also include the `events` and `user_token` parameters to subscribe to specific events and to specify a string that is to be included with each notification for the job.\n* By polling the service: Omit the `callback_url`, `events`, and `user_token` parameters. You must then use the **Check jobs** or **Check a job** methods to check the status of the job, using the latter to retrieve the results when the job is complete. \n\nThe two approaches are not mutually exclusive. You can poll the service for job status or obtain results from the service manually even if you include a callback URL. In both cases, you can include the `results_ttl` parameter to specify how long the results are to remain available after the job is complete. Using the HTTPS **Check a job** method to retrieve results is more secure than receiving them via callback notification over HTTP because it provides confidentiality in addition to authentication and data integrity. \n\nThe method supports the same basic parameters as other HTTP and WebSocket recognition requests. It also supports the following parameters specific to the asynchronous interface:\n* `callback_url`\n* `events`\n* `user_token`\n* `results_ttl` \n\nYou can pass a maximum of 1 GB and a minimum of 100 bytes of audio with a request. The service automatically detects the endianness of the incoming audio and, for audio that includes multiple channels, downmixes the audio to one-channel mono during transcoding. The method returns only final results; to enable interim results, use the WebSocket API. (With the `curl` command, use the `--data-binary` option to upload the file for the request.) \n\n**See also:** [Creating a job](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-async#create). \n\n### Streaming mode\n\n For requests to transcribe live audio as it becomes available, you must set the `Transfer-Encoding` header to `chunked` to use streaming mode. In streaming mode, the service closes the connection (status code 408) if it does not receive at least 15 seconds of audio (including silence) in any 30-second period. The service also closes the connection (status code 400) if it detects no speech for `inactivity_timeout` seconds of streaming audio; use the `inactivity_timeout` parameter to change the default of 30 seconds. \n\n**See also:**\n* [Audio transmission](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#transmission)\n* [Timeouts](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#timeouts) \n\n### Audio formats (content types)\n\n The service accepts audio in the following formats (MIME types).\n* For formats that are labeled **Required**, you must use the `Content-Type` header with the request to specify the format of the audio.\n* For all other formats, you can omit the `Content-Type` header or specify `application/octet-stream` with the header to have the service automatically detect the format of the audio. (With the `curl` command, you can specify either `\"Content-Type:\"` or `\"Content-Type: application/octet-stream\"`.) \n\nWhere indicated, the format that you specify must include the sampling rate and can optionally include the number of channels and the endianness of the audio.\n* `audio/alaw` (**Required.** Specify the sampling rate (`rate`) of the audio.)\n* `audio/basic` (**Required.** Use only with narrowband models.)\n* `audio/flac`\n* `audio/g729` (Use only with narrowband models.)\n* `audio/l16` (**Required.** Specify the sampling rate (`rate`) and optionally the number of channels (`channels`) and endianness (`endianness`) of the audio.)\n* `audio/mp3`\n* `audio/mpeg`\n* `audio/mulaw` (**Required.** Specify the sampling rate (`rate`) of the audio.)\n* `audio/ogg` (The service automatically detects the codec of the input audio.)\n* `audio/ogg;codecs=opus`\n* `audio/ogg;codecs=vorbis`\n* `audio/wav` (Provide audio with a maximum of nine channels.)\n* `audio/webm` (The service automatically detects the codec of the input audio.)\n* `audio/webm;codecs=opus`\n* `audio/webm;codecs=vorbis` \n\nThe sampling rate of the audio must match the sampling rate of the model for the recognition request: for broadband models, at least 16 kHz; for narrowband models, at least 8 kHz. If the sampling rate of the audio is higher than the minimum required rate, the service down-samples the audio to the appropriate rate. If the sampling rate of the audio is lower than the minimum required rate, the request fails.\n\n **See also:** [Audio formats](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-audio-formats#audio-formats).",
        "x-content-type-description": "The format (MIME type) of the audio. For more information about specifying an audio format, see **Audio formats (content types)** in the method description.",
        "parameters": [
          {
            "$ref": "#/components/parameters/TransferEncodingParam"
          },
          {
            "$ref": "#/components/parameters/ModelParam"
          },
          {
            "name": "callback_url",
            "in": "query",
            "description": "A URL to which callback notifications are to be sent. The URL must already be successfully white-listed by using the **Register a callback** method. You can include the same callback URL with any number of job creation requests. Omit the parameter to poll the service for job completion and results. \n\nUse the `user_token` parameter to specify a unique user-specified string with each job to differentiate the callback notifications for the jobs.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "events",
            "in": "query",
            "description": "If the job includes a callback URL, a comma-separated list of notification events to which to subscribe. Valid events are\n* `recognitions.started` generates a callback notification when the service begins to process the job.\n* `recognitions.completed` generates a callback notification when the job is complete. You must use the **Check a job** method to retrieve the results before they time out or are deleted.\n* `recognitions.completed_with_results` generates a callback notification when the job is complete. The notification includes the results of the request.\n* `recognitions.failed` generates a callback notification if the service experiences an error while processing the job. \n\nThe `recognitions.completed` and `recognitions.completed_with_results` events are incompatible. You can specify only of the two events. \n\nIf the job includes a callback URL, omit the parameter to subscribe to the default events: `recognitions.started`, `recognitions.completed`, and `recognitions.failed`. If the job does not include a callback URL, omit the parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "recognitions.started",
                "recognitions.completed",
                "recognitions.completed_with_results",
                "recognitions.failed"
              ]
            }
          },
          {
            "name": "user_token",
            "in": "query",
            "description": "If the job includes a callback URL, a user-specified string that the service is to include with each callback notification for the job; the token allows the user to maintain an internal mapping between jobs and notification events. If the job does not include a callback URL, omit the parameter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "results_ttl",
            "in": "query",
            "description": "The number of minutes for which the results are to be available after the job has finished. If not delivered via a callback, the results must be retrieved within this time. Omit the parameter to use a time to live of one week. The parameter is valid with or without a callback URL.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/CustomLanguageIDRecognizeParam"
          },
          {
            "$ref": "#/components/parameters/CustomAcousticIDRecognizeParam"
          },
          {
            "$ref": "#/components/parameters/BaseModelVersionParam"
          },
          {
            "$ref": "#/components/parameters/CustomizationWeightRecognizeParam"
          },
          {
            "$ref": "#/components/parameters/InactivityTimeoutParam"
          },
          {
            "$ref": "#/components/parameters/KeywordsParam"
          },
          {
            "$ref": "#/components/parameters/KeywordsThresholdParam"
          },
          {
            "$ref": "#/components/parameters/MaxAlternativesParam"
          },
          {
            "$ref": "#/components/parameters/WordAlternativesThresholdParam"
          },
          {
            "$ref": "#/components/parameters/WordConfidenceParam"
          },
          {
            "$ref": "#/components/parameters/TimestampsParam"
          },
          {
            "$ref": "#/components/parameters/ProfanityFilterParam"
          },
          {
            "$ref": "#/components/parameters/SmartFormattingParam"
          },
          {
            "$ref": "#/components/parameters/SpeakerLabelsParam"
          },
          {
            "$ref": "#/components/parameters/CustomizationIDRecognizeParam"
          },
          {
            "$ref": "#/components/parameters/GrammarNameParam"
          },
          {
            "$ref": "#/components/parameters/RedactionParam"
          },
          {
            "$ref": "#/components/parameters/ProcessingMetricsParam"
          },
          {
            "$ref": "#/components/parameters/ProcessingMetricsIntervalParam"
          },
          {
            "$ref": "#/components/parameters/AudioMetricsParam"
          },
          {
            "$ref": "#/components/parameters/SilenceTimeParam"
          },
          {
            "$ref": "#/components/parameters/SplitTranscriptParam"
          },
          {
            "$ref": "#/components/parameters/SpeechDetectorSensitivityParam"
          },
          {
            "$ref": "#/components/parameters/BackgroundAudioSuppressionParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/recognizeAudio"
        },
        "x-codegen-request-body-name": "audio",
        "responses": {
          "201": {
            "description": "**Created**. The job was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecognitionJob"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "4bd734c0-e575-21f3-de03-f932aa0468a0",
                      "status": "waiting",
                      "created": "2016-08-17T19:15:17.926Z",
                      "url": "{url}/v1/recognitions/4bd734c0-e575-21f3-de03-f932aa0468a0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The request failed because of a user input error. For example, the request passed audio that does not match the indicated format or failed to specify a required audio format; specified a custom language or custom acoustic model that is not in the `available` state; or specified both the `recognitions.completed` and `recognitions.completed_with_results` events. Specific messages include\n* `Model {model} not found`\n* `Requested model is not available`\n* `This 8000hz audio input requires a narrow band model. See /v1/models for a list of available models.`\n* `speaker_labels is not a supported feature for model {model}`\n* `keywords_threshold value must be between zero and one (inclusive)`\n* `word_alternatives_threshold value must be between zero and one (inclusive)`\n* `You cannot specify both 'customization_id' and 'language_customization_id' parameter!`\n* `No speech detected for 30s`\n* `Unable to transcode data stream application/octet-stream -> audio/x-float-array`\n* `Stream was {number} bytes but needs to be at least 100 bytes.`\n* `keyword {keyword} length exceeds the maximum length 1024`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "**Service Unavailable**. The service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "--header \"Content-Type: audio/flac\" ",
                      "--data-binary @audio-file.flac ",
                      "\"{url}/v1/recognitions?callback_url=http://{user_callback_path}/job_results&user_token=job25&timestamps=true\""
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file.flac\" download=\"audio-file.flac\">audio-file.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "try {\n",
                      "  CreateJobOptions createJobOptions = new CreateJobOptions.Builder()\n",
                      "    .callbackUrl(\"http://{user_callback_path}/job_results\")\n",
                      "    .userToken(\"job25\")\n",
                      "    .audio(new File(\"audio-file.flac\"))\n",
                      "    .contentType(\"audio/flac\")\n",
                      "    .timestamps(true)\n",
                      "    .build();\n",
                      "\n",
                      "  RecognitionJob recognitionJob =\n",
                      "    speechToText.createJob(createJobOptions).execute().getResult();\n",
                      "  System.out.println(recognitionJob);\n",
                      "} catch (FileNotFoundException e) {\n",
                      "  e.printStackTrace();\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file.flac\" download=\"audio-file.flac\">audio-file.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const fs = require('fs');\n",
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const createJobParams = {\n",
                      "  callbackUrl: 'http://{user_callback_path}/job_results',\n",
                      "  userToken: 'job25',\n",
                      "  audio: fs.createReadStream('./audio-file.flac'),\n",
                      "  contentType: 'audio/flac',\n",
                      "  timestamps: true,\n",
                      "};\n",
                      "\n",
                      "speechToText.createJob(createJobParams)\n",
                      "  .then(recognitionJob => {\n",
                      "    console.log(JSON.stringify(recognitionJob, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file.flac\" download=\"audio-file.flac\">audio-file.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from os.path import join, dirname\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "with open(join(dirname(__file__), './.', 'audio-file.flac'),\n",
                      "               'rb') as audio_file:\n",
                      "    recognition_job = speech_to_text.create_job(\n",
                      "        audio_file,\n",
                      "        content_type='audio/flac',\n",
                      "        callback_url='http://{user_callback_path}/job_results',\n",
                      "        user_token='job25',\n",
                      "        timestamps=True\n",
                      "    ).get_result()\n",
                      "print(json.dumps(recognition_job, indent=2))"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file.flac\" download=\"audio-file.flac\">audio-file.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "File.open(\"audio-file.flac\") do |audio_file|\n",
                      "  recognition_job = speech_to_text.create_job(\n",
                      "    audio: audio_file,\n",
                      "    content_type: \"audio/flac\",\n",
                      "    callback_url: \"http://{user_callback_path}/job_results\",\n",
                      "    user_token: \"job25\",\n",
                      "    timestamps: true\n",
                      "  )\n",
                      "  puts JSON.pretty_generate(recognition_job.result)\n",
                      "end"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file.flac\" download=\"audio-file.flac\">audio-file.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"io\"\n",
                      "  \"os\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  var audioFile io.ReadCloser\n",
                      "  var audioFileErr error\n",
                      "  audioFile, audioFileErr = os.Open(\"audio-file.flac\")\n",
                      "    if audioFileErr != nil {\n",
                      "      panic(audioFileErr)\n",
                      "    }\n",
                      "  result, response, responseErr := speechToText.CreateJob(\n",
                      "    &speechtotextv1.CreateJobOptions{\n",
                      "      Audio:                     audioFile,\n",
                      "      ContentType:               core.StringPtr(\"audio/flac\"),\n",
                      "      Timestamps:                core.BoolPtr(true),\n",
                      "      CallbackURL:               core.StringPtr(\"http://{user_callback_path}/job_results\"),\n",
                      "      UserToken:                 core.StringPtr(\"job25\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file.flac\" download=\"audio-file.flac\">audio-file.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "let audio = Bundle.main.url(forResource: \"audio-file\", withExtension: \"flac\")!\n",
                      "\n",
                      "speechToText.createJob(\n",
                      "  audio: Data(contentsOf: audio),\n",
                      "  callbackURL: \"http://{user_callback_path}/job_results\",\n",
                      "  userToken: \"job25\",\n",
                      "  timestamps: true,\n",
                      "  contentType: \"audio/flac\")\n",
                      "{\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let job = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(job)\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file.flac\" download=\"audio-file.flac\">audio-file.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.CreateJob(\n",
                      "    callbackUrl: \"http://{user_callback_path}/job_results\",\n",
                      "    userToken: \"job25\",\n",
                      "    audio: File.ReadAllBytes(\"audio-file.flac\"),\n",
                      "    contentType: \"audio/flac\",\n",
                      "    timestamps: true\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file.flac\" download=\"audio-file.flac\">audio-file.flac</a>"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "RecognitionJob createJobResponse = null;\n",
                      "byte[] audio = File.ReadAllBytes(testAudioPath);\n",
                      "\n",
                      "speechToText.CreateJob(\n",
                      "    callback: (DetailedResponse<RecognitionJob> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"CreateJob result: {0}\", response.Response);\n",
                      "        createJobResponse = response.Result;\n",
                      "        jobId = createJobResponse.Id;\n",
                      "    },\n",
                      "    callbackUrl: \"http://{user_callback_path}/job_results\",\n",
                      "    userToken: \"job25\",\n",
                      "    audio: File.ReadAllBytes(\"audio-file.flac\"),\n",
                      "    contentType: \"audio/flac\",\n",
                      "    timestamps: true\n",
                      ");\n",
                      "\n",
                      "while (createJobResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/audio-file.flac\" download=\"audio-file.flac\">audio-file.flac</a>"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "tags": [
          "Asynchronous"
        ],
        "operationId": "checkJobs",
        "summary": "Check jobs",
        "description": "Returns the ID and status of the latest 100 outstanding jobs associated with the credentials with which it is called. The method also returns the creation and update times of each job, and, if a job was created with a callback URL and a user token, the user token for the job. To obtain the results for a job whose status is `completed` or not one of the latest 100 outstanding jobs, use the **Check a job** method. A job and its results remain available until you delete them with the **Delete a job** method or until the job's time to live expires, whichever comes first. \n\n**See also:** [Checking the status of the latest jobs](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-async#jobs).",
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecognitionJobs"
                },
                "examples": {
                  "response": {
                    "value": {
                      "recognitions": [
                        {
                          "id": "4bd734c0-e575-21f3-de03-f932aa0468a0",
                          "created": "2016-08-17T19:15:17.926Z",
                          "updated": "2016-08-17T19:15:17.926Z",
                          "status": "waiting",
                          "user_token": "job25"
                        },
                        {
                          "id": "4bb1dca0-f6b1-11e5-80bc-71fb7b058b20",
                          "created": "2016-08-17T19:13:23.622Z",
                          "updated": "2016-08-17T19:13:24.434Z",
                          "status": "processing"
                        },
                        {
                          "id": "398fcd80-330a-22ba-93ce-1a73f454dd98",
                          "created": "2016-08-17T19:11:04.298Z",
                          "updated": "2016-08-17T19:11:16.003Z",
                          "status": "completed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "**Service Unavailable**. The service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/recognitions\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "RecognitionJobs recognitionJobs = speechToText.checkJobs().execute().getResult();\n",
                      "System.out.println(recognitionJobs);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "speechToText.checkJobs()\n",
                      "  .then(recognitionJobs => {\n",
                      "    console.log(JSON.stringify(recognitionJobs, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "recognition_jobs = speech_to_text.check_jobs().get_result()\n",
                      "print(json.dumps(recognition_jobs, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "recognition_jobs = speech_to_text.check_jobs\n",
                      "puts JSON.pretty_generate(recognition_jobs.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.CheckJobs(\n",
                      "  &speechtotextv1.CheckJobsOptions{},\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.checkJobs() {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let jobs = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(jobs)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.CheckJobs();\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "RecognitionJobs checkJobsResponse = null;\n",
                      "speechToText.CheckJobs(\n",
                      "    callback: (DetailedResponse<RecognitionJobs> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"CheckJobs result: {0}\", response.Response);\n",
                      "        checkJobsResponse = response.Result;\n",
                      "    }\n",
                      ");\n",
                      "\n",
                      "while (checkJobsResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/recognitions/{id}": {
      "get": {
        "tags": [
          "Asynchronous"
        ],
        "operationId": "checkJob",
        "summary": "Check a job",
        "description": "Returns information about the specified job. The response always includes the status of the job and its creation and update times. If the status is `completed`, the response includes the results of the recognition request. You must use credentials for the instance of the service that owns a job to list information about it. \n\nYou can use the method to retrieve the results of any job, regardless of whether it was submitted with a callback URL and the `recognitions.completed_with_results` event, and you can retrieve the results multiple times for as long as they remain available. Use the **Check jobs** method to request information about the most recent jobs associated with the calling credentials. \n\n**See also:** [Checking the status and retrieving the results of a job](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-async#job).",
        "parameters": [
          {
            "$ref": "#/components/parameters/JobIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecognitionJob"
                },
                "examples": {
                  "response": {
                    "value": {
                      "created": "2016-08-17T19:11:04.298Z",
                      "id": "4bd734c0-e575-21f3-de03-f932aa0468a0",
                      "updated": "2016-08-17T19:11:16.003Z",
                      "results": [
                        {
                          "result_index": 0,
                          "results": [
                            {
                              "final": true,
                              "alternatives": [
                                {
                                  "transcript": "several tornadoes touch down as a line of severe thunderstorms swept through Colorado on Sunday ",
                                  "timestamps": [
                                    [
                                      "several",
                                      1,
                                      1.52
                                    ],
                                    [
                                      "tornadoes",
                                      1.52,
                                      2.15
                                    ],
                                    [
                                      "touch",
                                      2.15,
                                      2.49
                                    ],
                                    [
                                      "down",
                                      2.49,
                                      2.82
                                    ],
                                    [
                                      "as",
                                      2.82,
                                      2.92
                                    ],
                                    [
                                      "a",
                                      2.92,
                                      3.01
                                    ],
                                    [
                                      "line",
                                      3.01,
                                      3.3
                                    ],
                                    [
                                      "of",
                                      3.3,
                                      3.39
                                    ],
                                    [
                                      "severe",
                                      3.39,
                                      3.77
                                    ],
                                    [
                                      "thunderstorms",
                                      3.77,
                                      4.51
                                    ],
                                    [
                                      "swept",
                                      4.51,
                                      4.79
                                    ],
                                    [
                                      "through",
                                      4.79,
                                      4.95
                                    ],
                                    [
                                      "Colorado",
                                      4.95,
                                      5.59
                                    ],
                                    [
                                      "on",
                                      5.59,
                                      5.73
                                    ],
                                    [
                                      "Sunday",
                                      5.73,
                                      6.35
                                    ]
                                  ],
                                  "confidence": 0.96
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "status": "completed"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**Not Found**. The specified job ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "**Service Unavailable**. The service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/recognitions/{id}\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "CheckJobOptions checkJobOptions = new CheckJobOptions.Builder()\n",
                      "  .id({id})\n",
                      "  .build();\n",
                      "\n",
                      "RecognitionJob recognitionJob =\n",
                      "  speechToText.checkJob(checkJobOptions).execute().getResult();\n",
                      "System.out.println(recognitionJob);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const checkJobParams = {\n",
                      "  id: '{id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.checkJob(checkJobParams)\n",
                      "  .then(recognitionJob => {\n",
                      "    console.log(JSON.stringify(recognitionJob, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "recognition_job = speech_to_text.check_job({id}).get_result()\n",
                      "print(json.dumps(recognition_job, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "recognition_job = speech_to_text.check_job(\n",
                      "  id: \"{id}\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(recognition_job.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.CheckJob(\n",
                      "    &speechtotextv1.CheckJobOptions{\n",
                      "      ID: core.StringPtr(\"{id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.checkJob(id: \"{id}\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let job = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(job)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.CheckJob(\n",
                      "    id: \"{id}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "RecognitionJob checkJobResponse = null;\n",
                      "speechToText.CheckJob(\n",
                      "    callback: (DetailedResponse<RecognitionJob> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"CheckJob result: {0}\", response.Response);\n",
                      "        checkJobResponse = response.Result;\n",
                      "    },\n",
                      "    id: \"{id}\"\n",
                      ");\n",
                      "\n",
                      "while (checkJobResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Asynchronous"
        ],
        "operationId": "deleteJob",
        "summary": "Delete a job",
        "description": "Deletes the specified job. You cannot delete a job that the service is actively processing. Once you delete a job, its results are no longer available. The service automatically deletes a job and its results when the time to live for the results expires. You must use credentials for the instance of the service that owns a job to delete it. \n\n**See also:** [Deleting a job](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-async#delete-async).",
        "parameters": [
          {
            "$ref": "#/components/parameters/JobIDPathParam"
          }
        ],
        "responses": {
          "204": {
            "description": "**No Content**. The job was successfully deleted."
          },
          "400": {
            "description": "**Bad Request**. The service cannot delete a job that it is actively processing:\n* `Unable to delete the processing job`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "**Not Found**. The specified job ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "**Service Unavailable**. The service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/recognitions/{id}\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "DeleteJobOptions deleteJobOptions = new DeleteJobOptions.Builder()\n",
                      "  .id({id})\n",
                      "  .build();\n",
                      "\n",
                      "speechToText.deleteJob(deleteJobOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const deleteJobParams = {\n",
                      "  id: '{id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.deleteJob(deleteJobParams)\n",
                      "  .then(result => {\n",
                      "    // Response is empty.\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.delete_job({id})"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.delete_job(\n",
                      "  id: \"{id}\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  _, responseErr := speechToText.DeleteJob(\n",
                      "    &speechtotextv1.DeleteJobOptions{\n",
                      "      ID: core.StringPtr(\"{id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.deleteJob(id: \"{id}\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.DeleteJob(\n",
                      "    id: \"{id}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.StatusCode);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.DeleteJob(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"DeleteJob result: {0}\", response.Response);\n",
                      "    },\n",
                      "    id: \"{id}\"\n",
                      ");"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations": {
      "post": {
        "tags": [
          "Custom language models"
        ],
        "operationId": "createLanguageModel",
        "summary": "Create a custom language model",
        "description": "Creates a new custom language model for a specified base model. The custom language model can be used only with the base model for which it is created. The model is owned by the instance of the service whose credentials are used to create it. \n\nYou can create a maximum of 1024 custom language models per owning credentials. The service returns an error if you attempt to create more than 1024 models. You do not lose any models, but you cannot create any more until your model count is below the limit. \n\n**See also:** [Create a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-languageCreate#createModel-language).",
        "x-content-type-required": true,
        "x-content-type-description": "The type of the input.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLanguageModel"
              }
            }
          },
          "description": "A `CreateLanguageModel` object that provides basic information about the new custom language model.",
          "required": true
        },
        "x-codegen-request-body-name": "create_language_model",
        "responses": {
          "201": {
            "description": "**Created**. The custom language model was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LanguageModel"
                },
                "examples": {
                  "response": {
                    "value": {
                      "customization_id": "74f4807e-b5ff-4866-824e-6bba1a84fe96"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A required parameter is null or invalid. Specific failure messages include:\n* `Required parameter '{name}' is missing`\n* `Required parameter '{name}' cannot be empty string`\n* `Required parameter '{name}' cannot be null`\n* `The base model '{name}' is not recognized`\n* `Invalid dialect value '{dialect}' specified for language '{language}'`\n* `Customization is not supported for base model '{name}'` \n* `You exceeded the maximum '{model_number}' of allowed custom language models. You have '{model_number}' custom language models. Please remove the models you do not need or contact the IBM speech support team to apply for an exception.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "--header \"Content-Type: application/json\" ",
                      "--data \"{\\\"name\\\": \\\"First example language model\\\", ",
                      "\\\"base_model_name\\\": \\\"en-US_BroadbandModel\\\", ",
                      "\\\"description\\\": \\\"First example custom language model\\\"}\" ",
                      "\"{url}/v1/customizations\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "CreateLanguageModelOptions createLanguageModelOptions =\n",
                      "  new CreateLanguageModelOptions.Builder()\n",
                      "    .name(\"First example language model\")\n",
                      "    .baseModelName(\"en-US_BroadbandModel\")\n",
                      "    .description(\"First custom language model example\")\n",
                      "    .build();\n",
                      "\n",
                      "LanguageModel languageModel =\n",
                      "  speechToText.createLanguageModel(createLanguageModelOptions).execute().getResult();\n",
                      "System.out.println(languageModel);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const createLanguageModelParams = {\n",
                      "  name: 'First example language model',\n",
                      "  baseModelName: 'en-US_BroadbandModel',\n",
                      "  description: 'First custom language model example',\n",
                      "};\n",
                      "\n",
                      "speechToText.createLanguageModel(createLanguageModelParams)\n",
                      "  .then(languageModel => {\n",
                      "    console.log(JSON.stringify(languageModel, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "language_model = speech_to_text.create_language_model(\n",
                      "    'First example language model',\n",
                      "    'en-US_BroadbandModel',\n",
                      "    description='First custom language model example'\n",
                      ").get_result()\n",
                      "print(json.dumps(language_model, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "language_model = speech_to_text.create_language_model(\n",
                      "  name: \"First example language model\",\n",
                      "  base_model_name: \"en-US_BroadbandModel\",\n",
                      "  description: \"First custom language model example\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(language_model.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.CreateLanguageModel(\n",
                      "    &speechtotextv1.CreateLanguageModelOptions{\n",
                      "      Name: core.StringPtr(\"First example language model\"),\n",
                      "      BaseModelName: core.StringPtr(speechtotextv1.CreateLanguageModelOptions_BaseModelName_EnUsBroadbandmodel),\n",
                      "      Description: core.StringPtr(\"First custom language model example\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.createLanguageModel(\n",
                      "  name: \"First example language model\",\n",
                      "  baseModelName: \"en-US_BroadbandModel\",\n",
                      "  description: \"First custom language model example\")\n",
                      "{\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let model = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(model)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.CreateLanguageModel(\n",
                      "    name: \"First example language model\",\n",
                      "    baseModelName: \"en-US_BroadbandModel\",\n",
                      "    description: \"First custom language model example\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "LanguageModel createLanguageModelResponse = null;\n",
                      "speechToText.CreateLanguageModel(\n",
                      "    callback: (DetailedResponse<LanguageModel> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"CreateLanguageModel result: {0}\", response.Response);\n",
                      "        createLanguageModelResponse = response.Result;\n",
                      "        customizationId = createLanguageModelResponse.CustomizationId;\n",
                      "    },\n",
                      "    name: \"First example language model\",\n",
                      "    baseModelName: \"en-US_BroadbandModel\",\n",
                      "    description: \"First custom language model example\"\n",
                      ");\n",
                      "\n",
                      "while (createLanguageModelResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "tags": [
          "Custom language models"
        ],
        "operationId": "listLanguageModels",
        "summary": "List custom language models",
        "description": "Lists information about all custom language models that are owned by an instance of the service. Use the `language` parameter to see all custom language models for the specified language. Omit the parameter to see all custom language models for all languages. You must use credentials for the instance of the service that owns a model to list information about it. \n\n**See also:** [Listing custom language models](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageLanguageModels#listModels-language).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomizationLanguageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LanguageModels"
                },
                "examples": {
                  "response": {
                    "value": {
                      "customizations": [
                        {
                          "owner": "297cfd08-330a-22ba-93ce-1a73f454dd98",
                          "base_model_name": "en-US_BroadbandModel",
                          "customization_id": "74f4807e-b5ff-4866-824e-6bba1a84fe96",
                          "dialect": "en-US",
                          "versions": [
                            "en-US_BroadbandModel.v07-06082016.06202016",
                            "en-US_BroadbandModel.v2017-11-15"
                          ],
                          "created": "2016-06-01T18:42:25.324Z",
                          "updated": "2016-06-01T18:42:25.324Z",
                          "name": "First example language model",
                          "description": "First example custom language model",
                          "progress": 0,
                          "language": "en-US",
                          "status": "pending"
                        },
                        {
                          "owner": "297cfd08-330a-22ba-93ce-1a73f454dd98",
                          "base_model_name": "en-US_BroadbandModel",
                          "customization_id": "8391f918-3b76-e109-763c-b7732fae4829",
                          "dialect": "en-US",
                          "versions": [
                            "en-US_BroadbandModel.v2017-11-15"
                          ],
                          "created": "2016-06-01T18:51:37.291Z",
                          "updated": "2016-06-01T19:37:12.983Z",
                          "name": "Second example language model",
                          "description": "Second example custom language model",
                          "progress": 100,
                          "language": "en-US",
                          "status": "available"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A required parameter is null or invalid. Specific failure messages include:\n* `Language '{language}' is not supported for customization`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "LanguageModels languageModels =\n",
                      "  speechToText.listLanguageModels().execute().getResult();\n",
                      "System.out.println(languageModels);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "speechToText.listLanguageModels()\n",
                      "  .then(languageModels => {\n",
                      "    console.log(JSON.stringify(languageModels, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "language_models = speech_to_text.list_language_models().get_result()\n",
                      "print(json.dumps(language_models, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "language_models = speech_to_text.list_language_models\n",
                      "puts JSON.pretty_generate(language_models.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.ListLanguageModels(\n",
                      "    &speechtotextv1.ListLanguageModelsOptions{},\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.listLanguageModels() {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let models = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(models)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.ListLanguageModels();\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "LanguageModels listLanguageModelsResponse = null;\n",
                      "speechToText.ListLanguageModels(\n",
                      "    callback: (DetailedResponse<LanguageModels> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"ListLanguageModels result: {0}\", response.Response);\n",
                      "        listLanguageModelsResponse = response.Result;\n",
                      "    },\n",
                      ");\n",
                      "\n",
                      "while (listLanguageModelsResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations/{customization_id}": {
      "get": {
        "tags": [
          "Custom language models"
        ],
        "operationId": "getLanguageModel",
        "summary": "Get a custom language model",
        "description": "Gets information about a specified custom language model. You must use credentials for the instance of the service that owns a model to list information about it. \n\n**See also:** [Listing custom language models](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageLanguageModels#listModels-language).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LanguageModel"
                },
                "examples": {
                  "response": {
                    "value": {
                      "owner": "297cfd08-330a-22ba-93ce-1a73f454dd98",
                      "base_model_name": "en-US_BroadbandModel",
                      "customization_id": "74f4807e-b5ff-4866-824e-6bba1a84fe96",
                      "dialect": "en-US",
                      "versions": [
                        "en-US_BroadbandModel.v07-06082016.06202016",
                        "en-US_BroadbandModel.v2017-11-15"
                      ],
                      "name": "First example language model",
                      "description": "First example custom language model",
                      "created": "2016-06-01T18:42:25.324Z",
                      "updated": "2016-06-01T18:42:25.324Z",
                      "progress": 0,
                      "language": "en-US",
                      "status": "pending"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid:\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "GetLanguageModelOptions getLanguageModelOptions =\n",
                      "  new GetLanguageModelOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .build();\n",
                      "\n",
                      "LanguageModel languageModel =\n",
                      "  speechToText.getLanguageModel(getLanguageModelOptions).execute().getResult();\n",
                      "System.out.println(languageModel);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const getLanguageModelParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.getLanguageModel(getLanguageModelParams)\n",
                      "  .then(languageModel => {\n",
                      "    console.log(JSON.stringify(languageModel, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "language_model = speech_to_text.get_language_model('{customization_id}').get_result()\n",
                      "print(json.dumps(language_model, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "language_model = speech_to_text.get_language_model(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(language_model.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.GetLanguageModel(\n",
                      "    &speechtotextv1.GetLanguageModelOptions{\n",
                      "      CustomizationID: core.StringPtr({customization_id}),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.getLanguageModel(customizationID: \"{customizationId}\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let model = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(model)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.GetLanguageModel(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "LanguageModel getLanguageModelResponse = null;\n",
                      "speechToText.GetLanguageModel(\n",
                      "    callback: (DetailedResponse<LanguageModel> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"CheckLanguageModelStatus: {0}\", response.Result);\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");",
                      "\n",
                      "while (getLanguageModelResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Custom language models"
        ],
        "operationId": "deleteLanguageModel",
        "summary": "Delete a custom language model",
        "description": "Deletes an existing custom language model. The custom model cannot be deleted if another request, such as adding a corpus or grammar to the model, is currently being processed. You must use credentials for the instance of the service that owns a model to delete it. \n\n**See also:** [Deleting a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageLanguageModels#deleteModel-language).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The custom language model was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid:\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials, including the case where the custom model does not exist:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "DeleteLanguageModelOptions deleteLanguageModelOptions =\n",
                      "  new DeleteLanguageModelOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .build();\n",
                      "\n",
                      "speechToText.deleteLanguageModel(deleteLanguageModelOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const deleteLanguageModelParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.deleteLanguageModel(deleteLanguageModelParams)\n",
                      "  .then(result => {\n",
                      "    console.log(JSON.stringify(result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.delete_language_model('{customization_id}')"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.delete_language_model(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  _, responseErr := speechToText.DeleteLanguageModel(\n",
                      "    &speechtotextv1.DeleteLanguageModelOptions{\n",
                      "      CustomizationID: core.StringPtr({customization_id}),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.deleteLanguageModel(customizationID: \"{customizationId}\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.DeleteLanguageModel(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.StatusCode);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.DeleteLanguageModel(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"DeleteLanguageModel result: {0}\", response.Response);\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations/{customization_id}/train": {
      "post": {
        "tags": [
          "Custom language models"
        ],
        "operationId": "trainLanguageModel",
        "summary": "Train a custom language model",
        "description": "Initiates the training of a custom language model with new resources such as corpora, grammars, and custom words. After adding, modifying, or deleting resources for a custom language model, use this method to begin the actual training of the model on the latest data. You can specify whether the custom language model is to be trained with all words from its words resource or only with words that were added or modified by the user directly. You must use credentials for the instance of the service that owns a model to train it. \n\nThe training method is asynchronous. It can take on the order of minutes to complete depending on the amount of data on which the service is being trained and the current load on the service. The method returns an HTTP 200 response code to indicate that the training process has begun. \n\nYou can monitor the status of the training by using the **Get a custom language model** method to poll the model's status. Use a loop to check the status every 10 seconds. The method returns a `LanguageModel` object that includes `status` and `progress` fields. A status of `available` means that the custom model is trained and ready to use. The service cannot accept subsequent training requests or requests to add new resources until the existing request completes. \n\n**See also:** [Train the custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-languageCreate#trainModel-language). \n\n### Training failures\n\n Training can fail to start for the following reasons:\n* The service is currently handling another request for the custom model, such as another training request or a request to add a corpus or grammar to the model.\n* No training data have been added to the custom model.\n* The custom model contains one or more invalid corpora, grammars, or words (for example, a custom word has an invalid sounds-like pronunciation). You can correct the invalid resources or set the `strict` parameter to `false` to exclude the invalid resources from the training. The model must contain at least one valid resource for training to succeed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "name": "word_type_to_add",
            "in": "query",
            "description": "The type of words from the custom language model's words resource on which to train the model:\n* `all` (the default) trains the model on all new words, regardless of whether they were extracted from corpora or grammars or were added or modified by the user.\n* `user` trains the model only on new words that were added or modified by the user directly. The model is not trained on new words extracted from corpora or grammars.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "user"
              ],
              "default": "all"
            }
          },
          {
            "$ref": "#/components/parameters/CustomizationWeightParam"
          },
          {
            "name": "strict",
            "in": "query",
            "description": "If `false`, allows training of the custom language model to proceed as long as the model contains at least one valid resource. The method returns an array of `TrainingWarning` objects that lists any invalid resources. By default (`true`), training of a custom language model fails (status code 400) if the model contains one or more invalid resources (corpus files, grammar files, or custom words).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-sdk-exclude": true
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. Training of the custom language model started successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainingResponse"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A required parameter is null or invalid, the custom model is not ready to be trained, or the total number of words or OOV words exceeds the maximum threshold. Specific failure messages include:\n* `No input data available for running training`\n* `Fix errors in the following words: [{words}] before training`\n* `Total number of words {number} exceeds maximum allowed`\n* `Total number of OOV words {number} exceeds {maximum}`\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/train\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "TrainLanguageModelOptions trainLanguageModelOptions =\n",
                      "  new TrainLanguageModelOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .build();\n",
                      "\n",
                      "speechToText.trainLanguageModel(trainLanguageModelOptions).execute().getResult();\n",
                      "// Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const trainLanguageModelParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.trainLanguageModel(trainLanguageModelParams)\n",
                      "  .then(result => {\n",
                      "    // Poll for language model status.\n ",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.train_language_model('{customization_id}')\n",
                      "# Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.train_language_model(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")\n",
                      "# Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  response, responseErr := speechToText.TrainLanguageModel(\n",
                      "    &speechtotextv1.TrainLanguageModelOptions{\n",
                      "      CustomizationID: core.StringPtr({customization_id}),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  // Poll for language model status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.trainLanguageModel(customizationID: \"{customizationId}\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  // Poll for language model status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.TrainLanguageModel(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "// Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "object trainLanguageModelResponse = null;\n",
                      "speechToText.TrainLanguageModel(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"TrainLanguageModel result: {0}\", response.Response);\n",
                      "        trainLanguageModelResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");\n",
                      "// Poll for language model status.\n",
                      "\n",
                      "while (trainLanguageModelResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations/{customization_id}/reset": {
      "post": {
        "tags": [
          "Custom language models"
        ],
        "operationId": "resetLanguageModel",
        "summary": "Reset a custom language model",
        "description": "Resets a custom language model by removing all corpora, grammars, and words from the model. Resetting a custom language model initializes the model to its state when it was first created. Metadata such as the name and language of the model are preserved, but the model's words resource is removed and must be re-created. You must use credentials for the instance of the service that owns a model to reset it. \n\n**See also:** [Resetting a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageLanguageModels#resetModel-language).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The custom language model was successfully reset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid:\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/reset\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "ResetLanguageModelOptions resetLanguageModelOptions =\n",
                      "  new ResetLanguageModelOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .build();\n",
                      "\n",
                      "speechToText.resetLanguageModel(resetLanguageModelOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const resetLanguageModelParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.resetLanguageModel(resetLanguageModelParams)\n",
                      "  .then(result => {\n",
                      "    console.log(JSON.stringify(result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.reset_language_model('{customization_id}')"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.reset_language_model(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  response, responseErr := speechToText.ResetLanguageModel(\n",
                      "    &speechtotextv1.ResetLanguageModelOptions{\n",
                      "      CustomizationID: core.StringPtr({customization_id}),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.resetLanguageModel(customizationID: \"{customizationId}\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.ResetLanguageModel(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "bool isComplete = false;\n",
                      "speechToText.ResetLanguageModel(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"ResetLanguageModel result: {0}\", response.Response);\n",
                      "        isComplete = true;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");\n",
                      "\n",
                      "while (!isComplete)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations/{customization_id}/upgrade_model": {
      "post": {
        "tags": [
          "Custom language models"
        ],
        "operationId": "upgradeLanguageModel",
        "summary": "Upgrade a custom language model",
        "description": "Initiates the upgrade of a custom language model to the latest version of its base language model. The upgrade method is asynchronous. It can take on the order of minutes to complete depending on the amount of data in the custom model and the current load on the service. A custom model must be in the `ready` or `available` state to be upgraded. You must use credentials for the instance of the service that owns a model to upgrade it. \n\nThe method returns an HTTP 200 response code to indicate that the upgrade process has begun successfully. You can monitor the status of the upgrade by using the **Get a custom language model** method to poll the model's status. The method returns a `LanguageModel` object that includes `status` and `progress` fields. Use a loop to check the status every 10 seconds. While it is being upgraded, the custom model has the status `upgrading`. When the upgrade is complete, the model resumes the status that it had prior to upgrade. The service cannot accept subsequent requests for the model until the upgrade completes. \n\n**See also:** [Upgrading a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-customUpgrade#upgradeLanguage).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. Upgrade of the custom language model started successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid or the specified custom model cannot be upgraded:\n* `Malformed GUID: '{customization_id}'`\n* `Custom model is up-to-date`\n* `No input data available to upgrade the model`\n* `Cannot upgrade failed custom model`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/upgrade_model\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "UpgradeLanguageModelOptions upgradeLanguageModelOptions =\n",
                      "  new UpgradeLanguageModelOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .build();\n",
                      "\n",
                      "speechToText.upgradeLanguageModel(upgradeLanguageModelOptions).execute();\n",
                      "// Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const upgradeLanguageModelParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.upgradeLanguageModel(upgradeLanguageModelParams)\n",
                      "  .then(result => {\n",
                      "    // Poll for language model status.\n ",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.upgrade_language_model('{customization_id}')\n",
                      "# Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.upgrade_language_model(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")\n",
                      "# Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  response, responseErr := speechToText.UpgradeLanguageModel(\n",
                      "    &speechtotextv1.UpgradeLanguageModelOptions{\n",
                      "      CustomizationID: core.StringPtr({customization_id}),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  // Poll for language model status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.upgradeLanguageModel(customizationID: \"{customizationId}\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  // Poll for language model status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.UpgradeLanguageModel(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "// Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "object upgradeLanguageModelResponse = null;\n",
                      "speechToText.UpgradeLanguageModel(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"UpgradeLanguageModel result: {0}\", response.Response);\n",
                      "        upgradeLanguageModelResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");\n",
                      "// Poll for language model status.\n",
                      "\n",
                      "while (upgradeLanguageModelResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations/{customization_id}/corpora": {
      "get": {
        "tags": [
          "Custom corpora"
        ],
        "operationId": "listCorpora",
        "summary": "List corpora",
        "description": "Lists information about all corpora from a custom language model. The information includes the total number of words and out-of-vocabulary (OOV) words, name, and status of each corpus. You must use credentials for the instance of the service that owns a model to list its corpora. \n\n**See also:** [Listing corpora for a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageCorpora#listCorpora).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Corpora"
                },
                "examples": {
                  "response": {
                    "value": {
                      "corpora": [
                        {
                          "name": "corpus1",
                          "out_of_vocabulary_words": 191,
                          "total_words": 5037,
                          "status": "analyzed"
                        },
                        {
                          "name": "corpus2",
                          "out_of_vocabulary_words": 0,
                          "total_words": 0,
                          "status": "being_processed"
                        },
                        {
                          "name": "corpus3",
                          "out_of_vocabulary_words": 0,
                          "total_words": 0,
                          "status": "undetermined",
                          "error": "Analysis of corpus 'corpus3.txt' failed. Please try adding the corpus again by setting the 'allow_overwrite' flag to 'true'."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid:\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/corpora\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "ListCorporaOptions listCorporaOptions = new ListCorporaOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .build();\n",
                      "\n",
                      "Corpora corpora =\n",
                      "  speechToText.listCorpora(listCorporaOptions).execute().getResult();\n",
                      "System.out.println(corpora);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const listCorporaParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.listCorpora(listCorporaParams)\n",
                      "  .then(corpora => {\n",
                      "    console.log(JSON.stringify(corpora, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "corpora = speech_to_text.list_corpora('{customization_id}').get_result()\n",
                      "print(json.dumps(corpora, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "corpora = speech_to_text.list_corpora(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(corpora.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.ListCorpora(\n",
                      "    &speechtotextv1.ListCorporaOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.listCorpora(customizationID: \"{customizationId}\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let corpora = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(corpora)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.ListCorpora(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "Corpora listCorporaResponse = null;\n",
                      "speechToText.ListCorpora(\n",
                      "    callback: (DetailedResponse<Corpora> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1IntegrationTests\", \"ListCorpora result: {0}\", response.Response);\n",
                      "        listCorporaResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");\n",
                      "\n",
                      "while (listCorporaResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations/{customization_id}/corpora/{corpus_name}": {
      "post": {
        "tags": [
          "Custom corpora"
        ],
        "operationId": "addCorpus",
        "summary": "Add a corpus",
        "description": "Adds a single corpus text file of new training data to a custom language model. Use multiple requests to submit multiple corpus text files. You must use credentials for the instance of the service that owns a model to add a corpus to it. Adding a corpus does not affect the custom language model until you train the model for the new data by using the **Train a custom language model** method. \n\nSubmit a plain text file that contains sample sentences from the domain of interest to enable the service to extract words in context. The more sentences you add that represent the context in which speakers use words from the domain, the better the service's recognition accuracy. \n\nThe call returns an HTTP 201 response code if the corpus is valid. The service then asynchronously processes the contents of the corpus and automatically extracts new words that it finds. This operation can take on the order of minutes to complete depending on the total number of words and the number of new words in the corpus, as well as the current load on the service. You cannot submit requests to add additional resources to the custom model or to train the model until the service's analysis of the corpus for the current request completes. Use the **List a corpus** method to check the status of the analysis. \n\nThe service auto-populates the model's words resource with words from the corpus that are not found in its base vocabulary. These words are referred to as out-of-vocabulary (OOV) words. After adding a corpus, you must validate the words resource to ensure that each OOV word's definition is complete and valid. You can use the **List custom words** method to examine the words resource. You can use other words method to eliminate typos and modify how words are pronounced as needed. \n\nTo add a corpus file that has the same name as an existing corpus, set the `allow_overwrite` parameter to `true`; otherwise, the request fails. Overwriting an existing corpus causes the service to process the corpus text file and extract OOV words anew. Before doing so, it removes any OOV words associated with the existing corpus from the model's words resource unless they were also added by another corpus or grammar, or they have been modified in some way with the **Add custom words** or **Add a custom word** method. \n\nThe service limits the overall amount of data that you can add to a custom model to a maximum of 10 million total words from all sources combined. Also, you can add no more than 90 thousand custom (OOV) words to a model. This includes words that the service extracts from corpora and grammars, and words that you add directly. \n\n**See also:**\n* [Add a corpus to the custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-languageCreate#addCorpus)\n* [Working with corpora](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-corporaWords#workingCorpora)\n* [Validating a words resource](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-corporaWords#validateModel)",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "$ref": "#/components/parameters/AddCorpusNamePathParam"
          },
          {
            "$ref": "#/components/parameters/AllowOverwriteCorpusParam"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "corpus_file": {
                    "description": "A plain text file that contains the training data for the corpus. Encode the file in UTF-8 if it contains non-ASCII characters; the service assumes UTF-8 encoding if it encounters non-ASCII characters. \n\nMake sure that you know the character encoding of the file. You must use that encoding when working with the words in the custom language model. For more information, see [Character encoding](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-corporaWords#charEncoding). \n\nWith the `curl` command, use the `--data-binary` option to upload the file for the request.",
                    "type": "string",
                    "format": "binary",
                    "x-file-content-types": [
                      "text/plain"
                    ]
                  }
                },
                "required": [
                  "corpus_file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**Created**. Addition of the corpus data was successfully started. The service is analyzing the data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A required parameter is null or invalid, the specified corpus name already exists, or the custom model needs to be upgraded, among other possibilities. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Corpus file not specified or empty`\n* `Corpus '{corpus_name}' already exists - change its name, remove existing file before adding new one, or overwrite existing file by setting 'allow_overwrite' to 'true'`\n* `Grammar exists with corpus name '{corpus_name}'. Please use different name.`\n* `TOTAL_NUMBER_OF_OOV_WORDS_EXCEEDS_MAXIMUM_ALLOWED_FORMAT: \"Total number of OOV words {total_number} exceeds {maximum_allowed}\"`\n* `Analysis of corpus '{corpus_name}' failed due to {error_message}. Please fix the error then add the corpus again by setting the 'allow_overwrite' flag to 'true'.`, where `{error_message}` is a message of the form `{\"code\": 404, \"error\": \"Model en-US_BroadbandModel (version: en-US_BroadbandModel.{version}) not found\", \"code_description\": \"Not Found\"}`. Upgrade the custom language model to the latest version of its base language model, and then add the corpus to the custom model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "405": {
            "description": "**Method Not Allowed**. The corpus name includes characters that need to be URL-encoded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "415": {
            "description": "**Unsupported Media Type**. The request specified an unacceptable media type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request. You can also receive status code 500 `Forwarding Error` if the service is currently busy handling a previous request for the custom model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "--data-binary @corpus1.txt ",
                      "\"{url}/v1/customizations/{customization_id}/corpora/corpus1\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "try {\n",
                      "  AddCorpusOptions addCorpusOptions = new AddCorpusOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .corpusFile(new File(\"corpus1.txt\"))\n",
                      "    .corpusName(\"corpus1\")\n",
                      "    .build();\n",
                      "\n",
                      "  speechToText.addCorpus(addCorpusOptions).execute();\n",
                      "  // Poll for corpus status.\n",
                      "} catch (FileNotFoundException e) {\n",
                      "  e.printStackTrace();\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const fs = require('fs');\n",
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const addCorpusParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  corpusFile: fs.createReadStream('./corpus1.txt'),\n",
                      "  corpusName: 'corpus1',\n",
                      "};\n",
                      "\n",
                      "speechToText.addCorpus(addCorpusParams)\n",
                      "  .then(result => {\n",
                      "    // Poll for corpus status.\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from os.path import join, dirname\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "with open(join(dirname(__file__), './.', 'corpus1.txt'),\n",
                      "               'rb') as corpus_file:\n",
                      "    speech_to_text.add_corpus(\n",
                      "        '{customization_id}',\n",
                      "        'corpus1',\n",
                      "        corpus_file\n",
                      "    )\n",
                      "# Poll for corpus status."
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "File.open(\"corpus1.txt\") do |corpus_file|\n",
                      "  speech_to_text.add_corpus(\n",
                      "    customization_id: \"{customization_id}\",\n",
                      "    corpus_name: \"corpus1\",\n",
                      "    corpus_file: corpus_file\n",
                      "  )\n",
                      "end\n",
                      "# Poll for corpus status."
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  corpusFile, corpusFileErr := os.Open(\"corpus_file\")\n",
                      "  if corpusFileErr != nil {\n",
                      "    panic(corpusFileErr)\n",
                      "  }\n",
                      "\n",
                      "  response, responseErr := speechToText.AddCorpus(\n",
                      "    &speechtotextv1.AddCorpusOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      CorpusName:      core.StringPtr(\"corpus1\"),\n",
                      "      CorpusFile:      corpusFile,\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  // Poll for corpus status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "let url = Bundle.main.url(forResource: \"corpus1\", withExtension: \"txt\")\n",
                      "let corpus1 = try! Data(contentsOf: url!)\n",
                      "speechToText.addCorpus(customizationID: \"{customizationId}\", corpusName: \"corpus1\", corpusFile: corpus1) {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  // Poll for corpus status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "DetailedResponse<object> result = null;\n",
                      "using (FileStream fs = File.OpenRead(\"corpus1.txt\"))\n",
                      "{\n",
                      "    using (MemoryStream ms = new MemoryStream())\n",
                      "    {\n",
                      "        fs.CopyTo(ms);\n",
                      "        result = speechToText.AddCorpus(\n",
                      "            customizationId: \"{customizationId}\",\n",
                      "            corpusFile: ms,\n",
                      "            corpusName: \"corpus1\"\n",
                      "            );\n",
                      "    }\n",
                      "}\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "// Poll for corpus status."
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "bool isComplete = false;\n",
                      "using (FileStream fs = File.OpenRead(\"corpus1.txt\"))\n",
                      "{\n",
                      "    using (MemoryStream ms = new MemoryStream())\n",
                      "    {\n",
                      "        fs.CopyTo(ms);\n",
                      "        speechToText.AddCorpus(\n",
                      "            callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "            {\n",
                      "                Log.Debug(\"SpeechToTextServiceV1\", \"AddCorpus result: {0}\", response.Response);\n",
                      "                isComplete = true;\n",
                      "            },\n",
                      "            customizationId: \"{customizationId}\",\n",
                      "            corpusFile: ms,\n",
                      "            corpusName: \"corpus1\"\n",
                      "        );\n",
                      "        // Poll for corpus status.\n",
                      "\n",
                      "        while (!isComplete)\n",
                      "        {\n",
                      "            yield return null;\n",
                      "        }\n",
                      "    }\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "tags": [
          "Custom corpora"
        ],
        "operationId": "getCorpus",
        "summary": "Get a corpus",
        "description": "Gets information about a corpus from a custom language model. The information includes the total number of words and out-of-vocabulary (OOV) words, name, and status of the corpus. You must use credentials for the instance of the service that owns a model to list its corpora. \n\n**See also:** [Listing corpora for a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageCorpora#listCorpora).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "$ref": "#/components/parameters/CorpusNamePathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Corpus"
                },
                "examples": {
                  "response": {
                    "value": {
                      "name": "corpus1",
                      "out_of_vocabulary_words": 191,
                      "total_words": 5037,
                      "status": "analyzed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID or corpus name is invalid, including the case where the corpus does not exist for the custom model. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Invalid value for corpus name '{corpus_name}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/corpora/corpus1\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "GetCorpusOptions getCorpusOptions = new GetCorpusOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .corpusName(\"corpus1\")\n",
                      "  .build();\n",
                      "\n",
                      "Corpus corpus =\n",
                      "  speechToText.getCorpus(getCorpusOptions).execute().getResult();\n",
                      "System.out.println(corpus);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const getCorpusParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  corpusName: 'corpus1',\n",
                      "};\n",
                      "\n",
                      "speechToText.getCorpus(getCorpusParams)\n",
                      "  .then(corpus => {\n",
                      "    console.log(JSON.stringify(corpus, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "corpus = speech_to_text.get_corpus(\n",
                      "    '{customization_id}',\n",
                      "    'corpus1'\n",
                      ").get_result()\n",
                      "print(json.dumps(corpus, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "corpus = speech_to_text.get_corpus(\n",
                      "  customization_id: \"{customization_id}\",\n",
                      "  corpus_name: \"corpus1\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(corpus.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.GetCorpus(\n",
                      "    &speechtotextv1.GetCorpusOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      CorpusName:      core.StringPtr(\"corpus1\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.getCorpus(customizationID: \"{customizationId}\", corpusName: \"corpus1\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let corpus = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(corpus)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.GetCorpus(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    corpusName: \"corpus1\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "Corpus getCorpusResponse = null;\n",
                      "speechToText.GetCorpus(\n",
                      "    callback: (DetailedResponse<Corpus> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"GetCorpus result: {0}\", response.Response);\n",
                      "        getCorpusResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    corpusName: \"corpus1\"\n",
                      ");\n",
                      "\n",
                      "while (getCorpusResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Custom corpora"
        ],
        "operationId": "deleteCorpus",
        "summary": "Delete a corpus",
        "description": "Deletes an existing corpus from a custom language model. The service removes any out-of-vocabulary (OOV) words that are associated with the corpus from the custom model's words resource unless they were also added by another corpus or grammar, or they were modified in some way with the **Add custom words** or **Add a custom word** method. Removing a corpus does not affect the custom model until you train the model with the **Train a custom language model** method. You must use credentials for the instance of the service that owns a model to delete its corpora. \n\n**See also:** [Deleting a corpus from a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageCorpora#deleteCorpus).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "$ref": "#/components/parameters/CorpusNamePathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The corpus was successfully deleted from the custom language model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID or corpus name is invalid, including the case where the corpus does not exist for the custom model. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Invalid value for corpus name '{corpus_name}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "405": {
            "description": "**Method Not Allowed**. No corpus name was specified with the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/corpora/corpus1\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "DeleteCorpusOptions deleteCorpusOptions = new DeleteCorpusOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .corpusName(\"corpus1\")\n",
                      "  .build();\n",
                      "\n",
                      "speechToText.deleteCorpus(deleteCorpusOptions).execute();\n"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const deleteCorpusParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  corpusName: 'corpus1',\n",
                      "};\n",
                      "\n",
                      "speechToText.deleteCorpus(deleteCorpusParams)\n",
                      "  .then(result => {\n",
                      "    console.log(JSON.stringify(result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.delete_corpus(\n",
                      "    '{customization_id}',\n",
                      "    'corpus1'\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.delete_corpus(\n",
                      "  customization_id: \"{customization_id}\",\n",
                      "  corpus_name: \"corpus1\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  _, responseErr := speechToText.DeleteCorpus(\n",
                      "    &speechtotextv1.DeleteCorpusOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      CorpusName:      core.StringPtr(\"corpus1\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.deleteCorpus(customizationID: \"{customizationId}\", corpusName: \"corpus1\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.DeleteCorpus(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    corpusName: \"corpus1\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.StatusCode);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.DeleteCorpus(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1, \"DeleteCorpus result: {0}\", response.Response);\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    corpusName: \"corpus1\"\n",
                      ");"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations/{customization_id}/words": {
      "get": {
        "tags": [
          "Custom words"
        ],
        "operationId": "listWords",
        "summary": "List custom words",
        "description": "Lists information about custom words from a custom language model. You can list all words from the custom model's words resource, only custom words that were added or modified by the user, or only out-of-vocabulary (OOV) words that were extracted from corpora or are recognized by grammars. You can also indicate the order in which the service is to return words; by default, the service lists words in ascending alphabetical order. You must use credentials for the instance of the service that owns a model to list information about its words. \n\n**See also:** [Listing words from a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageWords#listWords).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "name": "word_type",
            "in": "query",
            "description": "The type of words to be listed from the custom language model's words resource:\n* `all` (the default) shows all words.\n* `user` shows only custom words that were added or modified by the user directly.\n* `corpora` shows only OOV that were extracted from corpora.\n* `grammars` shows only OOV words that are recognized by grammars.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "user",
                "corpora",
                "grammars"
              ],
              "default": "all"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Indicates the order in which the words are to be listed, `alphabetical` or by `count`. You can prepend an optional `+` or `-` to an argument to indicate whether the results are to be sorted in ascending or descending order. By default, words are sorted in ascending alphabetical order. For alphabetical ordering, the lexicographical precedence is numeric values, uppercase letters, and lowercase letters. For count ordering, values with the same count are ordered alphabetically. With the `curl` command, URL-encode the `+` symbol as `%2B`.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "count"
              ],
              "default": "alphabetical"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Words"
                },
                "examples": {
                  "response": {
                    "value": {
                      "words": [
                        {
                          "word": "75.00",
                          "sounds_like": [
                            "75 dollars"
                          ],
                          "display_as": "75.00",
                          "count": 1,
                          "source": [
                            "user"
                          ],
                          "error": [
                            {
                              "75 dollars": "Numbers are not allowed in sounds_like. You can try for example 'seventy five dollars'."
                            }
                          ]
                        },
                        {
                          "word": "HHonors",
                          "sounds_like": [
                            "hilton honors",
                            "H. honors"
                          ],
                          "display_as": "HHonors",
                          "count": 1,
                          "source": [
                            "corpus1",
                            "user"
                          ]
                        },
                        {
                          "word": "IEEE",
                          "sounds_like": [
                            "I. triple E."
                          ],
                          "display_as": "IEEE",
                          "count": 3,
                          "source": [
                            "corpus1",
                            "corpus2",
                            "user"
                          ]
                        },
                        {
                          "word": "NCAA",
                          "sounds_like": [
                            "N. C. A. A.",
                            "N. C. double A."
                          ],
                          "display_as": "NCAA",
                          "count": 3,
                          "source": [
                            "corpus3",
                            "user"
                          ]
                        },
                        {
                          "word": "tomato",
                          "sounds_like": [
                            "tomatoh",
                            "tomayto"
                          ],
                          "display_as": "tomato",
                          "count": 1,
                          "source": [
                            "user"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid:\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/words?sort=%2Balphabetical\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "ListWordsOptions listWordsOptions = new ListWordsOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .sort(\"+alphabetical\")\n",
                      "  .build();\n",
                      "\n",
                      "Words words = speechToText.listWords(listWordsOptions).execute().getResult();\n",
                      "System.out.println(words);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const listWordsParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.listWords(listWordsParams)\n",
                      "  .then(words => {\n",
                      "    console.log(JSON.stringify(words, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "words = speech_to_text.list_words('{customization_id}').get_result()\n",
                      "print(json.dumps(words, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "words = speech_to_text.list_words(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(words.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.ListWords(\n",
                      "    &speechtotextv1.ListWordsOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.listWords(customizationID: \"{customizationId}\", sort: \"+alphabetical\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let words = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(words)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.ListWords(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    sort: \"+alphabetical\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "Words listWordsResponse = null;\n",
                      "speechToText.ListWords(\n",
                      "    callback: (DetailedResponse<Words> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"ListWords result: {0}\", response.Response);\n",
                      "        listWordsResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    sort: \"+alphabetical\"\n",
                      ");\n",
                      "\n",
                      "while (listWordsResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "tags": [
          "Custom words"
        ],
        "operationId": "addWords",
        "summary": "Add custom words",
        "description": "Adds one or more custom words to a custom language model. The service populates the words resource for a custom model with out-of-vocabulary (OOV) words from each corpus or grammar that is added to the model. You can use this method to add additional words or to modify existing words in the words resource. The words resource for a model can contain a maximum of 90 thousand custom (OOV) words. This includes words that the service extracts from corpora and grammars and words that you add directly. \n\nYou must use credentials for the instance of the service that owns a model to add or modify custom words for the model. Adding or modifying custom words does not affect the custom model until you train the model for the new data by using the **Train a custom language model** method. \n\nYou add custom words by providing a `CustomWords` object, which is an array of `CustomWord` objects, one per word. You must use the object's `word` parameter to identify the word that is to be added. You can also provide one or both of the optional `sounds_like` and `display_as` fields for each word.\n* The `sounds_like` field provides an array of one or more pronunciations for the word. Use the parameter to specify how the word can be pronounced by users. Use the parameter for words that are difficult to pronounce, foreign words, acronyms, and so on. For example, you might specify that the word `IEEE` can sound like `i triple e`. You can specify a maximum of five sounds-like pronunciations for a word. If you omit the `sounds_like` field, the service attempts to set the field to its pronunciation of the word. It cannot generate a pronunciation for all words, so you must review the word's definition to ensure that it is complete and valid.\n* The `display_as` field provides a different way of spelling the word in a transcript. Use the parameter when you want the word to appear different from its usual representation or from its spelling in training data. For example, you might indicate that the word `IBM(trademark)` is to be displayed as `IBM&trade;`. \n\nIf you add a custom word that already exists in the words resource for the custom model, the new definition overwrites the existing data for the word. If the service encounters an error with the input data, it returns a failure code and does not add any of the words to the words resource. \n\nThe call returns an HTTP 201 response code if the input data is valid. It then asynchronously processes the words to add them to the model's words resource. The time that it takes for the analysis to complete depends on the number of new words that you add but is generally faster than adding a corpus or grammar. \n\nYou can monitor the status of the request by using the **List a custom language model** method to poll the model's status. Use a loop to check the status every 10 seconds. The method returns a `Customization` object that includes a `status` field. A status of `ready` means that the words have been added to the custom model. The service cannot accept requests to add new data or to train the model until the existing request completes. \n\nYou can use the **List custom words** or **List a custom word** method to review the words that you add. Words with an invalid `sounds_like` field include an `error` field that describes the problem. You can use other words-related methods to correct errors, eliminate typos, and modify how words are pronounced as needed. \n\n**See also:**\n* [Add words to the custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-languageCreate#addWords)\n* [Working with custom words](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-corporaWords#workingWords)\n* [Validating a words resource](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-corporaWords#validateModel)",
        "x-content-type-required": true,
        "x-content-type-description": "The type of the input.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomWords"
              }
            }
          },
          "description": "A `CustomWords` object that provides information about one or more custom words that are to be added to or updated in the custom language model.",
          "required": true
        },
        "x-codegen-request-body-name": "custom_words",
        "responses": {
          "201": {
            "description": "**Created**. Addition of the custom words was successfully started. The service is analyzing the data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A required parameter is null or invalid, the JSON input is invalid, or the maximum number of sounds-like pronunciations for a word is exceeded. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Required property '{property}' is missing in JSON '{JSON}'`\n* `Word '{word}' contains invalid character character`\n* `Maximum number of sounds-like for a word exceeded`\n* `Maximum number of allowed phones of one item of sounds_like for word '{word}' exceeded`\n* `Malformed JSON: '{JSON}'`\n* `Wrong type of parameter '{parameter}' detected in the passed JSON`\n* `TOTAL_NUMBER_OF_OOV_WORDS_EXCEEDS_MAXIMUM_ALLOWED_FORMAT: \"Total number of OOV words {total_number} exceeds {maximum_allowed}\"`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "--header \"Content-Type: application/json\" ",
                      "--data \"{\\\"words\\\": [",
                      "{\\\"word\\\": \\\"HHonors\\\", \\\"sounds_like\\\": [\\\"hilton honors\\\", \\\"H. honors\\\"], \\\"display_as\\\": \\\"HHonors\\\"}, ",
                      "{\\\"word\\\": \\\"IEEE\\\", \\\"sounds_like\\\": [\\\"I. triple E.\\\"]} ",
                      "]}\" ",
                      "\"{url}/v1/customizations/{customization_id}/words\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "List<CustomWord> customWords = new ArrayList<>();\n",
                      "\n",
                      "CustomWord HHonors = new CustomWord();\n",
                      "HHonors.setWord(\"HHonors\");\n",
                      "HHonors.setSoundsLike(Arrays.asList(\"hilton honors\", \"H. honors\"));\n",
                      "HHonors.setDisplayAs(\"HHonors\");\n",
                      "customWords.add(HHonors);\n",
                      "\n",
                      "CustomWord IEEE = new CustomWord();\n",
                      "IEEE.setWord(\"IEEE\");\n",
                      "IEEE.setSoundsLike(Arrays.asList(\"I. tripe E.\"));\n",
                      "customWords.add(IEEE);\n",
                      "\n",
                      "AddWordsOptions addWordsOptions = new AddWordsOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .words(customWords)\n",
                      "  .build();\n",
                      "\n",
                      "speechToText.addWords(addWordsOptions).execute();\n",
                      "// Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const addWordsParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  contentType: 'application/json',\n",
                      "  words: [\n",
                      "    {word: 'HHonors', sounds_like: ['hilton honors', 'H. honors'], display_as: 'HHonors'},\n",
                      "    {word: 'IEEE', sounds_like: ['I. triple E.']},\n",
                      "  ],\n",
                      "};\n",
                      "\n",
                      "speechToText.addWords(addWordsParams)\n",
                      "  .then(result => {\n",
                      "    // Poll for language model status.\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_watson.speech_to_text_v1 import CustomWord\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "HHonors = CustomWord(\n",
                      "    'HHonors',\n",
                      "    ['hilton honors', 'H. honors'],\n",
                      "    'HHonors'\n",
                      ")\n",
                      "IEEE = CustomWord(\n",
                      "    'IEEE',\n",
                      "    ['I. triple E.']\n",
                      ")\n",
                      "\n",
                      "speech_to_text.add_words(\n",
                      "    '{customization_id}',\n",
                      "    [HHonors, IEEE]\n",
                      ")\n",
                      "# Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.add_words(\n",
                      "  customization_id: \"{customization_id}\",\n",
                      "  words: [\n",
                      "    {\n",
                      "      word: \"HHonors\",\n",
                      "      sounds_like: [\"hilton honors\", \"H. honors\"],\n",
                      "      display_as: \"HHonors\"\n",
                      "    },\n",
                      "    {\n",
                      "      word: \"IEEE\",\n",
                      "      sounds_like: [\"I. triple E.\"]\n",
                      "    }\n",
                      "  ]\n",
                      ")\n",
                      "# Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  _, responseErr := speechToText.AddWords(\n",
                      "    &speechtotextv1.AddWordsOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      Words: []speechtotextv1.CustomWord{\n",
                      "        speechtotextv1.CustomWord{\n",
                      "          Word:       core.StringPtr(\"HHonors\"),\n",
                      "          SoundsLike: []string{\"hilton honors\", \"H. honors\"},\n",
                      "          DisplayAs:  core.StringPtr(\"HHonors\"),\n",
                      "        },\n",
                      "        speechtotextv1.CustomWord{\n",
                      "          Word:       core.StringPtr(\"IEEE\"),\n",
                      "          SoundsLike: []string{\"I. triple E.\"},\n",
                      "        },\n",
                      "      },\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  // Poll for language model status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "let words = [\n",
                      "  CustomWord(word: \"HHonors\", soundsLike: [\"hilton honors\", \"H. honors\"], displayAs: \"HHonors\"),\n",
                      "  CustomWord(word: \"IEEE\", soundsLike: [\"I. triple E.\"])\n",
                      "]\n",
                      "speechToText.addWords(customizationID: \"{customizationId}\", words: words) {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  // Poll for language model status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var customWords = new List<CustomWord>()\n",
                      "{\n",
                      "    new CustomWord()\n",
                      "    {\n",
                      "        DisplayAs = \"HHonors\",\n",
                      "        SoundsLike = new List<string>()\n",
                      "        {\n",
                      "            \"hilton honors\",\n",
                      "            \"H. honors\"\n",
                      "        },\n",
                      "        Word = \"HHonors\"\n",
                      "    },\n",
                      "    new CustomWord()\n",
                      "    {\n",
                      "        SoundsLike = new List<string>()\n",
                      "        {\n",
                      "            \"I. tripe E.\"\n",
                      "        },\n",
                      "        Word = \"IEEE\"\n",
                      "    }\n",
                      "};\n",
                      "\n",
                      "var result = speechToText.AddWords(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    words: customWords\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "// Poll for language model status."
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var customWords = new List<CustomWord>()\n",
                      "{\n",
                      "    new CustomWord()\n",
                      "    {\n",
                      "        DisplayAs = \"HHonors\",\n",
                      "        SoundsLike = new List<string>()\n",
                      "        {\n",
                      "            \"hilton honors\",\n",
                      "            \"H. honors\"\n",
                      "        },\n",
                      "        Word = \"HHonors\"\n",
                      "    },\n",
                      "    new CustomWord()\n",
                      "    {\n",
                      "        SoundsLike = new List<string>()\n",
                      "        {\n",
                      "            \"I. tripe E.\"\n",
                      "        },\n",
                      "        Word = \"IEEE\"\n",
                      "    }\n",
                      "};\n",
                      "\n",
                      "speechToText.AddWords(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1, \"AddWord result: {0}\", response.Response);\n",
                      "        isComplete = true;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    words: customWords\n",
                      ");",
                      "// Poll for language model status."
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations/{customization_id}/words/{word_name}": {
      "put": {
        "tags": [
          "Custom words"
        ],
        "operationId": "addWord",
        "summary": "Add a custom word",
        "description": "Adds a custom word to a custom language model. The service populates the words resource for a custom model with out-of-vocabulary (OOV) words from each corpus or grammar that is added to the model. You can use this method to add a word or to modify an existing word in the words resource. The words resource for a model can contain a maximum of 90 thousand custom (OOV) words. This includes words that the service extracts from corpora and grammars and words that you add directly. \n\nYou must use credentials for the instance of the service that owns a model to add or modify a custom word for the model. Adding or modifying a custom word does not affect the custom model until you train the model for the new data by using the **Train a custom language model** method. \n\nUse the `word_name` parameter to specify the custom word that is to be added or modified. Use the `CustomWord` object to provide one or both of the optional `sounds_like` and `display_as` fields for the word.\n* The `sounds_like` field provides an array of one or more pronunciations for the word. Use the parameter to specify how the word can be pronounced by users. Use the parameter for words that are difficult to pronounce, foreign words, acronyms, and so on. For example, you might specify that the word `IEEE` can sound like `i triple e`. You can specify a maximum of five sounds-like pronunciations for a word. If you omit the `sounds_like` field, the service attempts to set the field to its pronunciation of the word. It cannot generate a pronunciation for all words, so you must review the word's definition to ensure that it is complete and valid.\n* The `display_as` field provides a different way of spelling the word in a transcript. Use the parameter when you want the word to appear different from its usual representation or from its spelling in training data. For example, you might indicate that the word `IBM(trademark)` is to be displayed as `IBM&trade;`. \n\nIf you add a custom word that already exists in the words resource for the custom model, the new definition overwrites the existing data for the word. If the service encounters an error, it does not add the word to the words resource. Use the **List a custom word** method to review the word that you add. \n\n**See also:**\n* [Add words to the custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-languageCreate#addWords)\n* [Working with custom words](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-corporaWords#workingWords)\n* [Validating a words resource](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-corporaWords#validateModel)",
        "x-content-type-required": true,
        "x-content-type-description": "The type of the input.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "name": "word_name",
            "in": "path",
            "description": "The custom word that is to be added to or updated in the custom language model. Do not include spaces in the word. Use a `-` (dash) or `_` (underscore) to connect the tokens of compound words. URL-encode the word if it includes non-ASCII characters. For more information, see [Character encoding](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-corporaWords#charEncoding).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomWord"
              }
            }
          },
          "description": "A `CustomWord` object that provides information about the specified custom word. Specify an empty object to add a word with no sounds-like or display-as information.",
          "required": true
        },
        "x-codegen-request-body-name": "custom_word",
        "responses": {
          "201": {
            "description": "**Created**. The custom word was successfully added to the custom language model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid, or the maximum number of sounds-like pronunciations for a word is exceeded. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Maximum number of sounds-like for a word exceeded`\n* `Maximum number of allowed phones of one item of sounds_like for word '{word}' exceeded`\n* `TOTAL_NUMBER_OF_OOV_WORDS_EXCEEDS_MAXIMUM_ALLOWED_FORMAT: \"Total number of OOV words {total_number} exceeds {maximum_allowed}\"`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "405": {
            "description": "**Method Not Allowed**. The word name includes characters that need to be URL-encoded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT -u \"apikey:{apikey}\" ",
                      "--header \"Content-Type: application/json\" ",
                      "--data \"{\\\"sounds_like\\\": [\\\"N. C. A. A.\\\", \\\"N. C. double A.\\\"], \\\"display_as\\\": \\\"NCAA\\\"}\" ",
                      "\"{url}/v1/customizations/{customization_id}/words/NCAA\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "AddWordOptions addWordOptions = new AddWordOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .wordName(\"NCAA\")\n",
                      "  .soundsLike(Arrays.asList(\"N. C. A. A.\", \"N. C. double A.\"))\n",
                      "  .displayAs(\"NCAA\")\n",
                      "  .build();\n",
                      "\n",
                      "speechToText.addWord(addWordOptions).execute();\n"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const addWordParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.addWord(addWordParams)\n",
                      "  .then(result => {\n",
                      "    console.log(JSON.stringify(result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.add_word(\n",
                      "    '{customization_id}',\n",
                      "    'NCAA',\n",
                      "    sounds_like=['N. C. A. A.', 'N. C. double A.'],\n",
                      "    display_as='NCAA'\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.add_word(\n",
                      "  customization_id: \"{customization_id}\",\n",
                      "  word_name: \"NCAA\",\n",
                      "  sounds_like: [\"N. C. A. A.\", \"N. C. double A.\"],\n",
                      "  display_as: \"NCAA\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  _, responseErr := speechToText.AddWord(\n",
                      "    &speechtotextv1.AddWordOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      WordName:        core.StringPtr(\"NCAA\"),\n",
                      "      SoundsLike:      []string{\"N. C. A. A.\", \"N. C. double A.\"},\n",
                      "      DisplayAs:       core.StringPtr(\"NCAA\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.addWord(\n",
                      "  customizationID: \"{customization_id}\",\n",
                      "  wordName: \"NCAA\",\n",
                      "  soundsLike: [\"N. C. A. A.\", \"N. C. double A.\"],\n",
                      "  displayAs: \"NCAA\")\n",
                      "{\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.AddWord(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    wordName: \"NCAA\",\n",
                      "    soundsLike: new List<string>()\n",
                      "    {\n",
                      "        \"N. C. A. A.\",\n",
                      "        \"N. C. double A.\"\n",
                      "    },\n",
                      "    displayAs: \"NCAA\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.AddWord(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"AddWord result: {0}\", response.Response);\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    wordName: \"NCAA\",\n",
                      "    soundsLike: new List<string>()\n",
                      "    {\n",
                      "        \"N. C. A. A.\",\n",
                      "        \"N. C. double A.\"\n",
                      "    },\n",
                      "    displayAs: \"NCAA\"\n",
                      ");"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "tags": [
          "Custom words"
        ],
        "operationId": "getWord",
        "summary": "Get a custom word",
        "description": "Gets information about a custom word from a custom language model. You must use credentials for the instance of the service that owns a model to list information about its words. \n\n**See also:** [Listing words from a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageWords#listWords).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "name": "word_name",
            "in": "path",
            "description": "The custom word that is to be read from the custom language model. URL-encode the word if it includes non-ASCII characters. For more information, see [Character encoding](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-corporaWords#charEncoding).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Word"
                },
                "examples": {
                  "response": {
                    "value": {
                      "word": "NCAA",
                      "sounds_like": [
                        "N. C. A. A.",
                        "N. C. double A."
                      ],
                      "display_as": "NCAA",
                      "count": 3,
                      "source": [
                        "corpus3",
                        "user"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID or word is invalid, including the case where the word does not exist for the custom model. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Invalid value for word '{word}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/words/NCAA\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "GetWordOptions getWordOptions = new GetWordOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .wordName(\"NCAA\")\n",
                      "  .build();\n",
                      "\n",
                      "Word word = speechToText.getWord(getWordOptions).execute().getResult();\n",
                      "System.out.println(word);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const getWordParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  wordName: 'NCAA',\n",
                      "};\n",
                      "\n",
                      "speechToText.getWord(getWordParams)\n",
                      "  .then(word => {\n",
                      "    console.log(JSON.stringify(word, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "word = speech_to_text.get_word(\n",
                      "    '{customization_id}',\n",
                      "    'NCAA'\n",
                      ").get_result()\n",
                      "print(json.dumps(word, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "word = speech_to_text.get_word(\n",
                      "  customization_id: \"{customization_id}\",\n",
                      "  word_name: \"NCAA\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(word.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.GetWord(\n",
                      "    &speechtotextv1.GetWordOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      WordName:        core.StringPtr(\"NCAA\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.getWord(customizationID: \"{customizationId}\", wordName: \"NCAA\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let word = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(word)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.GetWord(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    wordName: \"NCAA\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "Word getWordResponse = null;\n",
                      "speechToText.GetWord(\n",
                      "    callback: (DetailedResponse<Word> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"GetWord result: {0}\", response.Response);\n",
                      "        getWordResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    wordName: \"NCAA\"\n",
                      ");\n",
                      "\n",
                      "while (getWordResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Custom words"
        ],
        "operationId": "deleteWord",
        "summary": "Delete a custom word",
        "description": "Deletes a custom word from a custom language model. You can remove any word that you added to the custom model's words resource via any means. However, if the word also exists in the service's base vocabulary, the service removes only the custom pronunciation for the word; the word remains in the base vocabulary. Removing a custom word does not affect the custom model until you train the model with the **Train a custom language model** method. You must use credentials for the instance of the service that owns a model to delete its words. \n\n**See also:** [Deleting a word from a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageWords#deleteWord).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "name": "word_name",
            "in": "path",
            "description": "The custom word that is to be deleted from the custom language model. URL-encode the word if it includes non-ASCII characters. For more information, see [Character encoding](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-corporaWords#charEncoding).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The custom word was successfully deleted from the custom language model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID or word is invalid, including the case where the word does not exist for the custom model. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Invalid value for word '{word}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "405": {
            "description": "**Method Not Allowed**. No word name was specified with the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/words/NCAA\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "DeleteWordOptions deleteWordOptions = new DeleteWordOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .wordName(\"NCAA\")\n",
                      "  .build();\n",
                      "\n",
                      "speechToText.deleteWord(deleteWordOptions).execute();\n"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const deleteWordParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.deleteWord(deleteWordParams)\n",
                      "  .then(result => {\n",
                      "    // Response is empty.\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.delete_word(\n",
                      "    '{customization_id}',\n",
                      "    'NCAA'\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.delete_word(\n",
                      "  customization_id: \"{customization_id}\",\n",
                      "  word_name: \"NCAA\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  _, responseErr := speechToText.DeleteWord(\n",
                      "    &speechtotextv1.DeleteWordOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      WordName:        core.StringPtr(\"NCAA\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.deleteWord(customizationID: \"{customizationId}\", wordName: \"NCAA\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.DeleteWord(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    wordName: \"NCAA\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.StatusCode);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "bool isComplete = false;\n",
                      "speechToText.DeleteWord(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"DeleteWord result: {0}\", response.Response);\n",
                      "        isComplete = true;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    wordName: \"NCAA\"\n",
                      ");\n",
                      "\n",
                      "while (!isComplete)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations/{customization_id}/grammars": {
      "get": {
        "tags": [
          "Custom grammars"
        ],
        "operationId": "listGrammars",
        "summary": "List grammars",
        "description": "Lists information about all grammars from a custom language model. The information includes the total number of out-of-vocabulary (OOV) words, name, and status of each grammar. You must use credentials for the instance of the service that owns a model to list its grammars. \n\n**See also:** [Listing grammars from a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageGrammars#listGrammars).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grammars"
                },
                "examples": {
                  "response": {
                    "value": {
                      "grammars": [
                        {
                          "out_of_vocabulary_words": 0,
                          "name": "confirm-xml",
                          "status": "analyzed"
                        },
                        {
                          "out_of_vocabulary_words": 0,
                          "name": "confirm-abnf",
                          "status": "analyzed"
                        },
                        {
                          "out_of_vocabulary_words": 8,
                          "name": "list-abnf",
                          "status": "analyzed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid:\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/grammars\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "ListGrammarsOptions listGrammarsOptions = new ListGrammarsOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .build();\n",
                      "\n",
                      "Grammars grammars =\n",
                      "  speechToText.listGrammars(listGrammarsOptions).execute().getResult();\n",
                      "System.out.println(grammars);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const listGrammarsParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.listGrammars(listGrammarsParams)\n",
                      "  .then(grammars => {\n",
                      "    console.log(JSON.stringify(grammars, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "grammars = speech_to_text.list_grammars('{customization_id}').get_result()\n",
                      "print(json.dumps(grammars, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "grammars = speech_to_text.list_grammars(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(grammars.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.ListGrammars(\n",
                      "    &speechtotextv1.ListGrammarsOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.listGrammars(customizationID: \"{customizationId}\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let grammars = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(grammars)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.ListGrammars(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "Grammars listGrammarsResponse = null;\n",
                      "speechToText.ListGrammars(\n",
                      "    callback: (DetailedResponse<Grammars> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"ListGrammars result: {0}\", response.Response);\n",
                      "        listGrammarsResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");\n",
                      "\n",
                      "while (listGrammarsResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/customizations/{customization_id}/grammars/{grammar_name}": {
      "post": {
        "tags": [
          "Custom grammars"
        ],
        "operationId": "addGrammar",
        "summary": "Add a grammar",
        "description": "Adds a single grammar file to a custom language model. Submit a plain text file in UTF-8 format that defines the grammar. Use multiple requests to submit multiple grammar files. You must use credentials for the instance of the service that owns a model to add a grammar to it. Adding a grammar does not affect the custom language model until you train the model for the new data by using the **Train a custom language model** method. \n\nThe call returns an HTTP 201 response code if the grammar is valid. The service then asynchronously processes the contents of the grammar and automatically extracts new words that it finds. This operation can take a few seconds or minutes to complete depending on the size and complexity of the grammar, as well as the current load on the service. You cannot submit requests to add additional resources to the custom model or to train the model until the service's analysis of the grammar for the current request completes. Use the **Get a grammar** method to check the status of the analysis. \n\nThe service populates the model's words resource with any word that is recognized by the grammar that is not found in the model's base vocabulary. These are referred to as out-of-vocabulary (OOV) words. You can use the **List custom words** method to examine the words resource and use other words-related methods to eliminate typos and modify how words are pronounced as needed. \n\nTo add a grammar that has the same name as an existing grammar, set the `allow_overwrite` parameter to `true`; otherwise, the request fails. Overwriting an existing grammar causes the service to process the grammar file and extract OOV words anew. Before doing so, it removes any OOV words associated with the existing grammar from the model's words resource unless they were also added by another resource or they have been modified in some way with the **Add custom words** or **Add a custom word** method. \n\nThe service limits the overall amount of data that you can add to a custom model to a maximum of 10 million total words from all sources combined. Also, you can add no more than 90 thousand OOV words to a model. This includes words that the service extracts from corpora and grammars and words that you add directly. \n\n**See also:**\n* [Understanding grammars](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-grammarUnderstand#grammarUnderstand)\n* [Add a grammar to the custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-grammarAdd#addGrammar)",
        "x-content-type-required": true,
        "x-content-type-description": "The format (MIME type) of the grammar file:\n* `application/srgs` for Augmented Backus-Naur Form (ABNF), which uses a plain-text representation that is similar to traditional BNF grammars.\n* `application/srgs+xml` for XML Form, which uses XML elements to represent the grammar.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "$ref": "#/components/parameters/AddGrammarNamePathParam"
          },
          {
            "$ref": "#/components/parameters/AllowOverwriteGrammarParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/srgs": {
              "schema": {
                "type": "string"
              }
            },
            "application/srgs+xml": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "A plain text file that contains the grammar in the format specified by the `Content-Type` header. Encode the file in UTF-8 (ASCII is a subset of UTF-8). Using any other encoding can lead to issues when compiling the grammar or to unexpected results in decoding. The service ignores an encoding that is specified in the header of the grammar. \n\nWith the `curl` command, use the `--data-binary` option to upload the file for the request.",
          "required": true
        },
        "x-codegen-request-body-name": "grammar_file",
        "responses": {
          "201": {
            "description": "**Created**. Addition of the grammar was successfully started. The service is analyzing the data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A required parameter is null or invalid, the specified grammar name already exists, or the custom model needs to be upgraded, among other possibilities. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Grammar file not specified or empty`\n* `Grammar '{grammar_name}' already exists - change its name, remove existing grammar before adding new one, or overwrite existing grammar by setting 'allow_overwrite' to 'true'`\n* `Corpus exists with grammar name '{grammar_name}'. Please use different name.`\n* `TOTAL_NUMBER_OF_OOV_WORDS_EXCEEDS_MAXIMUM_ALLOWED_FORMAT: \"Total number of OOV words {total_number} exceeds {maximum_allowed}\"`\n* `Analysis of grammar '{grammar_name}' failed due to {error_message}. Please fix the error then add the grammar again by setting the 'allow_overwrite' flag to 'true'.`, where `{error_message}` is a message of the form `{\"code\": 404, \"error\": \"Model en-US_BroadbandModel (version: en-US_BroadbandModel.{version}) not found\", \"code_description\": \"Not Found\"}`. Upgrade the custom language model to the latest version of its base language model, and then add the grammar to the custom model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "405": {
            "description": "**Method Not Allowed**. The grammar name includes characters that need to be URL-encoded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "415": {
            "description": "**Unsupported Media Type**. The request specified an unacceptable media type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request. You can also receive status code 500 `Forwarding Error` if the service is currently busy handling a previous request for the custom model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "--header \"Content-Type: application/srgs\" ",
                      "--data-binary \"@list.abnf\" ",
                      "\"{url}/v1/customizations/{customization_id}/grammars/list-abnf\""
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/list.abnf\" download=\"list.abnf\">list.abnf</a>"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "try {\n",
                      "  AddGrammarOptions addGrammarOptions = new AddGrammarOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .grammarFile(new File(\"list.abnf\"))\n",
                      "    .grammarName(\"list-abnf\")\n",
                      "    .contentType(\"application/srgs\")\n",
                      "    .build();\n",
                      "\n",
                      "  speechToText.addGrammar(addGrammarOptions).execute();\n",
                      "  // Poll for grammar status.\n",
                      "} catch (FileNotFoundException e) {\n",
                      "  e.printStackTrace();\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/list.abnf\" download=\"list.abnf\">list.abnf</a>"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const fs = require('fs');\n",
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const addGrammarParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  grammarFile: fs.createReadStream('./list.abnf'),\n",
                      "  grammarName: 'list-abnf',\n",
                      "  contentType: 'application/srgs',\n",
                      "};\n",
                      "\n",
                      "speechToText.addGrammar(addGrammarParams)\n",
                      "  .then(result => {\n",
                      "    // Poll for grammar status.\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/list.abnf\" download=\"list.abnf\">list.abnf</a>"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from os.path import join, dirname\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "with open(join(dirname(__file__), './.', 'list.abnf'),\n",
                      "               'rb') as grammar_file:\n",
                      "    speech_to_text.add_grammar(\n",
                      "        '{customization_id}',\n",
                      "        'list-abnf',\n",
                      "        grammar_file,\n",
                      "        'application/srgs'\n",
                      "    )\n",
                      "# Poll for grammar status."
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/list.abnf\" download=\"list.abnf\">list.abnf</a>"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "File.open(\"list.abnf\") do |grammar_file|\n",
                      "  speech_to_text.add_grammar(\n",
                      "    customization_id: \"{customization_id}\",\n",
                      "    grammar_name: \"list-abnf\",\n",
                      "    grammar_file: grammar_file,\n",
                      "    content_type: \"application/srgs\"\n",
                      "  )\n",
                      "end\n",
                      "# Poll for grammar status."
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/list.abnf\" download=\"list.abnf\">list.abnf</a>"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  var grammarFile io.ReadCloser\n",
                      "  var grammarFileErr error\n",
                      "  grammarFile, grammarFileErr = os.Open(\"list.abnf\")\n",
                      "  if grammarFileErr != nil {\n",
                      "    panic(grammarFileErr)\n",
                      "  }\n",
                      "\n",
                      "  _, responseErr := speechToText.AddGrammar(\n",
                      "    &speechtotextv1.AddGrammarOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      GrammarName:     core.StringPtr(\"list-abnf\"),\n",
                      "      GrammarFile:     grammarFile,\n",
                      "      ContentType:     core.StringPtr(\"application/srgs\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  // Poll for grammar status.\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/list.abnf\" download=\"list.abnf\">list.abnf</a>"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "let url = Bundle.main.url(forResource: \"list\", withExtension: \"abnf\")\n",
                      "let grammarFile = try! String(contentsOf: url!)\n",
                      "speechToText.addGrammar(\n",
                      "  customizationID: \"{customizationId}\",\n",
                      "  grammarName: \"list-abnf\",\n",
                      "  grammarFile: grammarFile,\n",
                      "  contentType: \"application/srgs\")\n",
                      "{\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  // Poll for grammar status.\n",
                      "}"
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/list.abnf\" download=\"list.abnf\">list.abnf</a>"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.AddGrammar(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    grammarFile: File.ReadAllText(\"list.abnf\"),\n",
                      "    grammarName: \"list-abnf\",\n",
                      "    contentType: \"application/srgs\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "// Poll for grammar status."
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/list.abnf\" download=\"list.abnf\">list.abnf</a>"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.AddGrammar(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1IntegrationTests\", \"AddGrammar result: {0}\", response.Response);\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    grammarFile: File.ReadAllText(\"list.abnf\"),\n",
                      "    grammarName: \"list-abnf\",\n",
                      "    contentType: \"application/srgs\"\n",
                      ");",
                      "// Poll for grammar status."
                    ]
                  },
                  {
                    "type": "markdown",
                    "source": [
                      "Download sample file ",
                      "<a href=\"https://watson-developer-cloud.github.io/doc-tutorial-downloads/speech-to-text/reference/list.abnf\" download=\"list.abnf\">list.abnf</a>"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "tags": [
          "Custom grammars"
        ],
        "operationId": "getGrammar",
        "summary": "Get a grammar",
        "description": "Gets information about a grammar from a custom language model. The information includes the total number of out-of-vocabulary (OOV) words, name, and status of the grammar. You must use credentials for the instance of the service that owns a model to list its grammars. \n\n**See also:** [Listing grammars from a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageGrammars#listGrammars).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "$ref": "#/components/parameters/GrammarNamePathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grammar"
                },
                "examples": {
                  "response": {
                    "value": {
                      "out_of_vocabulary_words": 8,
                      "name": "list-abnf",
                      "status": "analyzed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID or grammar name is invalid, including the case where the grammar does not exist for the custom model. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Invalid value for grammar name '{grammar_name}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/grammars/list-abnf\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "GetGrammarOptions getGrammarOptions = new GetGrammarOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .grammarName(\"list-abnf\")\n",
                      "  .build();\n",
                      "\n",
                      "Grammar grammar =\n",
                      "  speechToText.getGrammar(getGrammarOptions).execute().getResult();\n",
                      "System.out.println(grammar);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const getGrammarParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  grammarName: 'list-abnf',\n",
                      "};\n",
                      "\n",
                      "speechToText.getGrammar(getGrammarParams)\n",
                      "  .then(grammar => {\n",
                      "    console.log(JSON.stringify(grammar, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "grammar = speech_to_text.get_grammar(\n",
                      "    '{customization_id}',\n",
                      "    'list-abnf'\n",
                      ").get_result()\n",
                      "print(json.dumps(grammar, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "grammar = speech_to_text.get_grammar(\n",
                      "  customization_id: \"{customization_id}\",\n",
                      "  grammar_name: \"list-abnf\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(grammar.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.GetGrammar(\n",
                      "    &speechtotextv1.GetGrammarOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      GrammarName:     core.StringPtr(\"list-abnf\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.getGrammar(customizationID: \"{customizationId}\", grammarName: \"list-abnf\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let grammar = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(grammar)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.GetGrammar(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    grammarName: \"list-abnf\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "Grammar getGrammarResponse = null;\n",
                      "speechToText.GetGrammar(\n",
                      "    callback: (DetailedResponse<Grammar> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"GetGrammar result: {0}\", response.Response);\n",
                      "        getGrammarResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    grammarName: \"list-abnf\"\n",
                      ");\n",
                      "\n",
                      "while (getGrammarResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Custom grammars"
        ],
        "operationId": "deleteGrammar",
        "summary": "Delete a grammar",
        "description": "Deletes an existing grammar from a custom language model. The service removes any out-of-vocabulary (OOV) words associated with the grammar from the custom model's words resource unless they were also added by another resource or they were modified in some way with the **Add custom words** or **Add a custom word** method. Removing a grammar does not affect the custom model until you train the model with the **Train a custom language model** method. You must use credentials for the instance of the service that owns a model to delete its grammar. \n\n**See also:** [Deleting a grammar from a custom language model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageGrammars#deleteGrammar).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomLanguageIDPathParam"
          },
          {
            "$ref": "#/components/parameters/GrammarNamePathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The grammar was successfully deleted from the custom language model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID or grammar name is invalid, including the case where the grammar does not exist for the custom model. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Invalid value for grammar name '{grammar_name}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "405": {
            "description": "**Method Not Allowed**. No grammar name was specified with the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/customizations/{customization_id}/grammars/list-abnf\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "DeleteGrammarOptions deleteGrammarOptions = new DeleteGrammarOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .grammarName(\"list-abnf\")\n",
                      "  .build();\n",
                      "\n",
                      "speechToText.deleteGrammar(deleteGrammarOptions).execute();\n"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const deleteGrammarParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  grammarName: 'list-abnf',\n",
                      "};\n",
                      "\n",
                      "speechToText.deleteGrammar(deleteGrammarParams)\n",
                      "  .then(result => {\n",
                      "    console.log(JSON.stringify(result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.delete_grammar(\n",
                      "    '{customization_id}',\n",
                      "    'list-abnf'\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.delete_grammar(\n",
                      "  customization_id: \"{customization_id}\",\n",
                      "  grammar_name: \"list-abnf\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  _, responseErr := speechToText.DeleteGrammar(\n",
                      "    &speechtotextv1.DeleteGrammarOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      GrammarName:     core.StringPtr(\"list-abnf\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.deleteGrammar(customizationID: \"{customizationId}\", grammarName: \"list-abnf\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.DeleteGrammar(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    grammarName: \"list-abnf\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.StatusCode);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.DeleteGrammar(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"DeleteGrammar result: {0}\", response.Response);\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    grammarName: \"list-abnf\"\n",
                      ");"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/acoustic_customizations": {
      "post": {
        "tags": [
          "Custom acoustic models"
        ],
        "operationId": "createAcousticModel",
        "summary": "Create a custom acoustic model",
        "description": "Creates a new custom acoustic model for a specified base model. The custom acoustic model can be used only with the base model for which it is created. The model is owned by the instance of the service whose credentials are used to create it. \n\nYou can create a maximum of 1024 custom acoustic models per owning credentials. The service returns an error if you attempt to create more than 1024 models. You do not lose any models, but you cannot create any more until your model count is below the limit. \n\n**See also:** [Create a custom acoustic model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-acoustic#createModel-acoustic).",
        "x-content-type-required": true,
        "x-content-type-description": "The type of the input.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAcousticModel"
              }
            }
          },
          "description": "A `CreateAcousticModel` object that provides basic information about the new custom acoustic model.",
          "required": true
        },
        "x-codegen-request-body-name": "create_acoustic_model",
        "responses": {
          "201": {
            "description": "**Created**. The custom acoustic model was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcousticModel"
                },
                "examples": {
                  "response": {
                    "value": {
                      "customization_id": "74f4807e-b5ff-4866-824e-6bba1a84fe96"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A required parameter is null or invalid. Specific failure messages include:\n* `Required parameter '{name}' is missing`\n* `Required parameter '{name}' cannot be empty string`\n* `Required parameter '{name}' cannot be null`\n* `The base model '{name}' is not recognized`\n* `Customization is not supported for base model '{name}'` \n* `You exceeded the maximum '{model_number}' of allowed custom acoustic models. You have '{model_number}' custom acoustic models. Please remove the models you do not need or contact the IBM speech support team to apply for an exception.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "--header \"Content-Type: application/json\" ",
                      "--data \"{\\\"name\\\": \\\"First example acoustic model\\\", ",
                      "\\\"base_model_name\\\": \\\"en-US_BroadbandModel\\\", ",
                      "\\\"description\\\": \\\"First example custom acoustic model\\\"}\" ",
                      "\"{url}/v1/acoustic_customizations\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "CreateAcousticModelOptions createAcousticModelOptions =\n",
                      "  new CreateAcousticModelOptions.Builder()\n",
                      "    .name(\"First example acoustic model\")\n",
                      "    .baseModelName(\"en-US_BroadbandModel\")\n",
                      "    .description(\"First custom acoustic model example\")\n",
                      "    .build();\n",
                      "\n",
                      "AcousticModel acousticModel =\n",
                      "  speechToText.createAcousticModel(createAcousticModelOptions).execute().getResult();\n",
                      "System.out.println(acousticModel);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const createAcousticModelParams = {\n",
                      "  name: 'First example acoustic model',\n",
                      "  baseModelName: 'en-US_BroadbandModel',\n",
                      "  description: 'First custom acoustic model example',\n",
                      "};\n",
                      "\n",
                      "speechToText.createAcousticModel(createAcousticModelParams)\n",
                      "  .then(acousticModel => {\n",
                      "    console.log(JSON.stringify(acousticModel, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "acoustic_model = speech_to_text.create_acoustic_model(\n",
                      "    'First example acoustic model',\n",
                      "    'en-US_BroadbandModel',\n",
                      "    description='First custom acoustic model example'\n",
                      ").get_result()\n",
                      "print(json.dumps(acoustic_model, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "acoustic_model = speech_to_text.create_acoustic_model(\n",
                      "  name: \"First example acoustic model\",\n",
                      "  base_model_name: \"en-US_BroadbandModel\",\n",
                      "  description: \"First custom acoustic model example\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(acoustic_model.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.CreateAcousticModel(\n",
                      "    &speechtotextv1.CreateAcousticModelOptions{\n",
                      "      Name: core.StringPtr(\"First example acoustic model\"),\n",
                      "      BaseModelName: core.StringPtr(speechtotextv1.CreateAcousticModelOptions_BaseModelName_EnUsBroadbandmodel),\n",
                      "      Description: core.StringPtr(\"First custom acoustic model example\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.createAcousticModel(\n",
                      "  name: \"First example acoustic model\",\n",
                      "  baseModelName: \"en-US_BroadbandModel\",\n",
                      "  description: \"First custom acoustic model example\")\n",
                      "{\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let model = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(model)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.CreateAcousticModel(\n",
                      "    name: \"First example acoustic model\",\n",
                      "    baseModelName: \"en-US_BroadbandModel\",\n",
                      "    description: \"First custom acoustic model example\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "AcousticModel createAcousticModelResponse = null;\n",
                      "speechToText.CreateAcousticModel(\n",
                      "    callback: (DetailedResponse<AcousticModel> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"CreateAcousticModel result: {0}\", response.Response);\n",
                      "        createAcousticModelResponse = response.Result;\n",
                      "    },\n",
                      "    name: \"First example acoustic model\",\n",
                      "    baseModelName: \"en-US_BroadbandModel\",\n",
                      "    description: \"First custom acoustic model example\"\n",
                      ");\n",
                      "\n",
                      "while (createAcousticModelResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "tags": [
          "Custom acoustic models"
        ],
        "operationId": "listAcousticModels",
        "summary": "List custom acoustic models",
        "description": "Lists information about all custom acoustic models that are owned by an instance of the service. Use the `language` parameter to see all custom acoustic models for the specified language. Omit the parameter to see all custom acoustic models for all languages. You must use credentials for the instance of the service that owns a model to list information about it. \n\n**See also:** [Listing custom acoustic models](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageAcousticModels#listModels-acoustic).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomizationLanguageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcousticModels"
                },
                "examples": {
                  "response": {
                    "value": {
                      "customizations": [
                        {
                          "owner": "297cfd08-330a-22ba-93ce-1a73f454dd98",
                          "base_model_name": "en-US_BroadbandModel",
                          "customization_id": "74f4807e-b5ff-4866-824e-6bba1a84fe96",
                          "versions": [
                            "en-US_BroadbandModel.v07-06082016.06202016",
                            "en-US_BroadbandModel.v2017-11-15"
                          ],
                          "created": "2016-06-01T18:42:25.324Z",
                          "updated": "2016-06-01T18:42:25.324Z",
                          "name": "First example acoustic model",
                          "description": "First example custom acoustic model",
                          "progress": 0,
                          "language": "en-US",
                          "status": "pending"
                        },
                        {
                          "owner": "297cfd08-330a-22ba-93ce-1a73f454dd98",
                          "base_model_name": "en-US_BroadbandModel",
                          "customization_id": "8391f918-3b76-e109-763c-b7732fae4829",
                          "versions": [
                            "en-US_BroadbandModel.v2017-11-15"
                          ],
                          "created": "2016-06-01T18:51:37.291Z",
                          "updated": "2016-06-01T20:27:11.121Z",
                          "name": "Second example acoustic model",
                          "description": "Second example custom acoustic model",
                          "progress": 100,
                          "language": "en-US",
                          "status": "available"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A required parameter is null or invalid. Specific failure messages include:\n* `Language '{language}' is not supported for customization`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/acoustic_customizations?language=en-US\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "ListAcousticModelsOptions listAcousticModelsOptions =\n",
                      "  new ListAcousticModelsOptions.Builder()\n",
                      "    .language(\"en-US\")\n",
                      "    .build();\n",
                      "\n",
                      "AcousticModels acousticModels =\n",
                      "  speechToText.listAcousticModels(listAcousticModelsOptions).execute().getResult();\n",
                      "System.out.println(acousticModels);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const listAcousticModelsParams = {\n",
                      "  language: 'en-US',\n",
                      "};\n",
                      "\n",
                      "speechToText.listAcousticModels(listAcousticModelsParams)\n",
                      "  .then(acousticModels => {\n",
                      "    console.log(JSON.stringify(acousticModels, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "acoustic_models = speech_to_text.list_acoustic_models('en-US').get_result()\n",
                      "print(json.dumps(acoustic_models, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "acoustic_models = speech_to_text.list_acoustic_models(\n",
                      "  language: \"en-US\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(acoustic_models.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.ListAcousticModels(\n",
                      "    &speechtotextv1.ListAcousticModelsOptions{\n",
                      "      Language: core.StringPtr(\"en-US\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.listAcousticModels(language: \"en-US\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let models = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(models)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.ListAcousticModels(\n",
                      "    language: \"en-US\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "AcousticModels listAcousticModelsResponse = null;\n",
                      "speechToText.ListAcousticModels(\n",
                      "    callback: (DetailedResponse<AcousticModels> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"ListAcousticModels result: {0}\", response.Response);\n",
                      "        listAcousticModelsResponse = response.Result;\n",
                      "    },\n",
                      "    language: \"en-US\"\n",
                      ");\n",
                      "\n",
                      "while (listAcousticModelsResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/acoustic_customizations/{customization_id}": {
      "get": {
        "tags": [
          "Custom acoustic models"
        ],
        "operationId": "getAcousticModel",
        "summary": "Get a custom acoustic model",
        "description": "Gets information about a specified custom acoustic model. You must use credentials for the instance of the service that owns a model to list information about it. \n\n**See also:** [Listing custom acoustic models](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageAcousticModels#listModels-acoustic).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomAcousticIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcousticModel"
                },
                "examples": {
                  "response": {
                    "value": {
                      "owner": "297cfd08-330a-22ba-93ce-1a73f454dd98",
                      "base_model_name": "en-US_BroadbandModel",
                      "customization_id": "74f4807e-b5ff-4866-824e-6bba1a84fe96",
                      "versions": [
                        "en-US_BroadbandModel.v07-06082016.06202016",
                        "en-US_BroadbandModel.v2017-11-15"
                      ],
                      "created": "2016-06-01T18:42:25.324Z",
                      "updated": "2016-06-01T18:42:25.324Z",
                      "name": "First example acoustic model",
                      "description": "First example custom acoustic model",
                      "progress": 0,
                      "language": "en-US",
                      "status": "pending"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid:\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/acoustic_customizations/{customization_id}\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "GetAcousticModelOptions getAcousticModelOptions =\n",
                      "  new GetAcousticModelOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .build();\n",
                      "\n",
                      "AcousticModel acousticModel =\n",
                      "  speechToText.getAcousticModel(getAcousticModelOptions).execute().getResult();\n",
                      "System.out.println(acousticModel);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const getAcousticModelParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.getAcousticModel(getAcousticModelParams)\n",
                      "  .then(acousticModel => {\n",
                      "    console.log(JSON.stringify(acousticModel, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "acoustic_model = speech_to_text.get_acoustic_model('{customization_id}').get_result()\n",
                      "print(json.dumps(acoustic_model, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "acoustic_model = speech_to_text.get_acoustic_model(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(acoustic_model.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.GetAcousticModel(\n",
                      "    &speechtotextv1.GetAcousticModelOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.getAcousticModel(customizationID: \"{customizationId}\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let model = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(model)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.GetAcousticModel(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "AcousticModel getAcousticModelResponse = null;\n",
                      "speechToText.GetAcousticModel(\n",
                      "    callback: (DetailedResponse<AcousticModel> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"CheckAcousticModelStatus: {0}\", response.Result);\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");\n",
                      "\n",
                      "while (getAcousticModelResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Custom acoustic models"
        ],
        "operationId": "deleteAcousticModel",
        "summary": "Delete a custom acoustic model",
        "description": "Deletes an existing custom acoustic model. The custom model cannot be deleted if another request, such as adding an audio resource to the model, is currently being processed. You must use credentials for the instance of the service that owns a model to delete it. \n\n**See also:** [Deleting a custom acoustic model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageAcousticModels#deleteModel-acoustic).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomAcousticIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The custom acoustic model was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid:\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials, including the case where the custom model does not exist:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/acoustic_customizations/{customization_id}\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "DeleteAcousticModelOptions deleteAcousticModelOptions =\n",
                      "  new DeleteAcousticModelOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .build();\n",
                      "\n",
                      "speechToText.deleteAcousticModel(deleteAcousticModelOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const deleteAcousticModelParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.deleteAcousticModel(deleteAcousticModelParams)\n",
                      "  .then(result => {\n",
                      "    console.log(JSON.stringify(result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.delete_acoustic_model('{customization_id}')"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.delete_acoustic_model(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  _, responseErr := speechToText.DeleteAcousticModel(\n",
                      "    &speechtotextv1.DeleteAcousticModelOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.deleteAcousticModel(customizationID: \"{customizationId}\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.DeleteAcousticModel(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.StatusCode);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.DeleteAcousticModel(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"DeleteAcousticModel result: {0}\", response.Response);\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/acoustic_customizations/{customization_id}/train": {
      "post": {
        "tags": [
          "Custom acoustic models"
        ],
        "operationId": "trainAcousticModel",
        "summary": "Train a custom acoustic model",
        "description": "Initiates the training of a custom acoustic model with new or changed audio resources. After adding or deleting audio resources for a custom acoustic model, use this method to begin the actual training of the model on the latest audio data. The custom acoustic model does not reflect its changed data until you train it. You must use credentials for the instance of the service that owns a model to train it. \n\nThe training method is asynchronous. It can take on the order of minutes or hours to complete depending on the total amount of audio data on which the custom acoustic model is being trained and the current load on the service. Typically, training a custom acoustic model takes approximately two to four times the length of its audio data. The actual time depends on the model being trained and the nature of the audio, such as whether the audio is clean or noisy. The method returns an HTTP 200 response code to indicate that the training process has begun. \n\nYou can monitor the status of the training by using the **Get a custom acoustic model** method to poll the model's status. Use a loop to check the status once a minute. The method returns an `AcousticModel` object that includes `status` and `progress` fields. A status of `available` indicates that the custom model is trained and ready to use. The service cannot train a model while it is handling another request for the model. The service cannot accept subsequent training requests, or requests to add new audio resources, until the existing training request completes. \n\nYou can use the optional `custom_language_model_id` parameter to specify the GUID of a separately created custom language model that is to be used during training. Train with a custom language model if you have verbatim transcriptions of the audio files that you have added to the custom model or you have either corpora (text files) or a list of words that are relevant to the contents of the audio files. For training to succeed, both of the custom models must be based on the same version of the same base model, and the custom language model must be fully trained and available. \n\n**See also:**\n* [Train the custom acoustic model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-acoustic#trainModel-acoustic)\n* [Using custom acoustic and custom language models together](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-useBoth#useBoth) \n\n### Training failures\n\n Training can fail to start for the following reasons:\n* The service is currently handling another request for the custom model, such as another training request or a request to add audio resources to the model.\n* The custom model contains less than 10 minutes or more than 200 hours of audio data.\n* You passed a custom language model with the `custom_language_model_id` query parameter that is not in the available state. A custom language model must be fully trained and available to be used to train a custom acoustic model.\n* You passed an incompatible custom language model with the `custom_language_model_id` query parameter. Both custom models must be based on the same version of the same base model.\n* The custom model contains one or more invalid audio resources. You can correct the invalid audio resources or set the `strict` parameter to `false` to exclude the invalid resources from the training. The model must contain at least one valid resource for training to succeed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomAcousticIDPathParam"
          },
          {
            "name": "custom_language_model_id",
            "in": "query",
            "description": "The customization ID (GUID) of a custom language model that is to be used during training of the custom acoustic model. Specify a custom language model that has been trained with verbatim transcriptions of the audio resources or that contains words that are relevant to the contents of the audio resources. The custom language model must be based on the same version of the same base model as the custom acoustic model, and the custom language model must be fully trained and available. The credentials specified with the request must own both custom models.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strict",
            "in": "query",
            "description": "If `false`, allows training of the custom acoustic model to proceed as long as the model contains at least one valid audio resource. The method returns an array of `TrainingWarning` objects that lists any invalid resources. By default (`true`), training of a custom acoustic model fails (status code 400) if the model contains one or more invalid audio resources.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-sdk-exclude": true
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. Training of the custom acoustic model started successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainingResponse"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A required parameter is null or invalid, or the custom model is not ready to be trained. Specific failure messages include:\n* `No input data modified since last training`\n* `The following audio resources are invalid: '{resources}'. Fix errors before training.`\n* `Malformed GUID: '{customization_id}'`\n* `The specified custom language model '{customization_id}' is not ready for AM training and/or upgrade. Please make sure it is trained and available.`\n* `Failed to train. No base model version found in the catalog to match amVersion='{base_model_version}' of the acoustic custom model '{customization_id}' and lmVersion='{base_model_version}' of passed language custom model '{customization_id}'. Upgrading the acoustic custom model may help.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/acoustic_customizations/{customization_id}/train?custom_language_model_id={customization_id}\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "TrainAcousticModelOptions trainAcousticModelOptions =\n",
                      "  new TrainAcousticModelOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .build();\n",
                      "\n",
                      "speechToText.trainAcousticModel(trainAcousticModelOptions).execute();\n",
                      "// Poll for acoustic model status."
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const trainAcousticModelParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.trainAcousticModel(trainAcousticModelParams)\n",
                      "  .then(result => {\n",
                      "    // Poll for acoustic model status.\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.train_acoustic_model('{customization_id}')\n",
                      "# Poll for acoustic model status."
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.train_acoustic_model(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")\n",
                      "# Poll for acoustic model status."
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  _, responseErr := speechToText.TrainAcousticModel(\n",
                      "    &speechtotextv1.TrainAcousticModelOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  // Poll for acoustic model status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.trainAcousticModel(customizationID: \"{customizationId}\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  // Poll for acoustic model status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.TrainAcousticModel(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "// Poll for acoustic model status."
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "bool isComplete = false;\n",
                      "speechToText.TrainAcousticModel(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"TrainAcousticModel result: {0}\", response.Response);\n",
                      "        isComplete = true;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");\n",
                      "// Poll for acoustic model status.\n",
                      "\n",
                      "while (!isComplete)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/acoustic_customizations/{customization_id}/reset": {
      "post": {
        "tags": [
          "Custom acoustic models"
        ],
        "operationId": "resetAcousticModel",
        "summary": "Reset a custom acoustic model",
        "description": "Resets a custom acoustic model by removing all audio resources from the model. Resetting a custom acoustic model initializes the model to its state when it was first created. Metadata such as the name and language of the model are preserved, but the model's audio resources are removed and must be re-created. The service cannot reset a model while it is handling another request for the model. The service cannot accept subsequent requests for the model until the existing reset request completes. You must use credentials for the instance of the service that owns a model to reset it. \n\n**See also:** [Resetting a custom acoustic model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageAcousticModels#resetModel-acoustic).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomAcousticIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The custom acoustic model was successfully reset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid:\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/acoustic_customizations/{customization_id}/reset\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "ResetAcousticModelOptions resetAcousticModelOptions =\n",
                      "  new ResetAcousticModelOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .build();\n",
                      "\n",
                      "speechToText.resetAcousticModel(resetAcousticModelOptions).execute();\n"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const resetAcousticModelParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.resetAcousticModel(resetAcousticModelParams)\n",
                      "  .then(result => {\n",
                      "    console.log(JSON.stringify(result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.reset_acoustic_model('{customization_id}')"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.reset_acoustic_model(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  response, responseErr := speechToText.ResetAcousticModel(\n",
                      "    &speechtotextv1.ResetAcousticModelOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.resetAcousticModel(customizationID: \"{customizationId}\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.ResetAcousticModel(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "bool isComplete = false;\n",
                      "speechToText.ResetAcousticModel(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"ResetAcousticModel result: {0}\", response.Response);\n",
                      "        isComplete = true;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");\n",
                      "\n",
                      "while (!isComplete)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/acoustic_customizations/{customization_id}/upgrade_model": {
      "post": {
        "tags": [
          "Custom acoustic models"
        ],
        "operationId": "upgradeAcousticModel",
        "summary": "Upgrade a custom acoustic model",
        "description": "Initiates the upgrade of a custom acoustic model to the latest version of its base language model. The upgrade method is asynchronous. It can take on the order of minutes or hours to complete depending on the amount of data in the custom model and the current load on the service; typically, upgrade takes approximately twice the length of the total audio contained in the custom model. A custom model must be in the `ready` or `available` state to be upgraded. You must use credentials for the instance of the service that owns a model to upgrade it. \n\nThe method returns an HTTP 200 response code to indicate that the upgrade process has begun successfully. You can monitor the status of the upgrade by using the **Get a custom acoustic model** method to poll the model's status. The method returns an `AcousticModel` object that includes `status` and `progress` fields. Use a loop to check the status once a minute. While it is being upgraded, the custom model has the status `upgrading`. When the upgrade is complete, the model resumes the status that it had prior to upgrade. The service cannot upgrade a model while it is handling another request for the model. The service cannot accept subsequent requests for the model until the existing upgrade request completes. \n\nIf the custom acoustic model was trained with a separately created custom language model, you must use the `custom_language_model_id` parameter to specify the GUID of that custom language model. The custom language model must be upgraded before the custom acoustic model can be upgraded. Omit the parameter if the custom acoustic model was not trained with a custom language model. \n\n**See also:** [Upgrading a custom acoustic model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-customUpgrade#upgradeAcoustic).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomAcousticIDPathParam"
          },
          {
            "name": "custom_language_model_id",
            "in": "query",
            "description": "If the custom acoustic model was trained with a custom language model, the customization ID (GUID) of that custom language model. The custom language model must be upgraded before the custom acoustic model can be upgraded. The custom language model must be fully trained and available. The credentials specified with the request must own both custom models.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If `true`, forces the upgrade of a custom acoustic model for which no input data has been modified since it was last trained. Use this parameter only to force the upgrade of a custom acoustic model that is trained with a custom language model, and only if you receive a 400 response code and the message `No input data modified since last training`. See [Upgrading a custom acoustic model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-customUpgrade#upgradeAcoustic).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. Upgrade of the custom acoustic model started successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A parameter is null or invalid, or the specified custom model cannot be upgraded. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Custom model is up-to-date`\n* `No input data available to upgrade the model`\n* `No input data modified since last training`\n* `Cannot upgrade failed custom model`\n* `The passed language custom model needs to be upgraded in order to upgrade the acoustic custom model.`\n* `The specified custom language model '{customization_id}' is not ready for AM training and/or upgrade. Please make sure it is trained and available.`\n* `Base model name mismatch detected. Please make sure that the base model name of the language custom model matches the base model name of the acoustic custom model.`\n* `Invalid model type for customization_id '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/acoustic_customizations/{customization_id}/upgrade_model\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "UpgradeAcousticModelOptions upgradeAcousticModelOptions =\n",
                      "  new UpgradeAcousticModelOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .build();\n",
                      "\n",
                      "speechToText.upgradeAcousticModel(upgradeAcousticModelOptions).execute();\n",
                      "// Poll for acoustic model status."
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const upgradeAcousticModelParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.upgradeAcousticModel(upgradeAcousticModelParams)\n",
                      "  .then(result => {\n",
                      "    // Poll for acoustic model status.\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.upgrade_acoustic_model('{customization_id}')\n",
                      "# Poll for acoustic model status."
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.upgrade_acoustic_model(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")\n",
                      "# Poll for acoustic model status."
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  response, responseErr := speechToText.UpgradeAcousticModel(\n",
                      "    &speechtotextv1.UpgradeAcousticModelOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  // Poll for acoustic model status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.upgradeAcousticModel(customizationID: \"{customizationId}\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  // Poll for acoustic model status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.UpgradeAcousticModel(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "// Poll for acoustic model status."
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "object upgradeAcousticModelResponse = null;\n",
                      "speechToText.UpgradeAcousticModel(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"UpgradeAcousticModel result: {0}\", response.Response);\n",
                      "        upgradeAcousticModelResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");\n",
                      "// Poll for acoustic model status.\n",
                      "\n",
                      "while (upgradeAcousticModelResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/acoustic_customizations/{customization_id}/audio": {
      "get": {
        "tags": [
          "Custom audio resources"
        ],
        "operationId": "listAudio",
        "summary": "List audio resources",
        "description": "Lists information about all audio resources from a custom acoustic model. The information includes the name of the resource and information about its audio data, such as its duration. It also includes the status of the audio resource, which is important for checking the service's analysis of the resource in response to a request to add it to the custom acoustic model. You must use credentials for the instance of the service that owns a model to list its audio resources. \n\n**See also:** [Listing audio resources for a custom acoustic model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageAudio#listAudio).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomAcousticIDPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudioResources"
                },
                "examples": {
                  "response": {
                    "value": {
                      "total_minutes_of_audio": 11.45,
                      "audio": [
                        {
                          "duration": 131,
                          "name": "audio1",
                          "details": {
                            "codec": "pcm_s16le",
                            "type": "audio",
                            "frequency": 22050
                          },
                          "status": "ok"
                        },
                        {
                          "duration": 556,
                          "name": "audio2",
                          "details": {
                            "type": "archive",
                            "compression": "zip"
                          },
                          "status": "ok"
                        },
                        {
                          "duration": 0,
                          "name": "audio3",
                          "details": {},
                          "status": "being_processed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID is invalid:\n* `Malformed GUID: '{customization_id}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/acoustic_customizations/{customization_id}/audio\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "ListAudioOptions listAudioOptions = new ListAudioOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .build();\n",
                      "\n",
                      "AudioResources audioResources =\n",
                      "  speechToText.listAudio(listAudioOptions).execute().getResult();\n",
                      "System.out.println(audioResources);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const listAudioParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "};\n",
                      "\n",
                      "speechToText.listAudio(listAudioParams)\n",
                      "  .then(audioResources => {\n",
                      "    console.log(JSON.stringify(audioResources, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "audio_resources = speech_to_text.list_audio('{customization_id}').get_result()\n",
                      "print(json.dumps(audio_resources, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "audio_resources = speech_to_text.list_audio(\n",
                      "  customization_id: \"{customization_id}\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(audio_resources.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.ListAudio(\n",
                      "    &speechtotextv1.ListAudioOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.listAudio(customizationID: \"{customizationId}\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let resources = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(resources)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.ListAudio(\n",
                      "    customizationId: \"{customizationId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "AudioResources listAudioResponse = null;\n",
                      "speechToText.ListAudio(\n",
                      "    callback: (DetailedResponse<AudioResources> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1IntegrationTests\", \"ListAudio result: {0}\", response.Response);\n",
                      "        listAudioResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\"\n",
                      ");\n",
                      "\n",
                      "while (listAudioResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/acoustic_customizations/{customization_id}/audio/{audio_name}": {
      "post": {
        "tags": [
          "Custom audio resources"
        ],
        "operationId": "addAudio",
        "summary": "Add an audio resource",
        "description": "Adds an audio resource to a custom acoustic model. Add audio content that reflects the acoustic characteristics of the audio that you plan to transcribe. You must use credentials for the instance of the service that owns a model to add an audio resource to it. Adding audio data does not affect the custom acoustic model until you train the model for the new data by using the **Train a custom acoustic model** method. \n\nYou can add individual audio files or an archive file that contains multiple audio files. Adding multiple audio files via a single archive file is significantly more efficient than adding each file individually. You can add audio resources in any format that the service supports for speech recognition. \n\nYou can use this method to add any number of audio resources to a custom model by calling the method once for each audio or archive file. You can add multiple different audio resources at the same time. You must add a minimum of 10 minutes and a maximum of 200 hours of audio that includes speech, not just silence, to a custom acoustic model before you can train it. No audio resource, audio- or archive-type, can be larger than 100 MB. To add an audio resource that has the same name as an existing audio resource, set the `allow_overwrite` parameter to `true`; otherwise, the request fails. \n\nThe method is asynchronous. It can take several seconds or minutes to complete depending on the duration of the audio and, in the case of an archive file, the total number of audio files being processed. The service returns a 201 response code if the audio is valid. It then asynchronously analyzes the contents of the audio file or files and automatically extracts information about the audio such as its length, sampling rate, and encoding. You cannot submit requests to train or upgrade the model until the service's analysis of all audio resources for current requests completes. \n\nTo determine the status of the service's analysis of the audio, use the **Get an audio resource** method to poll the status of the audio. The method accepts the customization ID of the custom model and the name of the audio resource, and it returns the status of the resource. Use a loop to check the status of the audio every few seconds until it becomes `ok`. \n\n**See also:** [Add audio to the custom acoustic model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-acoustic#addAudio). \n\n### Content types for audio-type resources\n\n You can add an individual audio file in any format that the service supports for speech recognition. For an audio-type resource, use the `Content-Type` parameter to specify the audio format (MIME type) of the audio file, including specifying the sampling rate, channels, and endianness where indicated.\n* `audio/alaw` (Specify the sampling rate (`rate`) of the audio.)\n* `audio/basic` (Use only with narrowband models.)\n* `audio/flac`\n* `audio/g729` (Use only with narrowband models.)\n* `audio/l16` (Specify the sampling rate (`rate`) and optionally the number of channels (`channels`) and endianness (`endianness`) of the audio.)\n* `audio/mp3`\n* `audio/mpeg`\n* `audio/mulaw` (Specify the sampling rate (`rate`) of the audio.)\n* `audio/ogg` (The service automatically detects the codec of the input audio.)\n* `audio/ogg;codecs=opus`\n* `audio/ogg;codecs=vorbis`\n* `audio/wav` (Provide audio with a maximum of nine channels.)\n* `audio/webm` (The service automatically detects the codec of the input audio.)\n* `audio/webm;codecs=opus`\n* `audio/webm;codecs=vorbis` \n\nThe sampling rate of an audio file must match the sampling rate of the base model for the custom model: for broadband models, at least 16 kHz; for narrowband models, at least 8 kHz. If the sampling rate of the audio is higher than the minimum required rate, the service down-samples the audio to the appropriate rate. If the sampling rate of the audio is lower than the minimum required rate, the service labels the audio file as `invalid`.\n\n **See also:** [Audio formats](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-audio-formats#audio-formats). \n\n### Content types for archive-type resources\n\n You can add an archive file (**.zip** or **.tar.gz** file) that contains audio files in any format that the service supports for speech recognition. For an archive-type resource, use the `Content-Type` parameter to specify the media type of the archive file:\n* `application/zip` for a **.zip** file\n* `application/gzip` for a **.tar.gz** file. \n\nWhen you add an archive-type resource, the `Contained-Content-Type` header is optional depending on the format of the files that you are adding: \n* For audio files of type `audio/alaw`, `audio/basic`, `audio/l16`, or `audio/mulaw`, you must use the `Contained-Content-Type` header to specify the format of the contained audio files. Include the `rate`, `channels`, and `endianness` parameters where necessary. In this case, all audio files contained in the archive file must have the same audio format. \n* For audio files of all other types, you can omit the `Contained-Content-Type` header. In this case, the audio files contained in the archive file can have any of the formats not listed in the previous bullet. The audio files do not need to have the same format. \n\nDo not use the `Contained-Content-Type` header when adding an audio-type resource. \n\n### Naming restrictions for embedded audio files\n\n The name of an audio file that is contained in an archive-type resource can include a maximum of 128 characters. This includes the file extension and all elements of the name (for example, slashes).",
        "x-content-type-description": "For an audio-type resource, the format (MIME type) of the audio. For more information, see **Content types for audio-type resources** in the method description. \n\nFor an archive-type resource, the media type of the archive file. For more information, see **Content types for archive-type resources** in the method description.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomAcousticIDPathParam"
          },
          {
            "$ref": "#/components/parameters/AddAudioNamePathParam"
          },
          {
            "name": "Contained-Content-Type",
            "in": "header",
            "description": "**For an archive-type resource,** specify the format of the audio files that are contained in the archive file if they are of type `audio/alaw`, `audio/basic`, `audio/l16`, or `audio/mulaw`. Include the `rate`, `channels`, and `endianness` parameters where necessary. In this case, all audio files that are contained in the archive file must be of the indicated type. \n\nFor all other audio formats, you can omit the header. In this case, the audio files can be of multiple types as long as they are not of the types listed in the previous paragraph. \n\nThe parameter accepts all of the audio formats that are supported for use with speech recognition. For more information, see **Content types for audio-type resources** in the method description. \n\n**For an audio-type resource,** omit the header.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "audio/alaw",
                "audio/basic",
                "audio/flac",
                "audio/g729",
                "audio/l16",
                "audio/mp3",
                "audio/mpeg",
                "audio/mulaw",
                "audio/ogg",
                "audio/ogg;codecs=opus",
                "audio/ogg;codecs=vorbis",
                "audio/wav",
                "audio/webm",
                "audio/webm;codecs=opus",
                "audio/webm;codecs=vorbis"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/AllowOverwriteAudioParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/zip": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/gzip": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/alaw": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/basic": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/flac": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/g729": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/l16": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/mp3": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/mpeg": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/mulaw": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/ogg": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/ogg;codecs=opus": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/ogg;codecs=vorbis": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/wav": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/webm": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/webm;codecs=opus": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "audio/webm;codecs=vorbis": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "description": "The audio resource that is to be added to the custom acoustic model, an individual audio file or an archive file. \n\nWith the `curl` command, use the `--data-binary` option to upload the file for the request.",
          "required": true
        },
        "x-codegen-request-body-name": "audio_resource",
        "responses": {
          "201": {
            "description": "**Created**. Addition of the audio resource was successfully started. The service is analyzing the data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. A required parameter is null or invalid, the specified customization ID or audio resource is invalid, or the specified audio resource already exists. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Audio file not specified or empty`\n* `Invalid audio format detected`\n* `Invalid or missing audio content type`\n* `Audio '{name}' already exists - change its name, remove existing file before adding new one, or overwrite existing file by setting 'allow_overwrite' flag to 'true'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "405": {
            "description": "**Method Not Allowed**. The audio resource name includes characters that need to be URL-encoded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request. You can also receive status code 500 `Forwarding Error` if the service is currently busy handling a previous request for the custom model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" ",
                      "--header \"Content-Type: audio/wav\" ",
                      "--data-binary @audio1.wav ",
                      "\"{url}/v1/acoustic_customizations/{customization_id}/audio/audio1\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "try {\n",
                      "  AddAudioOptions addAudioOptions = new AddAudioOptions.Builder()\n",
                      "    .customizationId(\"{customizationId}\")\n",
                      "    .contentType(\"audio/wav\")\n",
                      "    .audioResource(new File(\"audio1.wav\"))\n",
                      "    .audioName(\"audio1\")\n",
                      "    .build();\n",
                      "\n",
                      "  speechToText.addAudio(addAudioOptions).execute();\n",
                      "  // Poll for audio status.\n",
                      "} catch (FileNotFoundException e) {\n",
                      "  e.printStackTrace();\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const fs = require('fs');\n",
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const addAudioParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  contentType: 'audio/wav',\n",
                      "  audioResource: fs.createReadStream('./audio1.wav'),\n",
                      "  audioName: 'audio1',\n",
                      "};\n",
                      "\n",
                      "speechToText.addAudio(addAudioParams)\n",
                      "  .then(result => {\n",
                      "    // Poll for audio status.\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from os.path import join, dirname\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "with open(join(dirname(__file__), './.', 'audio1.wav'),\n",
                      "               'rb') as audio_file:\n",
                      "    speech_to_text.add_audio(\n",
                      "        '{customization_id}',\n",
                      "        'audio1',\n",
                      "        audio_file,\n",
                      "        content_type='audio/wav'\n",
                      "    )\n",
                      "# Poll for audio status."
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "File.open(\"audio1.wav\") do |audio_file|\n",
                      "  speech_to_text.add_audio(\n",
                      "    customization_id: \"{customization_id}\",\n",
                      "    audio_name: \"audio1\",\n",
                      "    audio_resource: audio_file,\n",
                      "    content_type: \"audio/wav\"\n",
                      "  )\n",
                      "end\n",
                      "# Poll for audio status."
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"io\"\n",
                      "  \"os\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  var audioFile io.ReadCloser\n",
                      "  var audioFileErr error\n",
                      "  audioFile, audioFileErr = os.Open(\"audio1.wav\")\n",
                      "  if audioFileErr != nil {\n",
                      "    panic(audioFileErr)\n",
                      "  }\n",
                      "\n",
                      "  _, responseErr := speechToText.AddAudio(\n",
                      "    &speechtotextv1.AddAudioOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      AudioName:       core.StringPtr(\"audio1\"),\n",
                      "      AudioResource:   audioFile,\n",
                      "      ContentType:     core.StringPtr(\"audio/wav\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  // Poll for audio status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "let audio1 = Data(contentsOf: Bundle.main.url(forResource: \"audio1\", withExtension: \"wav\")!)\n",
                      "speechToText.addAudio(\n",
                      "  customizationID: \"{customizationId}\",\n",
                      "  audioName: \"audio1\",\n",
                      "  audioResource: audio1,\n",
                      "  contentType: \"audio/wav\")\n",
                      "{\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  // Poll for audio status.\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.AddAudio(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    contentType: \"audio/wav\",\n",
                      "    audioResource: File.ReadAllBytes(\"audio1.wav\"),\n",
                      "    audioName: \"audio1\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "// Poll for audio status."
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "bool isComplete = false;\n",
                      "speechToText.AddAudio(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1IntegrationTests\", \"AddAudio result: {0}\", response.Response);\n",
                      "        Assert.IsTrue(response.StatusCode == 201);\n",
                      "        Assert.IsNull(error);\n",
                      "        isComplete = true;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    contentType: \"audio/wav\",\n",
                      "    audioResource: File.ReadAllBytes(\"audio1.wav\"),\n",
                      "    audioName: \"audio1\"\n",
                      ");\n",
                      "// Poll for audio status.\n",
                      "\n",
                      "while (!isComplete)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "tags": [
          "Custom audio resources"
        ],
        "operationId": "getAudio",
        "summary": "Get an audio resource",
        "description": "Gets information about an audio resource from a custom acoustic model. The method returns an `AudioListing` object whose fields depend on the type of audio resource that you specify with the method's `audio_name` parameter:\n* **For an audio-type resource,** the object's fields match those of an `AudioResource` object: `duration`, `name`, `details`, and `status`.\n* **For an archive-type resource,** the object includes a `container` field whose fields match those of an `AudioResource` object. It also includes an `audio` field, which contains an array of `AudioResource` objects that provides information about the audio files that are contained in the archive. \n\nThe information includes the status of the specified audio resource. The status is important for checking the service's analysis of a resource that you add to the custom model.\n* For an audio-type resource, the `status` field is located in the `AudioListing` object.\n* For an archive-type resource, the `status` field is located in the `AudioResource` object that is returned in the `container` field. \n\nYou must use credentials for the instance of the service that owns a model to list its audio resources. \n\n**See also:** [Listing audio resources for a custom acoustic model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageAudio#listAudio).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomAcousticIDPathParam"
          },
          {
            "$ref": "#/components/parameters/AudioNamePathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudioListing"
                },
                "examples": {
                  "response": {
                    "value": {
                      "container": {
                        "duration": 556,
                        "name": "audio2",
                        "details": {
                          "type": "archive",
                          "compression": "zip"
                        },
                        "status": "ok"
                      },
                      "audio": [
                        {
                          "duration": 121,
                          "name": "audio-file1.wav",
                          "details": {
                            "codec": "pcm_s16le",
                            "type": "audio",
                            "frequency": 16000
                          },
                          "status": "ok"
                        },
                        {
                          "duration": 133,
                          "name": "audio-file2.wav",
                          "details": {
                            "codec": "pcm_s16le",
                            "type": "audio",
                            "frequency": 16000
                          },
                          "status": "ok"
                        },
                        {
                          "duration": 112,
                          "name": "audio-file3.wav",
                          "details": {
                            "codec": "pcm_s16le",
                            "type": "audio",
                            "frequency": 16000
                          },
                          "status": "ok"
                        },
                        {
                          "duration": 129,
                          "name": "audio-file4.wav",
                          "details": {
                            "codec": "pcm_s16le",
                            "type": "audio",
                            "frequency": 16000
                          },
                          "status": "ok"
                        },
                        {
                          "duration": 61,
                          "name": "audio-file5.wav",
                          "details": {
                            "codec": "pcm_s16le",
                            "type": "audio",
                            "frequency": 16000
                          },
                          "status": "ok"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID or audio resource name is invalid, including the case where the audio resource does not exist for the custom model. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Invalid value for audio name '{audio_name}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/acoustic_customizations/{customization_id}/audio/audio2\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "GetAudioOptions getAudioOptions = new GetAudioOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .audioName(\"audio2\")\n",
                      "  .build();\n",
                      "\n",
                      "AudioListing audioListing =\n",
                      "  speechToText.getAudio(getAudioOptions).execute().getResult();\n",
                      "System.out.println(audioListing);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const getAudioParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  audioName: 'audio2',\n",
                      "};\n",
                      "\n",
                      "speechToText.getAudio(getAudioParams)\n",
                      "  .then(audioListing => {\n",
                      "    console.log(JSON.stringify(audioListing, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "audio_listing = speech_to_text.get_audio(\n",
                      "    '{customization_id}',\n",
                      "    'audio2'\n",
                      ").get_result()\n",
                      "print(json.dumps(audio_listing, indent=2))"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"json\"\n",
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "audio_listing = speech_to_text.get_audio(\n",
                      "  customization_id: \"{customization_id}\",\n",
                      "  audio_name: \"audio2\"\n",
                      ")\n",
                      "puts JSON.pretty_generate(audio_listing.result)"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"encoding/json\"\n",
                      "  \"fmt\"\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  result, response, responseErr := speechToText.GetAudio(\n",
                      "    &speechtotextv1.GetAudioOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      AudioName:       core.StringPtr(\"audio1\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                      "  fmt.Println(string(b))\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.getAudio(customizationID: \"{customizationId}\", audioName: \"audio2\") {\n",
                      "  response, error in\n",
                      "\n",
                      "  guard let listing = response?.result else {\n",
                      "    print(error?.localizedDescription ?? \"unknown error\")\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "  print(listing)\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.GetAudio(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    audioName: \"audio2\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "AudioListing getAudioResponse = null;\n",
                      "speechToText.GetAudio(\n",
                      "    callback: (DetailedResponse<AudioListing> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"GetAudio result: {0}\", response.Response);\n",
                      "        getAudioResponse = response.Result;\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    audioName: \"audio2\"\n",
                      ");\n",
                      "\n",
                      "while (getAudioResponse == null)\n",
                      "{\n",
                      "    yield return null;\n",
                      "}"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "tags": [
          "Custom audio resources"
        ],
        "operationId": "deleteAudio",
        "summary": "Delete an audio resource",
        "description": "Deletes an existing audio resource from a custom acoustic model. Deleting an archive-type audio resource removes the entire archive of files. The service does not allow deletion of individual files from an archive resource. \n\nRemoving an audio resource does not affect the custom model until you train the model on its updated data by using the **Train a custom acoustic model** method. You can delete an existing audio resource from a model while a different resource is being added to the model. You must use credentials for the instance of the service that owns a model to delete its audio resources. \n\n**See also:** [Deleting an audio resource from a custom acoustic model](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-manageAudio#deleteAudio).",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomAcousticIDPathParam"
          },
          {
            "$ref": "#/components/parameters/AudioNamePathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The audio resource was successfully deleted from the custom acoustic model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponseBody"
                },
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The specified customization ID or audio resource name is invalid, including the case where the audio resource does not exist for the custom model. Specific failure messages include:\n* `Malformed GUID: '{customization_id}'`\n* `Invalid value for audio name '{audio_name}'`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**. The specified credentials are invalid or the specified customization ID is invalid for the requesting credentials:\n* `Invalid customization_id '{customization_id}' for user`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "405": {
            "description": "**Method Not Allowed**. No audio resource name was specified with the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "**Conflict**. The service is currently busy handling a previous request for the custom model:\n* `Customization '{customization_id}' is currently locked to process your last request.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "**Internal Server Error**. An internal error prevented the service from satisfying the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/acoustic_customizations/{customization_id}/audio/audio1\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "DeleteAudioOptions deleteAudioOptions = new DeleteAudioOptions.Builder()\n",
                      "  .customizationId(\"{customizationId}\")\n",
                      "  .audioName(\"audio1\")\n",
                      "  .build();\n",
                      "\n",
                      "speechToText.deleteAudio(deleteAudioOptions).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const deleteAudioParams = {\n",
                      "  customizationId: '{customization_id}',\n",
                      "  audioName: 'audio1',\n",
                      "};\n",
                      "\n",
                      "speechToText.deleteAudio(deleteAudioParams)\n",
                      "  .then(result => {\n",
                      "    console.log(JSON.stringify(result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.delete_audio(\n",
                      "    '{customization_id}',\n",
                      "    'audio1'\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.delete_audio(\n",
                      "  customization_id: \"{customization_id}\",\n",
                      "  audio_name: \"audio1\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  _, responseErr := speechToText.DeleteAudio(\n",
                      "    &speechtotextv1.DeleteAudioOptions{\n",
                      "      CustomizationID: core.StringPtr(\"{customization_id}\"),\n",
                      "      AudioName:       core.StringPtr(\"audio1\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.deleteAudio(customizationID: \"{customizationId}\", audioName: \"audio1\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.DeleteAudio(\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    audioName: \"audio1\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.StatusCode);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.DeleteAudio(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"DeleteAudio result: {0}\", response.Response);\n",
                      "    },\n",
                      "    customizationId: \"{customizationId}\",\n",
                      "    audioName: \"audio1\"\n",
                      ");"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/user_data": {
      "delete": {
        "tags": [
          "User data"
        ],
        "operationId": "deleteUserData",
        "summary": "Delete labeled data",
        "description": "Deletes all data that is associated with a specified customer ID. The method deletes all data for the customer ID, regardless of the method by which the information was added. The method has no effect if no data is associated with the customer ID. You must issue the request with credentials for the same instance of the service that was used to associate the customer ID with the data. \n\nYou associate a customer ID with data by passing the `X-Watson-Metadata` header with a request that passes the data. \n\n**See also:** [Information security](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-information-security#information-security).",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "description": "The customer ID for which all data is to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**. The deletion request was successfully submitted."
          },
          "400": {
            "description": "**Bad Request**. The request did not pass a customer ID:\n* `No customer ID found in the request`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" ",
                      "\"{url}/v1/user_data?customer_id={customer_ID}\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "SpeechToText speechToText = new SpeechToText(authenticator);\n",
                      "speechToText.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "DeleteUserDataOptions deleteUserDataOptions = new DeleteUserDataOptions.Builder()\n",
                      "  .customer_id(\"{customer_ID}\")\n",
                      "  .build();\n",
                      "\n",
                      "speechToText.deleteUserData(deleteUserDataOptions).execute();\n"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const SpeechToTextV1 = require('ibm-watson/speech-to-text/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const speechToText = new SpeechToTextV1({\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  url: '{url}',\n",
                      "});\n",
                      "\n",
                      "const deleteUserDataParams = {\n",
                      "  customerId: '{customer_ID}',\n",
                      "};\n",
                      "\n",
                      "speechToText.deleteUserData(deleteUserDataParams)\n",
                      "  .then(result => {\n",
                      "    // Response is empty.\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "from ibm_watson import SpeechToTextV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "speech_to_text = SpeechToTextV1(\n",
                      "    authenticator=authenticator\n",
                      ")\n",
                      "\n",
                      "speech_to_text.set_service_url('{url}')\n",
                      "\n",
                      "speech_to_text.delete_user_data('{customer_ID}')"
                    ]
                  }
                ]
              }
            ],
            "ruby": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"ibm_watson/authenticators\"\n",
                      "require \"ibm_watson/speech_to_text_v1\"\n",
                      "include IBMWatson\n",
                      "\n",
                      "authenticator = Authenticators::IamAuthenticator.new(\n",
                      "  apikey: \"{apikey}\"\n",
                      ")\n",
                      "\n",
                      "speech_to_text = SpeechToTextV1.new(\n",
                      "  authenticator: authenticator\n",
                      ")\n",
                      "speech_to_text.service_url = \"{url}\"\n",
                      "\n",
                      "speech_to_text.delete_user_data(\n",
                      "  customer_id: \"{customer_ID}\"\n",
                      ")"
                    ]
                  }
                ]
              }
            ],
            "go": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n",
                      "\n",
                      "import (\n",
                      "  \"github.com/IBM/go-sdk-core/core\"\n",
                      "  \"github.com/watson-developer-cloud/go-sdk/speechtotextv1\"\n",
                      ")\n",
                      "\n",
                      "func main() {\n",
                      "  authenticator := &core.IamAuthenticator{\n",
                      "    ApiKey:     \"{apikey}\",\n",
                      "  }\n",
                      "\n",
                      "  options := &speechtotextv1.SpeechToTextV1Options{\n",
                      "    Authenticator: authenticator,\n",
                      "  }\n",
                      "\n",
                      "  speechToText, speechToTextErr := speechtotextv1.NewSpeechToTextV1(options)\n",
                      "\n",
                      "  if speechToTextErr != nil {\n",
                      "    panic(speechToTextErr)\n",
                      "  }\n",
                      "\n",
                      "  speechToText.SetServiceURL(\"{url}\")\n",
                      "\n",
                      "  response, responseErr := speechToText.DeleteUserData(\n",
                      "    &speechtotextv1.DeleteUserDataOptions{\n",
                      "      CustomerID: core.StringPtr(\"{customer_ID}\"),\n",
                      "    },\n",
                      "  )\n",
                      "  if responseErr != nil {\n",
                      "    panic(responseErr)\n",
                      "  }\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "swift": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                      "let speechToText = SpeechToText(authenticator: authenticator)\n",
                      "speechToText.serviceURL = \"{url}\"\n",
                      "\n",
                      "speechToText.deleteUserData(customerID: \"{customer_ID}\") {\n",
                      "  _, error in\n",
                      "\n",
                      "  if let error = error {\n",
                      "    print(error.localizedDescription)\n",
                      "    return\n",
                      "  }\n",
                      "\n",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "SpeechToTextService speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = speechToText.DeleteUserData(\n",
                      "    customerId: \"customer_ID\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.StatusCode);"
                    ]
                  }
                ]
              }
            ],
            "unity": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      ");\n",
                      "\n",
                      "while (!authenticator.CanAuthenticate())\n",
                      "    yield return null;\n",
                      "\n",
                      "var speechToText = new SpeechToTextService(authenticator);\n",
                      "speechToText.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "speechToText.DeleteUserData(\n",
                      "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                      "    {\n",
                      "        Log.Debug(\"SpeechToTextServiceV1\", \"DeleteUserData result: {0}\", response.Response);\n",
                      "    },\n",
                      "    customerId: \"customer_ID\"\n",
                      ");"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "/speech-to-text/api"
    }
  ],
  "components": {
    "parameters": {
      "ModelIDPathParam": {
        "name": "model_id",
        "in": "path",
        "description": "The identifier of the model in the form of its name from the output of the **Get a model** method.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "ar-AR_BroadbandModel",
            "de-DE_BroadbandModel",
            "de-DE_NarrowbandModel",
            "en-GB_BroadbandModel",
            "en-GB_NarrowbandModel",
            "en-US_BroadbandModel",
            "en-US_NarrowbandModel",
            "en-US_ShortForm_NarrowbandModel",
            "es-AR_BroadbandModel",
            "es-AR_NarrowbandModel",
            "es-CL_BroadbandModel",
            "es-CL_NarrowbandModel",
            "es-CO_BroadbandModel",
            "es-CO_NarrowbandModel",
            "es-ES_BroadbandModel",
            "es-ES_NarrowbandModel",
            "es-MX_BroadbandModel",
            "es-MX_NarrowbandModel",
            "es-PE_BroadbandModel",
            "es-PE_NarrowbandModel",
            "fr-FR_BroadbandModel",
            "fr-FR_NarrowbandModel",
            "it-IT_BroadbandModel",
            "it-IT_NarrowbandModel",
            "ja-JP_BroadbandModel",
            "ja-JP_NarrowbandModel",
            "ko-KR_BroadbandModel",
            "ko-KR_NarrowbandModel",
            "nl-NL_BroadbandModel",
            "nl-NL_NarrowbandModel",
            "pt-BR_BroadbandModel",
            "pt-BR_NarrowbandModel",
            "zh-CN_BroadbandModel",
            "zh-CN_NarrowbandModel"
          ]
        }
      },
      "JobIDPathParam": {
        "name": "id",
        "in": "path",
        "description": "The identifier of the asynchronous job that is to be used for the request. You must make the request with credentials for the instance of the service that owns the job.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CustomLanguageIDPathParam": {
        "name": "customization_id",
        "in": "path",
        "description": "The customization ID (GUID) of the custom language model that is to be used for the request. You must make the request with credentials for the instance of the service that owns the custom model.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "AddCorpusNamePathParam": {
        "name": "corpus_name",
        "in": "path",
        "description": "The name of the new corpus for the custom language model. Use a localized name that matches the language of the custom model and reflects the contents of the corpus.\n* Include a maximum of 128 characters in the name.\n* Do not use characters that need to be URL-encoded. For example, do not use spaces, slashes, backslashes, colons, ampersands, double quotes, plus signs, equals signs, questions marks, and so on in the name. (The service does not prevent the use of these characters. But because they must be URL-encoded wherever used, their use is strongly discouraged.)\n* Do not use the name of an existing corpus or grammar that is already defined for the custom model.\n* Do not use the name `user`, which is reserved by the service to denote custom words that are added or modified by the user.\n* Do not use the name `base_lm` or `default_lm`. Both names are reserved for future use by the service.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CorpusNamePathParam": {
        "name": "corpus_name",
        "in": "path",
        "description": "The name of the corpus for the custom language model.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "AddGrammarNamePathParam": {
        "name": "grammar_name",
        "in": "path",
        "description": "The name of the new grammar for the custom language model. Use a localized name that matches the language of the custom model and reflects the contents of the grammar.\n* Include a maximum of 128 characters in the name.\n* Do not use characters that need to be URL-encoded. For example, do not use spaces, slashes, backslashes, colons, ampersands, double quotes, plus signs, equals signs, questions marks, and so on in the name. (The service does not prevent the use of these characters. But because they must be URL-encoded wherever used, their use is strongly discouraged.)\n* Do not use the name of an existing grammar or corpus that is already defined for the custom model.\n* Do not use the name `user`, which is reserved by the service to denote custom words that are added or modified by the user.\n* Do not use the name `base_lm` or `default_lm`. Both names are reserved for future use by the service.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "GrammarNamePathParam": {
        "name": "grammar_name",
        "in": "path",
        "description": "The name of the grammar for the custom language model.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CustomAcousticIDPathParam": {
        "name": "customization_id",
        "in": "path",
        "description": "The customization ID (GUID) of the custom acoustic model that is to be used for the request. You must make the request with credentials for the instance of the service that owns the custom model.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "AddAudioNamePathParam": {
        "name": "audio_name",
        "in": "path",
        "description": "The name of the new audio resource for the custom acoustic model. Use a localized name that matches the language of the custom model and reflects the contents of the resource.\n* Include a maximum of 128 characters in the name.\n* Do not use characters that need to be URL-encoded. For example, do not use spaces, slashes, backslashes, colons, ampersands, double quotes, plus signs, equals signs, questions marks, and so on in the name. (The service does not prevent the use of these characters. But because they must be URL-encoded wherever used, their use is strongly discouraged.)\n* Do not use the name of an audio resource that has already been added to the custom model.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "AudioNamePathParam": {
        "name": "audio_name",
        "in": "path",
        "description": "The name of the audio resource for the custom acoustic model.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CustomLanguageIDRecognizeParam": {
        "name": "language_customization_id",
        "in": "query",
        "description": "The customization ID (GUID) of a custom language model that is to be used with the recognition request. The base model of the specified custom language model must match the model specified with the `model` parameter. You must make the request with credentials for the instance of the service that owns the custom model. By default, no custom language model is used. See [Custom models](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#custom-input). \n\n**Note:** Use this parameter instead of the deprecated `customization_id` parameter.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "CustomAcousticIDRecognizeParam": {
        "name": "acoustic_customization_id",
        "in": "query",
        "description": "The customization ID (GUID) of a custom acoustic model that is to be used with the recognition request. The base model of the specified custom acoustic model must match the model specified with the `model` parameter. You must make the request with credentials for the instance of the service that owns the custom model. By default, no custom acoustic model is used. See [Custom models](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#custom-input).",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "BaseModelVersionParam": {
        "name": "base_model_version",
        "in": "query",
        "description": "The version of the specified base model that is to be used with the recognition request. Multiple versions of a base model can exist when a model is updated for internal improvements. The parameter is intended primarily for use with custom models that have been upgraded for a new base model. The default value depends on whether the parameter is used with or without a custom model. See [Base model version](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#version).",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "CustomizationWeightRecognizeParam": {
        "name": "customization_weight",
        "in": "query",
        "description": "If you specify the customization ID (GUID) of a custom language model with the recognition request, the customization weight tells the service how much weight to give to words from the custom language model compared to those from the base model for the current request. \n\nSpecify a value between 0.0 and 1.0. Unless a different customization weight was specified for the custom model when it was trained, the default value is 0.3. A customization weight that you specify overrides a weight that was specified when the custom model was trained. \n\nThe default value yields the best performance in general. Assign a higher value if your audio makes frequent use of OOV words from the custom model. Use caution when setting the weight: a higher value can improve the accuracy of phrases from the custom model's domain, but it can negatively affect performance on non-domain phrases. \n\nSee [Custom models](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#custom-input).",
        "required": false,
        "schema": {
          "type": "number",
          "format": "double"
        }
      },
      "CustomizationWeightParam": {
        "name": "customization_weight",
        "in": "query",
        "description": "Specifies a customization weight for the custom language model. The customization weight tells the service how much weight to give to words from the custom language model compared to those from the base model for speech recognition. Specify a value between 0.0 and 1.0; the default is 0.3. \n\nThe default value yields the best performance in general. Assign a higher value if your audio makes frequent use of OOV words from the custom model. Use caution when setting the weight: a higher value can improve the accuracy of phrases from the custom model's domain, but it can negatively affect performance on non-domain phrases. \n\nThe value that you assign is used for all recognition requests that use the model. You can override it for any recognition request by specifying a customization weight for that request.",
        "required": false,
        "schema": {
          "type": "number",
          "format": "double",
          "default": 0.3
        }
      },
      "TransferEncodingParam": {
        "name": "Transfer-Encoding",
        "in": "header",
        "description": "Set to `chunked` to send the audio in streaming mode. The data does not need to exist fully before being streamed to the service. See [Audio transmission](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#transmission).",
        "required": false,
        "x-sdk-exclude": true,
        "schema": {
          "type": "string",
          "enum": [
            "chunked"
          ]
        }
      },
      "ModelParam": {
        "name": "model",
        "in": "query",
        "description": "The identifier of the model that is to be used for the recognition request. See [Languages and models](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-models#models).",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "ar-AR_BroadbandModel",
            "de-DE_BroadbandModel",
            "de-DE_NarrowbandModel",
            "en-GB_BroadbandModel",
            "en-GB_NarrowbandModel",
            "en-US_BroadbandModel",
            "en-US_NarrowbandModel",
            "en-US_ShortForm_NarrowbandModel",
            "es-AR_BroadbandModel",
            "es-AR_NarrowbandModel",
            "es-CL_BroadbandModel",
            "es-CL_NarrowbandModel",
            "es-CO_BroadbandModel",
            "es-CO_NarrowbandModel",
            "es-ES_BroadbandModel",
            "es-ES_NarrowbandModel",
            "es-MX_BroadbandModel",
            "es-MX_NarrowbandModel",
            "es-PE_BroadbandModel",
            "es-PE_NarrowbandModel",
            "fr-FR_BroadbandModel",
            "fr-FR_NarrowbandModel",
            "it-IT_BroadbandModel",
            "it-IT_NarrowbandModel",
            "ja-JP_BroadbandModel",
            "ja-JP_NarrowbandModel",
            "ko-KR_BroadbandModel",
            "ko-KR_NarrowbandModel",
            "nl-NL_BroadbandModel",
            "nl-NL_NarrowbandModel",
            "pt-BR_BroadbandModel",
            "pt-BR_NarrowbandModel",
            "zh-CN_BroadbandModel",
            "zh-CN_NarrowbandModel"
          ],
          "default": "en-US_BroadbandModel"
        }
      },
      "InactivityTimeoutParam": {
        "name": "inactivity_timeout",
        "in": "query",
        "description": "The time in seconds after which, if only silence (no speech) is detected in streaming audio, the connection is closed with a 400 error. The parameter is useful for stopping audio submission from a live microphone when a user simply walks away. Use `-1` for infinity. See [Inactivity timeout](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#timeouts-inactivity).",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 30
        }
      },
      "KeywordsParam": {
        "name": "keywords",
        "in": "query",
        "description": "An array of keyword strings to spot in the audio. Each keyword string can include one or more string tokens. Keywords are spotted only in the final results, not in interim hypotheses. If you specify any keywords, you must also specify a keywords threshold. Omit the parameter or specify an empty array if you do not need to spot keywords. \n\nYou can spot a maximum of 1000 keywords with a single request. A single keyword can have a maximum length of 1024 characters, though the maximum effective length for double-byte languages might be shorter. Keywords are case-insensitive. \n\nSee [Keyword spotting](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#keyword_spotting).",
        "required": false,
        "x-item-name": "keyword",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "KeywordsThresholdParam": {
        "name": "keywords_threshold",
        "in": "query",
        "description": "A confidence value that is the lower bound for spotting a keyword. A word is considered to match a keyword if its confidence is greater than or equal to the threshold. Specify a probability between 0.0 and 1.0. If you specify a threshold, you must also specify one or more keywords. The service performs no keyword spotting if you omit either parameter. See [Keyword spotting](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#keyword_spotting).",
        "required": false,
        "schema": {
          "type": "number",
          "format": "float"
        }
      },
      "MaxAlternativesParam": {
        "name": "max_alternatives",
        "in": "query",
        "description": "The maximum number of alternative transcripts that the service is to return. By default, the service returns a single transcript. If you specify a value of `0`, the service uses the default value, `1`. See [Maximum alternatives](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#max_alternatives).",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 1
        }
      },
      "WordAlternativesThresholdParam": {
        "name": "word_alternatives_threshold",
        "in": "query",
        "description": "A confidence value that is the lower bound for identifying a hypothesis as a possible word alternative (also known as \"Confusion Networks\"). An alternative word is considered if its confidence is greater than or equal to the threshold. Specify a probability between 0.0 and 1.0. By default, the service computes no alternative words. See [Word alternatives](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#word_alternatives).",
        "required": false,
        "schema": {
          "type": "number",
          "format": "float"
        }
      },
      "WordConfidenceParam": {
        "name": "word_confidence",
        "in": "query",
        "description": "If `true`, the service returns a confidence measure in the range of 0.0 to 1.0 for each word. By default, the service returns no word confidence scores. See [Word confidence](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#word_confidence).",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "TimestampsParam": {
        "name": "timestamps",
        "in": "query",
        "description": "If `true`, the service returns time alignment for each word. By default, no timestamps are returned. See [Word timestamps](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#word_timestamps).",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "ProfanityFilterParam": {
        "name": "profanity_filter",
        "in": "query",
        "description": "If `true`, the service filters profanity from all output except for keyword results by replacing inappropriate words with a series of asterisks. Set the parameter to `false` to return results with no censoring. Applies to US English transcription only. See [Profanity filtering](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#profanity_filter).",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "SmartFormattingParam": {
        "name": "smart_formatting",
        "in": "query",
        "description": "If `true`, the service converts dates, times, series of digits and numbers, phone numbers, currency values, and internet addresses into more readable, conventional representations in the final transcript of a recognition request. For US English, the service also converts certain keyword strings to punctuation symbols. By default, the service performs no smart formatting. \n\n**Note:** Applies to US English, Japanese, and Spanish transcription only. \n\nSee [Smart formatting](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#smart_formatting).",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "SpeakerLabelsParam": {
        "name": "speaker_labels",
        "in": "query",
        "description": "If `true`, the response includes labels that identify which words were spoken by which participants in a multi-person exchange. By default, the service returns no speaker labels. Setting `speaker_labels` to `true` forces the `timestamps` parameter to be `true`, regardless of whether you specify `false` for the parameter. \n\n**Note:** Applies to US English, German, Japanese, Korean, and Spanish (both broadband and narrowband models) and UK English (narrowband model) transcription only. To determine whether a language model supports speaker labels, you can also use the **Get a model** method and check that the attribute `speaker_labels` is set to `true`. \n\nSee [Speaker labels](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#speaker_labels).",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "CustomizationIDRecognizeParam": {
        "name": "customization_id",
        "in": "query",
        "deprecated": true,
        "description": "**Deprecated.** Use the `language_customization_id` parameter to specify the customization ID (GUID) of a custom language model that is to be used with the recognition request. Do not specify both parameters with a request.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "GrammarNameParam": {
        "name": "grammar_name",
        "in": "query",
        "description": "The name of a grammar that is to be used with the recognition request. If you specify a grammar, you must also use the `language_customization_id` parameter to specify the name of the custom language model for which the grammar is defined. The service recognizes only strings that are recognized by the specified grammar; it does not recognize other custom words from the model's words resource. See [Grammars](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#grammars-input).",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "RedactionParam": {
        "name": "redaction",
        "in": "query",
        "description": "If `true`, the service redacts, or masks, numeric data from final transcripts. The feature redacts any number that has three or more consecutive digits by replacing each digit with an `X` character. It is intended to redact sensitive numeric data, such as credit card numbers. By default, the service performs no redaction. \n\nWhen you enable redaction, the service automatically enables smart formatting, regardless of whether you explicitly disable that feature. To ensure maximum security, the service also disables keyword spotting (ignores the `keywords` and `keywords_threshold` parameters) and returns only a single final transcript (forces the `max_alternatives` parameter to be `1`). \n\n**Note:** Applies to US English, Japanese, and Korean transcription only. \n\nSee [Numeric redaction](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#redaction).",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "ProcessingMetricsParam": {
        "name": "processing_metrics",
        "in": "query",
        "description": "If `true`, requests processing metrics about the service's transcription of the input audio. The service returns processing metrics at the interval specified by the `processing_metrics_interval` parameter. It also returns processing metrics for transcription events, for example, for final and interim results. By default, the service returns no processing metrics. \n\nSee [Processing metrics](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-metrics#processing_metrics).",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "ProcessingMetricsIntervalParam": {
        "name": "processing_metrics_interval",
        "in": "query",
        "description": "Specifies the interval in real wall-clock seconds at which the service is to return processing metrics. The parameter is ignored unless the `processing_metrics` parameter is set to `true`. \n\nThe parameter accepts a minimum value of 0.1 seconds. The level of precision is not restricted, so you can specify values such as 0.25 and 0.125. \n\nThe service does not impose a maximum value. If you want to receive processing metrics only for transcription events instead of at periodic intervals, set the value to a large number. If the value is larger than the duration of the audio, the service returns processing metrics only for transcription events. \n\nSee [Processing metrics](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-metrics#processing_metrics).",
        "required": false,
        "schema": {
          "type": "number",
          "format": "float",
          "default": 1
        }
      },
      "AudioMetricsParam": {
        "name": "audio_metrics",
        "in": "query",
        "description": "If `true`, requests detailed information about the signal characteristics of the input audio. The service returns audio metrics with the final transcription results. By default, the service returns no audio metrics. \n\nSee [Audio metrics](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-metrics#audio_metrics).",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "SilenceTimeParam": {
        "name": "end_of_phrase_silence_time",
        "in": "query",
        "description": "If `true`, specifies the duration of the pause interval at which the service splits a transcript into multiple final results. If the service detects pauses or extended silence before it reaches the end of the audio stream, its response can include multiple final results. Silence indicates a point at which the speaker pauses between spoken words or phrases. \n\nSpecify a value for the pause interval in the range of 0.0 to 120.0.\n* A value greater than 0 specifies the interval that the service is to use for speech recognition.\n* A value of 0 indicates that the service is to use the default interval. It is equivalent to omitting the parameter. \n\nThe default pause interval for most languages is 0.8 seconds; the default for Chinese is 0.6 seconds. \n\nSee [End of phrase silence time](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#silence_time).",
        "required": false,
        "schema": {
          "type": "number",
          "format": "double",
          "default": 0.8
        }
      },
      "SplitTranscriptParam": {
        "name": "split_transcript_at_phrase_end",
        "in": "query",
        "description": "If `true`, directs the service to split the transcript into multiple final results based on semantic features of the input, for example, at the conclusion of meaningful phrases such as sentences. The service bases its understanding of semantic features on the base language model that you use with a request. Custom language models and grammars can also influence how and where the service splits a transcript. By default, the service splits transcripts based solely on the pause interval. \n\nSee [Split transcript at phrase end](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-output#split_transcript).",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "SpeechDetectorSensitivityParam": {
        "name": "speech_detector_sensitivity",
        "in": "query",
        "description": "The sensitivity of speech activity detection that the service is to perform. Use the parameter to suppress word insertions from music, coughing, and other non-speech events. The service biases the audio it passes for speech recognition by evaluating the input audio against prior models of speech and non-speech activity. \n\nSpecify a value between 0.0 and 1.0:\n* 0.0 suppresses all audio (no speech is transcribed).\n* 0.5 (the default) provides a reasonable compromise for the level of sensitivity.\n* 1.0 suppresses no audio (speech detection sensitivity is disabled). \n\nThe values increase on a monotonic curve. See [Speech Activity Detection](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#detection).",
        "required": false,
        "schema": {
          "type": "number",
          "format": "float",
          "default": 0.5
        },
        "x-sdk-exclude": true
      },
      "BackgroundAudioSuppressionParam": {
        "name": "background_audio_suppression",
        "in": "query",
        "description": "The level to which the service is to suppress background audio based on its volume to prevent it from being transcribed as speech. Use the parameter to suppress side conversations or background noise. \n\nSpecify a value in the range of 0.0 to 1.0:\n* 0.0 (the default) provides no suppression (background audio suppression is disabled).\n* 0.5 provides a reasonable level of audio suppression for general usage.\n* 1.0 suppresses all audio (no audio is transcribed). \n\nThe values increase on a monotonic curve. See [Speech Activity Detection](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-input#detection).",
        "required": false,
        "schema": {
          "type": "number",
          "format": "float",
          "default": 0
        },
        "x-sdk-exclude": true
      },
      "CustomizationLanguageParam": {
        "name": "language",
        "in": "query",
        "description": "The identifier of the language for which custom language or custom acoustic models are to be returned (for example, `en-US`). Omit the parameter to see all custom language or custom acoustic models that are owned by the requesting credentials.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "AllowOverwriteCorpusParam": {
        "name": "allow_overwrite",
        "in": "query",
        "description": "If `true`, the specified corpus overwrites an existing corpus with the same name. If `false`, the request fails if a corpus with the same name already exists. The parameter has no effect if a corpus with the same name does not already exist.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "AllowOverwriteGrammarParam": {
        "name": "allow_overwrite",
        "in": "query",
        "description": "If `true`, the specified grammar overwrites an existing grammar with the same name. If `false`, the request fails if a grammar with the same name already exists. The parameter has no effect if a grammar with the same name does not already exist.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "AllowOverwriteAudioParam": {
        "name": "allow_overwrite",
        "in": "query",
        "description": "If `true`, the specified audio resource overwrites an existing audio resource with the same name. If `false`, the request fails if an audio resource with the same name already exists. The parameter has no effect if an audio resource with the same name does not already exist.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "requestBodies": {
      "recognizeAudio": {
        "content": {
          "application/octet-stream": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/alaw": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/basic": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/flac": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/g729": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/l16": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/mp3": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/mpeg": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/mulaw": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/ogg": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/ogg;codecs=opus": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/ogg;codecs=vorbis": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/wav": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/webm": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/webm;codecs=opus": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "audio/webm;codecs=vorbis": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        },
        "description": "The audio to transcribe.",
        "required": true
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "IAM": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      },
      "ICP4D": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "EmptyResponseBody": {
        "description": "The empty response from a request."
      },
      "RecognitionJobs": {
        "description": "Information about current asynchronous speech recognition jobs.",
        "required": [
          "recognitions"
        ],
        "properties": {
          "recognitions": {
            "description": "An array of `RecognitionJob` objects that provides the status for each of the user's current jobs. The array is empty if the user has no current jobs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecognitionJob"
            }
          }
        }
      },
      "RecognitionJob": {
        "description": "Information about a current asynchronous speech recognition job.",
        "required": [
          "id",
          "status",
          "created"
        ],
        "properties": {
          "id": {
            "description": "The ID of the asynchronous job.",
            "type": "string"
          },
          "status": {
            "description": "The current status of the job:\n* `waiting`: The service is preparing the job for processing. The service returns this status when the job is initially created or when it is waiting for capacity to process the job. The job remains in this state until the service has the capacity to begin processing it.\n* `processing`: The service is actively processing the job.\n* `completed`: The service has finished processing the job. If the job specified a callback URL and the event `recognitions.completed_with_results`, the service sent the results with the callback notification. Otherwise, you must retrieve the results by checking the individual job.\n* `failed`: The job failed.",
            "type": "string",
            "enum": [
              "waiting",
              "processing",
              "completed",
              "failed"
            ]
          },
          "created": {
            "description": "The date and time in Coordinated Universal Time (UTC) at which the job was created. The value is provided in full ISO 8601 format (`YYYY-MM-DDThh:mm:ss.sTZD`).",
            "type": "string"
          },
          "updated": {
            "description": "The date and time in Coordinated Universal Time (UTC) at which the job was last updated by the service. The value is provided in full ISO 8601 format (`YYYY-MM-DDThh:mm:ss.sTZD`). This field is returned only by the **Check jobs** and **Check a job** methods.",
            "type": "string"
          },
          "url": {
            "description": "The URL to use to request information about the job with the **Check a job** method. This field is returned only by the **Create a job** method.",
            "type": "string"
          },
          "user_token": {
            "description": "The user token associated with a job that was created with a callback URL and a user token. This field can be returned only by the **Check jobs** method.",
            "type": "string"
          },
          "results": {
            "description": "If the status is `completed`, the results of the recognition request as an array that includes a single instance of a `SpeechRecognitionResults` object. This field is returned only by the **Check a job** method.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeechRecognitionResults"
            }
          },
          "warnings": {
            "description": "An array of warning messages about invalid parameters included with the request. Each warning includes a descriptive message and a list of invalid argument strings, for example, `\"unexpected query parameter 'user_token', query parameter 'callback_url' was not specified\"`. The request succeeds despite the warnings. This field can be returned only by the **Create a job** method.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RegisterStatus": {
        "description": "Information about a request to register a callback for asynchronous speech recognition.",
        "required": [
          "status",
          "url"
        ],
        "properties": {
          "status": {
            "description": "The current status of the job:\n* `created`: The service successfully white-listed the callback URL as a result of the call.\n* `already created`: The URL was already white-listed.",
            "type": "string",
            "enum": [
              "created",
              "already created"
            ]
          },
          "url": {
            "description": "The callback URL that is successfully registered.",
            "type": "string"
          }
        }
      },
      "SpeechRecognitionResults": {
        "description": "The complete results for a speech recognition request.",
        "properties": {
          "results": {
            "description": "An array of `SpeechRecognitionResult` objects that can include interim and final results (interim results are returned only if supported by the method). Final results are guaranteed not to change; interim results might be replaced by further interim results and final results. The service periodically sends updates to the results list; the `result_index` is set to the lowest index in the array that has changed; it is incremented for new results.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeechRecognitionResult"
            }
          },
          "result_index": {
            "description": "An index that indicates a change point in the `results` array. The service increments the index only for additional results that it sends for new audio for the same request.",
            "type": "integer",
            "format": "int32"
          },
          "speaker_labels": {
            "description": "An array of `SpeakerLabelsResult` objects that identifies which words were spoken by which speakers in a multi-person exchange. The array is returned only if the `speaker_labels` parameter is `true`. When interim results are also requested for methods that support them, it is possible for a `SpeechRecognitionResults` object to include only the `speaker_labels` field.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeakerLabelsResult"
            }
          },
          "processing_metrics": {
            "$ref": "#/components/schemas/ProcessingMetrics"
          },
          "audio_metrics": {
            "$ref": "#/components/schemas/AudioMetrics"
          },
          "warnings": {
            "description": "An array of warning messages associated with the request:\n* Warnings for invalid parameters or fields can include a descriptive message and a list of invalid argument strings, for example, `\"Unknown arguments:\"` or `\"Unknown url query arguments:\"` followed by a list of the form `\"{invalid_arg_1}, {invalid_arg_2}.\"`\n* The following warning is returned if the request passes a custom model that is based on an older version of a base model for which an updated version is available: `\"Using previous version of base model, because your custom model has been built with it. Please note that this version will be supported only for a limited time. Consider updating your custom model to the new base model. If you do not do that you will be automatically switched to base model when you used the non-updated custom model.\"`\n\nIn both cases, the request succeeds despite the warnings.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SpeechRecognitionResult": {
        "description": "Component results for a speech recognition request.",
        "required": [
          "final",
          "alternatives"
        ],
        "properties": {
          "final": {
            "description": "An indication of whether the transcription results are final. If `true`, the results for this utterance are not updated further; no additional results are sent for a `result_index` once its results are indicated as final.",
            "type": "boolean"
          },
          "alternatives": {
            "description": "An array of alternative transcripts. The `alternatives` array can include additional requested output such as word confidence or timestamps.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeechRecognitionAlternative"
            }
          },
          "keywords_result": {
            "description": "A dictionary (or associative array) whose keys are the strings specified for `keywords` if both that parameter and `keywords_threshold` are specified. The value for each key is an array of matches spotted in the audio for that keyword. Each match is described by a `KeywordResult` object. A keyword for which no matches are found is omitted from the dictionary. The dictionary is omitted entirely if no matches are found for any keywords.",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/KeywordResult"
              }
            }
          },
          "word_alternatives": {
            "description": "An array of alternative hypotheses found for words of the input audio if a `word_alternatives_threshold` is specified.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WordAlternativeResults"
            }
          },
          "end_of_utterance": {
            "description": "If the `split_transcript_at_phrase_end` parameter is `true`, describes the reason for the split:\n* `end_of_data` - The end of the input audio stream.\n* `full_stop` - A full semantic stop, such as for the conclusion of a grammatical sentence. The insertion of splits is influenced by the base language model and biased by custom language models and grammars. \n* `reset` - The amount of audio that is currently being processed exceeds the two-minute maximum. The service splits the transcript to avoid excessive memory use.\n* `silence` - A pause or silence that is at least as long as the pause interval.",
            "type": "string",
            "enum": [
              "end_of_data",
              "full_stop",
              "reset",
              "silence"
            ]
          }
        }
      },
      "KeywordResult": {
        "description": "Information about a match for a keyword from speech recognition results.",
        "required": [
          "normalized_text",
          "start_time",
          "end_time",
          "confidence"
        ],
        "properties": {
          "normalized_text": {
            "description": "A specified keyword normalized to the spoken phrase that matched in the audio input.",
            "type": "string"
          },
          "start_time": {
            "description": "The start time in seconds of the keyword match.",
            "type": "number",
            "format": "double"
          },
          "end_time": {
            "description": "The end time in seconds of the keyword match.",
            "type": "number",
            "format": "double"
          },
          "confidence": {
            "description": "A confidence score for the keyword match in the range of 0.0 to 1.0.",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 1
          }
        }
      },
      "WordAlternativeResults": {
        "description": "Information about alternative hypotheses for words from speech recognition results.",
        "required": [
          "start_time",
          "end_time",
          "alternatives"
        ],
        "properties": {
          "start_time": {
            "description": "The start time in seconds of the word from the input audio that corresponds to the word alternatives.",
            "type": "number",
            "format": "double"
          },
          "end_time": {
            "description": "The end time in seconds of the word from the input audio that corresponds to the word alternatives.",
            "type": "number",
            "format": "double"
          },
          "alternatives": {
            "description": "An array of alternative hypotheses for a word from the input audio.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WordAlternativeResult"
            }
          }
        }
      },
      "WordAlternativeResult": {
        "description": "An alternative hypothesis for a word from speech recognition results.",
        "required": [
          "confidence",
          "word"
        ],
        "properties": {
          "confidence": {
            "description": "A confidence score for the word alternative hypothesis in the range of 0.0 to 1.0.",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 1
          },
          "word": {
            "description": "An alternative hypothesis for a word from the input audio.",
            "type": "string"
          }
        }
      },
      "SpeechRecognitionAlternative": {
        "description": "An alternative transcript from speech recognition results.",
        "required": [
          "transcript"
        ],
        "properties": {
          "transcript": {
            "description": "A transcription of the audio.",
            "type": "string"
          },
          "confidence": {
            "description": "A score that indicates the service's confidence in the transcript in the range of 0.0 to 1.0. A confidence score is returned only for the best alternative and only with results marked as final.",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 1
          },
          "timestamps": {
            "description": "Time alignments for each word from the transcript as a list of lists. Each inner list consists of three elements: the word followed by its start and end time in seconds, for example: `[[\"hello\",0.0,1.2],[\"world\",1.2,2.5]]`. Timestamps are returned only for the best alternative.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "word_confidence": {
            "description": "A confidence score for each word of the transcript as a list of lists. Each inner list consists of two elements: the word and its confidence score in the range of 0.0 to 1.0, for example: `[[\"hello\",0.95],[\"world\",0.866]]`. Confidence scores are returned only for the best alternative and only with results marked as final.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SpeakerLabelsResult": {
        "description": "Information about the speakers from speech recognition results.",
        "required": [
          "from",
          "to",
          "speaker",
          "confidence",
          "final"
        ],
        "properties": {
          "from": {
            "description": "The start time of a word from the transcript. The value matches the start time of a word from the `timestamps` array.",
            "type": "number",
            "format": "float"
          },
          "to": {
            "description": "The end time of a word from the transcript. The value matches the end time of a word from the `timestamps` array.",
            "type": "number",
            "format": "float"
          },
          "speaker": {
            "description": "The numeric identifier that the service assigns to a speaker from the audio. Speaker IDs begin at `0` initially but can evolve and change across interim results (if supported by the method) and between interim and final results as the service processes the audio. They are not guaranteed to be sequential, contiguous, or ordered.",
            "type": "integer",
            "format": "int32"
          },
          "confidence": {
            "description": "A score that indicates the service's confidence in its identification of the speaker in the range of 0.0 to 1.0.",
            "type": "number",
            "format": "float"
          },
          "final": {
            "description": "An indication of whether the service might further change word and speaker-label results. A value of `true` means that the service guarantees not to send any further updates for the current or any preceding results; `false` means that the service might send further updates to the results.",
            "type": "boolean"
          }
        }
      },
      "ProcessingMetrics": {
        "description": "If processing metrics are requested, information about the service's processing of the input audio. Processing metrics are not available with the synchronous **Recognize audio** method.",
        "required": [
          "processed_audio",
          "wall_clock_since_first_byte_received",
          "periodic"
        ],
        "properties": {
          "processed_audio": {
            "$ref": "#/components/schemas/ProcessedAudio"
          },
          "wall_clock_since_first_byte_received": {
            "description": "The amount of real time in seconds that has passed since the service received the first byte of input audio. Values in this field are generally multiples of the specified metrics interval, with two differences:\n* Values might not reflect exact intervals (for instance, 0.25, 0.5, and so on). Actual values might be 0.27, 0.52, and so on, depending on when the service receives and processes audio.\n* The service also returns values for transcription events if you set the `interim_results` parameter to `true`. The service returns both processing metrics and transcription results when such events occur.",
            "type": "number",
            "format": "float"
          },
          "periodic": {
            "description": "An indication of whether the metrics apply to a periodic interval or a transcription event:\n* `true` means that the response was triggered by a specified processing interval. The information contains processing metrics only.\n* `false` means that the response was triggered by a transcription event. The information contains processing metrics plus transcription results. \n\nUse the field to identify why the service generated the response and to filter different results if necessary.",
            "type": "boolean"
          }
        }
      },
      "ProcessedAudio": {
        "description": "Detailed timing information about the service's processing of the input audio.",
        "required": [
          "received",
          "seen_by_engine",
          "transcription"
        ],
        "properties": {
          "received": {
            "description": "The seconds of audio that the service has received as of this response. The value of the field is greater than the values of the `transcription` and `speaker_labels` fields during speech recognition processing, since the service first has to receive the audio before it can begin to process it. The final value can also be greater than the value of the `transcription` and `speaker_labels` fields by a fractional number of seconds.",
            "type": "number",
            "format": "float"
          },
          "seen_by_engine": {
            "description": "The seconds of audio that the service has passed to its speech-processing engine as of this response. The value of the field is greater than the values of the `transcription` and `speaker_labels` fields during speech recognition processing. The `received` and `seen_by_engine` fields have identical values when the service has finished processing all audio. This final value can be greater than the value of the `transcription` and `speaker_labels` fields by a fractional number of seconds.",
            "type": "number",
            "format": "float"
          },
          "transcription": {
            "description": "The seconds of audio that the service has processed for speech recognition as of this response.",
            "type": "number",
            "format": "float"
          },
          "speaker_labels": {
            "description": "If speaker labels are requested, the seconds of audio that the service has processed to determine speaker labels as of this response. This value often trails the value of the `transcription` field during speech recognition processing. The `transcription` and `speaker_labels` fields have identical values when the service has finished processing all audio.",
            "type": "number",
            "format": "float"
          }
        }
      },
      "AudioMetrics": {
        "description": "If audio metrics are requested, information about the signal characteristics of the input audio.",
        "required": [
          "sampling_interval",
          "accumulated"
        ],
        "properties": {
          "sampling_interval": {
            "description": "The interval in seconds (typically 0.1 seconds) at which the service calculated the audio metrics. In other words, how often the service calculated the metrics. A single unit in each histogram (see the `AudioMetricsHistogramBin` object) is calculated based on a `sampling_interval` length of audio.",
            "type": "number",
            "format": "float"
          },
          "accumulated": {
            "$ref": "#/components/schemas/AudioMetricsDetails"
          }
        }
      },
      "AudioMetricsDetails": {
        "description": "Detailed information about the signal characteristics of the input audio.",
        "required": [
          "final",
          "end_time",
          "speech_ratio",
          "high_frequency_loss",
          "direct_current_offset",
          "clipping_rate",
          "non_speech_level",
          "speech_level"
        ],
        "properties": {
          "final": {
            "description": "If `true`, indicates the end of the audio stream, meaning that transcription is complete. Currently, the field is always `true`. The service returns metrics just once per audio stream. The results provide aggregated audio metrics that pertain to the complete audio stream.",
            "type": "boolean"
          },
          "end_time": {
            "description": "The end time in seconds of the block of audio to which the metrics apply.",
            "type": "number",
            "format": "float"
          },
          "signal_to_noise_ratio": {
            "description": "The signal-to-noise ratio (SNR) for the audio signal. The value indicates the ratio of speech to noise in the audio. A valid value lies in the range of 0 to 100 decibels (dB). The service omits the field if it cannot compute the SNR for the audio.",
            "type": "number",
            "format": "float"
          },
          "speech_ratio": {
            "description": "The ratio of speech to non-speech segments in the audio signal. The value lies in the range of 0.0 to 1.0.",
            "type": "number",
            "format": "float"
          },
          "high_frequency_loss": {
            "description": "The probability that the audio signal is missing the upper half of its frequency content.\n* A value close to 1.0 typically indicates artificially up-sampled audio, which negatively impacts the accuracy of the transcription results.\n* A value at or near 0.0 indicates that the audio signal is good and has a full spectrum.\n* A value around 0.5 means that detection of the frequency content is unreliable or not available.",
            "type": "number",
            "format": "float"
          },
          "direct_current_offset": {
            "description": "An array of `AudioMetricsHistogramBin` objects that defines a histogram of the cumulative direct current (DC) component of the audio signal.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioMetricsHistogramBin"
            }
          },
          "clipping_rate": {
            "description": "An array of `AudioMetricsHistogramBin` objects that defines a histogram of the clipping rate for the audio segments. The clipping rate is defined as the fraction of samples in the segment that reach the maximum or minimum value that is offered by the audio quantization range. The service auto-detects either a 16-bit Pulse-Code Modulation(PCM) audio range (-32768 to +32767) or a unit range (-1.0 to +1.0). The clipping rate is between 0.0 and 1.0, with higher values indicating possible degradation of speech recognition.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioMetricsHistogramBin"
            }
          },
          "speech_level": {
            "description": "An array of `AudioMetricsHistogramBin` objects that defines a histogram of the signal level in segments of the audio that contain speech. The signal level is computed as the Root-Mean-Square (RMS) value in a decibel (dB) scale normalized to the range 0.0 (minimum level) to 1.0 (maximum level).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioMetricsHistogramBin"
            }
          },
          "non_speech_level": {
            "description": "An array of `AudioMetricsHistogramBin` objects that defines a histogram of the signal level in segments of the audio that do not contain speech. The signal level is computed as the Root-Mean-Square (RMS) value in a decibel (dB) scale normalized to the range 0.0 (minimum level) to 1.0 (maximum level).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioMetricsHistogramBin"
            }
          }
        }
      },
      "AudioMetricsHistogramBin": {
        "description": "A bin with defined boundaries that indicates the number of values in a range of signal characteristics for a histogram. The first and last bins of a histogram are the boundary bins. They cover the intervals between negative infinity and the first boundary, and between the last boundary and positive infinity, respectively.",
        "required": [
          "begin",
          "end",
          "count"
        ],
        "properties": {
          "begin": {
            "description": "The lower boundary of the bin in the histogram.",
            "type": "number",
            "format": "float"
          },
          "end": {
            "description": "The upper boundary of the bin in the histogram.",
            "type": "number",
            "format": "float"
          },
          "count": {
            "description": "The number of values in the bin of the histogram.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SpeechModels": {
        "description": "Information about the available language models.",
        "required": [
          "models"
        ],
        "properties": {
          "models": {
            "description": "An array of `SpeechModel` objects that provides information about each available model.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeechModel"
            }
          }
        }
      },
      "SpeechModel": {
        "description": "Information about an available language model.",
        "required": [
          "name",
          "rate",
          "url",
          "language",
          "supported_features",
          "description"
        ],
        "properties": {
          "name": {
            "description": "The name of the model for use as an identifier in calls to the service (for example, `en-US_BroadbandModel`).",
            "type": "string"
          },
          "language": {
            "description": "The language identifier of the model (for example, `en-US`).",
            "type": "string"
          },
          "rate": {
            "description": "The sampling rate (minimum acceptable rate for audio) used by the model in Hertz.",
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "description": "The URI for the model.",
            "type": "string"
          },
          "supported_features": {
            "$ref": "#/components/schemas/SupportedFeatures"
          },
          "description": {
            "description": "A brief description of the model.",
            "type": "string"
          }
        }
      },
      "SupportedFeatures": {
        "description": "Additional service features that are supported with the model.",
        "required": [
          "custom_language_model",
          "speaker_labels"
        ],
        "properties": {
          "custom_language_model": {
            "description": "Indicates whether the customization interface can be used to create a custom language model based on the language model.",
            "type": "boolean"
          },
          "speaker_labels": {
            "description": "Indicates whether the `speaker_labels` parameter can be used with the language model.",
            "type": "boolean"
          }
        }
      },
      "CreateLanguageModel": {
        "description": "Information about the new custom language model.",
        "required": [
          "name",
          "base_model_name"
        ],
        "properties": {
          "name": {
            "description": "A user-defined name for the new custom language model. Use a name that is unique among all custom language models that you own. Use a localized name that matches the language of the custom model. Use a name that describes the domain of the custom model, such as `Medical custom model` or `Legal custom model`.",
            "type": "string"
          },
          "base_model_name": {
            "description": "The name of the base language model that is to be customized by the new custom language model. The new custom model can be used only with the base model that it customizes. \n\nTo determine whether a base model supports language model customization, use the **Get a model** method and check that the attribute `custom_language_model` is set to `true`. You can also refer to [Language support for customization](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-customization#languageSupport).",
            "type": "string",
            "enum": [
              "de-DE_BroadbandModel",
              "de-DE_NarrowbandModel",
              "en-GB_BroadbandModel",
              "en-GB_NarrowbandModel",
              "en-US_BroadbandModel",
              "en-US_NarrowbandModel",
              "en-US_ShortForm_NarrowbandModel",
              "es-AR_BroadbandModel",
              "es-AR_NarrowbandModel",
              "es-CL_BroadbandModel",
              "es-CL_NarrowbandModel",
              "es-CO_BroadbandModel",
              "es-CO_NarrowbandModel",
              "es-ES_BroadbandModel",
              "es-ES_NarrowbandModel",
              "es-MX_BroadbandModel",
              "es-MX_NarrowbandModel",
              "es-PE_BroadbandModel",
              "es-PE_NarrowbandModel",
              "fr-FR_BroadbandModel",
              "fr-FR_NarrowbandModel",
              "it-IT_BroadbandModel",
              "it-IT_NarrowbandModel",
              "ja-JP_BroadbandModel",
              "ja-JP_NarrowbandModel",
              "ko-KR_BroadbandModel",
              "ko-KR_NarrowbandModel",
              "nl-NL_BroadbandModel",
              "nl-NL_NarrowbandModel",
              "pt-BR_BroadbandModel",
              "pt-BR_NarrowbandModel"
            ]
          },
          "dialect": {
            "description": "The dialect of the specified language that is to be used with the custom language model. For most languages, the dialect matches the language of the base model by default. For example, `en-US` is used for either of the US English language models. \n\nFor a Spanish language, the service creates a custom language model that is suited for speech in one of the following dialects:\n* `es-ES` for Castilian Spanish (`es-ES` models)\n* `es-LA` for Latin American Spanish (`es-AR`, `es-CL`, `es-CO`, and `es-PE` models)\n* `es-US` for Mexican (North American) Spanish (`es-MX` models) \n\nThe parameter is meaningful only for Spanish models, for which you can always safely omit the parameter to have the service create the correct mapping. \n\nIf you specify the `dialect` parameter for non-Spanish language models, its value must match the language of the base model. If you specify the `dialect` for Spanish language models, its value must match one of the defined mappings as indicated (`es-ES`, `es-LA`, or `es-MX`). All dialect values are case-insensitive.",
            "type": "string"
          },
          "description": {
            "description": "A description of the new custom language model. Use a localized description that matches the language of the custom model.",
            "type": "string"
          }
        }
      },
      "LanguageModels": {
        "description": "Information about existing custom language models.",
        "required": [
          "customizations"
        ],
        "properties": {
          "customizations": {
            "description": "An array of `LanguageModel` objects that provides information about each available custom language model. The array is empty if the requesting credentials own no custom language models (if no language is specified) or own no custom language models for the specified language.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LanguageModel"
            }
          }
        }
      },
      "LanguageModel": {
        "description": "Information about an existing custom language model.",
        "required": [
          "customization_id"
        ],
        "properties": {
          "customization_id": {
            "description": "The customization ID (GUID) of the custom language model. The **Create a custom language model** method returns only this field of the object; it does not return the other fields.",
            "type": "string"
          },
          "created": {
            "description": "The date and time in Coordinated Universal Time (UTC) at which the custom language model was created. The value is provided in full ISO 8601 format (`YYYY-MM-DDThh:mm:ss.sTZD`).",
            "type": "string"
          },
          "updated": {
            "description": "The date and time in Coordinated Universal Time (UTC) at which the custom language model was last modified. The `created` and `updated` fields are equal when a language model is first added but has yet to be updated. The value is provided in full ISO 8601 format (YYYY-MM-DDThh:mm:ss.sTZD).",
            "type": "string"
          },
          "language": {
            "description": "The language identifier of the custom language model (for example, `en-US`).",
            "type": "string"
          },
          "dialect": {
            "description": "The dialect of the language for the custom language model. For non-Spanish models, the field matches the language of the base model; for example, `en-US` for either of the US English language models. For Spanish models, the field indicates the dialect for which the model was created:\n* `es-ES` for Castilian Spanish (`es-ES` models)\n* `es-LA` for Latin American Spanish (`es-AR`, `es-CL`, `es-CO`, and `es-PE` models)\n* `es-US` for Mexican (North American) Spanish (`es-MX` models) \n\nDialect values are case-insensitive.",
            "type": "string"
          },
          "versions": {
            "description": "A list of the available versions of the custom language model. Each element of the array indicates a version of the base model with which the custom model can be used. Multiple versions exist only if the custom model has been upgraded; otherwise, only a single version is shown.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "owner": {
            "description": "The GUID of the credentials for the instance of the service that owns the custom language model.",
            "type": "string"
          },
          "name": {
            "description": "The name of the custom language model.",
            "type": "string"
          },
          "description": {
            "description": "The description of the custom language model.",
            "type": "string"
          },
          "base_model_name": {
            "description": "The name of the language model for which the custom language model was created.",
            "type": "string"
          },
          "status": {
            "description": "The current status of the custom language model:\n* `pending`: The model was created but is waiting either for valid training data to be added or for the service to finish analyzing added data.\n* `ready`: The model contains valid data and is ready to be trained. If the model contains a mix of valid and invalid resources, you need to set the `strict` parameter to `false` for the training to proceed. \n* `training`: The model is currently being trained.\n* `available`: The model is trained and ready to use.\n* `upgrading`: The model is currently being upgraded.\n* `failed`: Training of the model failed.",
            "type": "string",
            "enum": [
              "pending",
              "ready",
              "training",
              "available",
              "upgrading",
              "failed"
            ]
          },
          "progress": {
            "description": "A percentage that indicates the progress of the custom language model's current training. A value of `100` means that the model is fully trained. **Note:** The `progress` field does not currently reflect the progress of the training. The field changes from `0` to `100` when training is complete.",
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "description": "If an error occurred while adding a grammar file to the custom language model, a message that describes an `Internal Server Error` and includes the string `Cannot compile grammar`. The status of the custom model is not affected by the error, but the grammar cannot be used with the model.",
            "type": "string"
          },
          "warnings": {
            "description": "If the request included unknown parameters, the following message: `Unexpected query parameter(s) ['parameters'] detected`, where `parameters` is a list that includes a quoted string for each unknown parameter.",
            "type": "string"
          }
        }
      },
      "CreateAcousticModel": {
        "description": "Information about the new custom acoustic model.",
        "required": [
          "name",
          "base_model_name"
        ],
        "properties": {
          "name": {
            "description": "A user-defined name for the new custom acoustic model. Use a name that is unique among all custom acoustic models that you own. Use a localized name that matches the language of the custom model. Use a name that describes the acoustic environment of the custom model, such as `Mobile custom model` or `Noisy car custom model`.",
            "type": "string"
          },
          "base_model_name": {
            "description": "The name of the base language model that is to be customized by the new custom acoustic model. The new custom model can be used only with the base model that it customizes. \n\nTo determine whether a base model supports acoustic model customization, refer to [Language support for customization](https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-customization#languageSupport).",
            "type": "string",
            "enum": [
              "ar-AR_BroadbandModel",
              "de-DE_BroadbandModel",
              "de-DE_NarrowbandModel",
              "en-GB_BroadbandModel",
              "en-GB_NarrowbandModel",
              "en-US_BroadbandModel",
              "en-US_NarrowbandModel",
              "en-US_ShortForm_NarrowbandModel",
              "es-AR_BroadbandModel",
              "es-AR_NarrowbandModel",
              "es-CL_BroadbandModel",
              "es-CL_NarrowbandModel",
              "es-CO_BroadbandModel",
              "es-CO_NarrowbandModel",
              "es-ES_BroadbandModel",
              "es-ES_NarrowbandModel",
              "es-MX_BroadbandModel",
              "es-MX_NarrowbandModel",
              "es-PE_BroadbandModel",
              "es-PE_NarrowbandModel",
              "fr-FR_BroadbandModel",
              "fr-FR_NarrowbandModel",
              "it-IT_BroadbandModel",
              "it-IT_NarrowbandModel",
              "ja-JP_BroadbandModel",
              "ja-JP_NarrowbandModel",
              "ko-KR_BroadbandModel",
              "ko-KR_NarrowbandModel",
              "nl-NL_BroadbandModel",
              "nl-NL_NarrowbandModel",
              "pt-BR_BroadbandModel",
              "pt-BR_NarrowbandModel",
              "zh-CN_BroadbandModel",
              "zh-CN_NarrowbandModel"
            ]
          },
          "description": {
            "description": "A description of the new custom acoustic model. Use a localized description that matches the language of the custom model.",
            "type": "string"
          }
        }
      },
      "AcousticModels": {
        "description": "Information about existing custom acoustic models.",
        "required": [
          "customizations"
        ],
        "properties": {
          "customizations": {
            "description": "An array of `AcousticModel` objects that provides information about each available custom acoustic model. The array is empty if the requesting credentials own no custom acoustic models (if no language is specified) or own no custom acoustic models for the specified language.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AcousticModel"
            }
          }
        }
      },
      "AcousticModel": {
        "description": "Information about an existing custom acoustic model.",
        "required": [
          "customization_id"
        ],
        "properties": {
          "customization_id": {
            "description": "The customization ID (GUID) of the custom acoustic model. The **Create a custom acoustic model** method returns only this field of the object; it does not return the other fields.",
            "type": "string"
          },
          "created": {
            "description": "The date and time in Coordinated Universal Time (UTC) at which the custom acoustic model was created. The value is provided in full ISO 8601 format (`YYYY-MM-DDThh:mm:ss.sTZD`).",
            "type": "string"
          },
          "updated": {
            "description": "The date and time in Coordinated Universal Time (UTC) at which the custom acoustic model was last modified. The `created` and `updated` fields are equal when an acoustic model is first added but has yet to be updated. The value is provided in full ISO 8601 format (YYYY-MM-DDThh:mm:ss.sTZD).",
            "type": "string"
          },
          "language": {
            "description": "The language identifier of the custom acoustic model (for example, `en-US`).",
            "type": "string"
          },
          "versions": {
            "description": "A list of the available versions of the custom acoustic model. Each element of the array indicates a version of the base model with which the custom model can be used. Multiple versions exist only if the custom model has been upgraded; otherwise, only a single version is shown.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "owner": {
            "description": "The GUID of the credentials for the instance of the service that owns the custom acoustic model.",
            "type": "string"
          },
          "name": {
            "description": "The name of the custom acoustic model.",
            "type": "string"
          },
          "description": {
            "description": "The description of the custom acoustic model.",
            "type": "string"
          },
          "base_model_name": {
            "description": "The name of the language model for which the custom acoustic model was created.",
            "type": "string"
          },
          "status": {
            "description": "The current status of the custom acoustic model:\n* `pending`: The model was created but is waiting either for valid training data to be added or for the service to finish analyzing added data.\n* `ready`: The model contains valid data and is ready to be trained. If the model contains a mix of valid and invalid resources, you need to set the `strict` parameter to `false` for the training to proceed. \n* `training`: The model is currently being trained.\n* `available`: The model is trained and ready to use.\n* `upgrading`: The model is currently being upgraded.\n* `failed`: Training of the model failed.",
            "type": "string",
            "enum": [
              "pending",
              "ready",
              "training",
              "available",
              "upgrading",
              "failed"
            ]
          },
          "progress": {
            "description": "A percentage that indicates the progress of the custom acoustic model's current training. A value of `100` means that the model is fully trained. **Note:** The `progress` field does not currently reflect the progress of the training. The field changes from `0` to `100` when training is complete.",
            "type": "integer",
            "format": "int32"
          },
          "warnings": {
            "description": "If the request included unknown parameters, the following message: `Unexpected query parameter(s) ['parameters'] detected`, where `parameters` is a list that includes a quoted string for each unknown parameter.",
            "type": "string"
          }
        }
      },
      "Corpora": {
        "description": "Information about the corpora from a custom language model.",
        "required": [
          "corpora"
        ],
        "properties": {
          "corpora": {
            "description": "An array of `Corpus` objects that provides information about the corpora for the custom model. The array is empty if the custom model has no corpora.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Corpus"
            }
          }
        }
      },
      "Corpus": {
        "description": "Information about a corpus from a custom language model.",
        "required": [
          "name",
          "total_words",
          "out_of_vocabulary_words",
          "status"
        ],
        "properties": {
          "name": {
            "description": "The name of the corpus.",
            "type": "string"
          },
          "total_words": {
            "description": "The total number of words in the corpus. The value is `0` while the corpus is being processed.",
            "type": "integer",
            "format": "int32"
          },
          "out_of_vocabulary_words": {
            "description": "The number of OOV words in the corpus. The value is `0` while the corpus is being processed.",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "The status of the corpus:\n* `analyzed`: The service successfully analyzed the corpus. The custom model can be trained with data from the corpus.\n* `being_processed`: The service is still analyzing the corpus. The service cannot accept requests to add new resources or to train the custom model.\n* `undetermined`: The service encountered an error while processing the corpus. The `error` field describes the failure.",
            "type": "string",
            "enum": [
              "analyzed",
              "being_processed",
              "undetermined"
            ]
          },
          "error": {
            "description": "If the status of the corpus is `undetermined`, the following message: `Analysis of corpus 'name' failed. Please try adding the corpus again by setting the 'allow_overwrite' flag to 'true'`.",
            "type": "string"
          }
        }
      },
      "CustomWords": {
        "description": "Information about the words that are to be added to a custom language model.",
        "required": [
          "words"
        ],
        "properties": {
          "words": {
            "description": "An array of `CustomWord` objects that provides information about each custom word that is to be added to or updated in the custom language model.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomWord"
            }
          }
        }
      },
      "CustomWord": {
        "description": "Information about a word that is to be added to a custom language model.",
        "properties": {
          "word": {
            "description": "For the **Add custom words** method, you must specify the custom word that is to be added to or updated in the custom model. Do not include spaces in the word. Use a `-` (dash) or `_` (underscore) to connect the tokens of compound words. \n\nOmit this parameter for the **Add a custom word** method.",
            "type": "string"
          },
          "sounds_like": {
            "description": "An array of sounds-like pronunciations for the custom word. Specify how words that are difficult to pronounce, foreign words, acronyms, and so on can be pronounced by users.\n* For a word that is not in the service's base vocabulary, omit the parameter to have the service automatically generate a sounds-like pronunciation for the word.\n* For a word that is in the service's base vocabulary, use the parameter to specify additional pronunciations for the word. You cannot override the default pronunciation of a word; pronunciations you add augment the pronunciation from the base vocabulary. \n\nA word can have at most five sounds-like pronunciations. A pronunciation can include at most 40 characters not including spaces.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "display_as": {
            "description": "An alternative spelling for the custom word when it appears in a transcript. Use the parameter when you want the word to have a spelling that is different from its usual representation or from its spelling in corpora training data.",
            "type": "string"
          }
        }
      },
      "Words": {
        "description": "Information about the words from a custom language model.",
        "required": [
          "words"
        ],
        "properties": {
          "words": {
            "description": "An array of `Word` objects that provides information about each word in the custom model's words resource. The array is empty if the custom model has no words.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Word"
            }
          }
        }
      },
      "Word": {
        "description": "Information about a word from a custom language model.",
        "required": [
          "word",
          "sounds_like",
          "display_as",
          "count",
          "source"
        ],
        "properties": {
          "word": {
            "description": "A word from the custom model's words resource. The spelling of the word is used to train the model.",
            "type": "string"
          },
          "sounds_like": {
            "description": "An array of pronunciations for the word. The array can include the sounds-like pronunciation automatically generated by the service if none is provided for the word; the service adds this pronunciation when it finishes processing the word.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "display_as": {
            "description": "The spelling of the word that the service uses to display the word in a transcript. The field contains an empty string if no display-as value is provided for the word, in which case the word is displayed as it is spelled.",
            "type": "string"
          },
          "count": {
            "description": "A sum of the number of times the word is found across all corpora. For example, if the word occurs five times in one corpus and seven times in another, its count is `12`. If you add a custom word to a model before it is added by any corpora, the count begins at `1`; if the word is added from a corpus first and later modified, the count reflects only the number of times it is found in corpora.",
            "type": "integer",
            "format": "int32"
          },
          "source": {
            "description": "An array of sources that describes how the word was added to the custom model's words resource. For OOV words added from a corpus, includes the name of the corpus; if the word was added by multiple corpora, the names of all corpora are listed. If the word was modified or added by the user directly, the field includes the string `user`.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "error": {
            "description": "If the service discovered one or more problems that you need to correct for the word's definition, an array that describes each of the errors.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WordError"
            }
          }
        }
      },
      "WordError": {
        "description": "An error associated with a word from a custom language model.",
        "required": [
          "element"
        ],
        "properties": {
          "element": {
            "description": "A key-value pair that describes an error associated with the definition of a word in the words resource. The pair has the format `\"element\": \"message\"`, where `element` is the aspect of the definition that caused the problem and `message` describes the problem. The following example describes a problem with one of the word's sounds-like definitions: `\"{sounds_like_string}\": \"Numbers are not allowed in sounds-like. You can try for example '{suggested_string}'.\"`",
            "type": "string"
          }
        }
      },
      "Grammars": {
        "description": "Information about the grammars from a custom language model.",
        "required": [
          "grammars"
        ],
        "properties": {
          "grammars": {
            "description": "An array of `Grammar` objects that provides information about the grammars for the custom model. The array is empty if the custom model has no grammars.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Grammar"
            }
          }
        }
      },
      "Grammar": {
        "description": "Information about a grammar from a custom language model.",
        "required": [
          "name",
          "out_of_vocabulary_words",
          "status"
        ],
        "properties": {
          "name": {
            "description": "The name of the grammar.",
            "type": "string"
          },
          "out_of_vocabulary_words": {
            "description": "The number of OOV words in the grammar. The value is `0` while the grammar is being processed.",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "The status of the grammar:\n* `analyzed`: The service successfully analyzed the grammar. The custom model can be trained with data from the grammar.\n* `being_processed`: The service is still analyzing the grammar. The service cannot accept requests to add new resources or to train the custom model.\n* `undetermined`: The service encountered an error while processing the grammar. The `error` field describes the failure.",
            "type": "string",
            "enum": [
              "analyzed",
              "being_processed",
              "undetermined"
            ]
          },
          "error": {
            "description": "If the status of the grammar is `undetermined`, the following message: `Analysis of grammar '{grammar_name}' failed. Please try fixing the error or adding the grammar again by setting the 'allow_overwrite' flag to 'true'.`",
            "type": "string"
          }
        }
      },
      "AudioResources": {
        "description": "Information about the audio resources from a custom acoustic model.",
        "required": [
          "total_minutes_of_audio",
          "audio"
        ],
        "properties": {
          "total_minutes_of_audio": {
            "description": "The total minutes of accumulated audio summed over all of the valid audio resources for the custom acoustic model. You can use this value to determine whether the custom model has too little or too much audio to begin training.",
            "type": "number",
            "format": "double"
          },
          "audio": {
            "description": "An array of `AudioResource` objects that provides information about the audio resources of the custom acoustic model. The array is empty if the custom model has no audio resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioResource"
            }
          }
        }
      },
      "AudioResource": {
        "description": "Information about an audio resource from a custom acoustic model.",
        "required": [
          "duration",
          "name",
          "details",
          "status"
        ],
        "properties": {
          "duration": {
            "description": "The total seconds of audio in the audio resource.",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "**For an archive-type resource,** the user-specified name of the resource. \n\n**For an audio-type resource,** the user-specified name of the resource or the name of the audio file that the user added for the resource. The value depends on the method that is called.",
            "type": "string"
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AudioDetails"
              },
              {
                "description": "An `AudioDetails` object that provides detailed information about the audio resource. The object is empty until the service finishes processing the audio."
              }
            ]
          },
          "status": {
            "description": "The status of the audio resource:\n* `ok`: The service successfully analyzed the audio data. The data can be used to train the custom model.\n* `being_processed`: The service is still analyzing the audio data. The service cannot accept requests to add new audio resources or to train the custom model until its analysis is complete.\n* `invalid`: The audio data is not valid for training the custom model (possibly because it has the wrong format or sampling rate, or because it is corrupted). For an archive file, the entire archive is invalid if any of its audio files are invalid.",
            "type": "string",
            "enum": [
              "ok",
              "being_processed",
              "invalid"
            ]
          }
        }
      },
      "AudioDetails": {
        "description": "Information about an audio resource from a custom acoustic model.",
        "properties": {
          "type": {
            "description": "The type of the audio resource:\n* `audio` for an individual audio file\n* `archive` for an archive (**.zip** or **.tar.gz**) file that contains audio files\n* `undetermined` for a resource that the service cannot validate (for example, if the user mistakenly passes a file that does not contain audio, such as a JPEG file)",
            "type": "string",
            "enum": [
              "audio",
              "archive",
              "undetermined"
            ]
          },
          "codec": {
            "description": "**For an audio-type resource,** the codec in which the audio is encoded. Omitted for an archive-type resource.",
            "type": "string"
          },
          "frequency": {
            "description": "**For an audio-type resource,** the sampling rate of the audio in Hertz (samples per second). Omitted for an archive-type resource.",
            "type": "integer",
            "format": "int32"
          },
          "compression": {
            "description": "**For an archive-type resource,** the format of the compressed archive:\n* `zip` for a **.zip** file\n* `gzip` for a **.tar.gz** file \n\nOmitted for an audio-type resource.",
            "type": "string",
            "enum": [
              "zip",
              "gzip"
            ]
          }
        }
      },
      "AudioListing": {
        "description": "Information about an audio resource from a custom acoustic model.",
        "properties": {
          "duration": {
            "description": "**For an audio-type resource,**  the total seconds of audio in the resource. Omitted for an archive-type resource.",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "**For an audio-type resource,** the user-specified name of the resource. Omitted for an archive-type resource.",
            "type": "string"
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AudioDetails"
              },
              {
                "description": "**For an audio-type resource,** an `AudioDetails` object that provides detailed information about the resource. The object is empty until the service finishes processing the audio. Omitted for an archive-type resource."
              }
            ]
          },
          "status": {
            "description": "**For an audio-type resource,** the status of the resource:\n* `ok`: The service successfully analyzed the audio data. The data can be used to train the custom model.\n* `being_processed`: The service is still analyzing the audio data. The service cannot accept requests to add new audio resources or to train the custom model until its analysis is complete.\n* `invalid`: The audio data is not valid for training the custom model (possibly because it has the wrong format or sampling rate, or because it is corrupted). \n\nOmitted for an archive-type resource.",
            "type": "string",
            "enum": [
              "ok",
              "being_processed",
              "invalid"
            ]
          },
          "container": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AudioResource"
              },
              {
                "description": "**For an archive-type resource,** an object of type `AudioResource` that provides information about the resource. Omitted for an audio-type resource."
              }
            ]
          },
          "audio": {
            "description": "**For an archive-type resource,** an array of `AudioResource` objects that provides information about the audio-type resources that are contained in the resource. Omitted for an audio-type resource.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioResource"
            }
          }
        }
      },
      "TrainingResponse": {
        "description": "The response from training of a custom language or custom acoustic model.",
        "properties": {
          "warnings": {
            "description": "An array of `TrainingWarning` objects that lists any invalid resources contained in the custom model. For custom language models, invalid resources are grouped and identified by type of resource. The method can return warnings only if the `strict` parameter is set to `false`.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrainingWarning"
            }
          }
        }
      },
      "TrainingWarning": {
        "description": "A warning from training of a custom language or custom acoustic model.",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "description": "An identifier for the type of invalid resources listed in the `description` field.",
            "type": "string",
            "enum": [
              "invalid_audio_files",
              "invalid_corpus_files",
              "invalid_grammar_files",
              "invalid_words"
            ]
          },
          "message": {
            "description": "A warning message that lists the invalid resources that are excluded from the custom model's training. The message has the following format: `Analysis of the following {resource_type} has not completed successfully: [{resource_names}]. They will be excluded from custom {model_type} model training.`",
            "type": "string"
          }
        }
      },
      "ErrorModel": {
        "description": "The error response from a failed request.",
        "required": [
          "error",
          "code",
          "code_description"
        ],
        "properties": {
          "error": {
            "description": "Description of the problem.",
            "type": "string"
          },
          "code": {
            "description": "HTTP response code.",
            "type": "integer",
            "format": "int32"
          },
          "code_description": {
            "description": "Response message.",
            "type": "string"
          },
          "warnings": {
            "description": "Warnings associated with the error.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}